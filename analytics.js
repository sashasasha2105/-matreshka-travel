// ========================================
// –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–û–¢ - –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô
// ========================================

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ Telegram –±–æ—Ç
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
 * - –ó–∞–ø—É—Å–∫–∏ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * - –û—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–æ–∫
 * - –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

class MatryoshkaAnalytics {
    constructor() {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ analytics.config.js)
        const config = window.ANALYTICS_CONFIG || {};

        this.botToken = config.BOT_TOKEN || '';
        this.chatId = config.CHAT_ID || '';
        this.enabled = config.ENABLED !== false;
        this.debug = config.DEBUG || false;
        this.apiUrl = `https://api.telegram.org/bot${this.botToken}`;
        this.sessionId = this.generateSessionId();
        this.sessionStartTime = Date.now();

        if (this.debug) {
            console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('Session ID:', this.sessionId);
            console.log('Enabled:', this.enabled);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
     */
    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram WebApp
     */
    getUserInfo() {
        const tg = window.Telegram?.WebApp;

        if (!tg || !tg.initDataUnsafe?.user) {
            return {
                id: 'unknown',
                username: '–ì–æ—Å—Ç—å',
                first_name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                last_name: '',
                language_code: navigator.language || 'ru',
                is_bot: false,
                is_premium: false
            };
        }

        const user = tg.initDataUnsafe.user;
        return {
            id: user.id,
            username: user.username || 'no_username',
            first_name: user.first_name || '',
            last_name: user.last_name || '',
            language_code: user.language_code || 'ru',
            is_bot: user.is_bot || false,
            is_premium: user.is_premium || false,
            photo_url: user.photo_url || null
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –±—Ä–∞—É–∑–µ—Ä–µ
     */
    getDeviceInfo() {
        const tg = window.Telegram?.WebApp;

        return {
            platform: tg?.platform || navigator.platform,
            user_agent: navigator.userAgent,
            screen_width: window.screen.width,
            screen_height: window.screen.height,
            viewport_width: window.innerWidth,
            viewport_height: window.innerHeight,
            color_scheme: tg?.colorScheme || 'light',
            is_mobile: /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),
            language: navigator.language,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
     */
    formatMessage(event, data) {
        const user = this.getUserInfo();
        const device = this.getDeviceInfo();
        const timestamp = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        let message = '';

        switch (event) {
            case 'bot_start':
                message = `
üöÄ <b>–ù–û–í–´–ô –ó–ê–ü–£–°–ö –ë–û–¢–ê</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚îú ID: <code>${user.id}</code>
‚îú –ù–∏–∫–Ω–µ–π–º: @${user.username}
‚îú –ò–º—è: ${user.first_name} ${user.last_name}
‚îú –Ø–∑—ã–∫: ${user.language_code}
${user.is_premium ? '‚îú ‚≠ê Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n' : ''}

üì± <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b>
‚îú –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${device.platform}
‚îú –≠–∫—Ä–∞–Ω: ${device.screen_width}x${device.screen_height}
‚îú –ú–æ–±–∏–ª—å–Ω–æ–µ: ${device.is_mobile ? '–î–∞' : '–ù–µ—Ç'}
‚îú –¢–µ–º–∞: ${device.color_scheme}

üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b>
‚îú –Ø–∑—ã–∫: ${device.language}
‚îú –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${device.timezone}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
üÜî <b>Session:</b> <code>${this.sessionId}</code>
                `.trim();
                break;

            case 'link_open':
                message = `
üîó <b>–û–¢–ö–†–´–¢–ò–ï –°–°–´–õ–ö–ò</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username} (${user.first_name})
üîó <b>–°—Å—ã–ª–∫–∞:</b> ${data.url}
üìÑ <b>–¢–∏–ø:</b> ${data.type || 'unknown'}
${data.title ? `üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${data.title}\n` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
üÜî <b>Session:</b> <code>${this.sessionId}</code>
                `.trim();
                break;

            case 'page_view':
                message = `
üìÑ <b>–ü–†–û–°–ú–û–¢–† –°–¢–†–ê–ù–ò–¶–´</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username}
üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${data.page}
${data.from ? `‚¨ÖÔ∏è <b>–û—Ç–∫—É–¥–∞:</b> ${data.from}\n` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
                `.trim();
                break;

            case 'action':
                message = `
‚ö° <b>–î–ï–ô–°–¢–í–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username}
‚ö° <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> ${data.action}
${data.details ? `üìù <b>–î–µ—Ç–∞–ª–∏:</b> ${data.details}\n` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
                `.trim();
                break;

            case 'purchase':
                message = `
üí∞ <b>–ü–û–ö–£–ü–ö–ê!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username} (${user.first_name})
üéÅ <b>–¢–æ–≤–∞—Ä:</b> ${data.item}
üíµ <b>–°—É–º–º–∞:</b> ${data.amount} ‚ÇΩ
${data.package_id ? `üì¶ <b>ID –ø–∞–∫–µ—Ç–∞:</b> ${data.package_id}\n` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
üÜî <b>Session:</b> <code>${this.sessionId}</code>
                `.trim();
                break;

            default:
                message = `
üìä <b>–°–û–ë–´–¢–ò–ï: ${event}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${user.username}
üìä <b>–î–∞–Ω–Ω—ã–µ:</b> ${JSON.stringify(data, null, 2)}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${timestamp}
                `.trim();
        }

        return message;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     */
    async sendMessage(message) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if (!this.enabled) {
            if (this.debug) {
                console.log('‚è∏Ô∏è –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            }
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (!this.botToken) {
            console.error('‚ùå Bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ analytics.config.js');
            return null;
        }

        // –ï—Å–ª–∏ chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (!this.chatId) {
            if (this.debug) {
                console.warn('‚ö†Ô∏è Analytics Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º bot owner chat.');
            }
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å updates –∏ –≤–∑—è—Ç—å chat_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.getUpdatesAndSetChatId();
        }

        if (!this.chatId) {
            if (this.debug) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
            }
            return null;
        }

        try {
            const response = await fetch(`${this.apiUrl}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    chat_id: this.chatId,
                    text: message,
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                })
            });

            const result = await response.json();

            if (result.ok) {
                if (this.debug) {
                    console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                }
                return result.result;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', result.description);
                return null;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞
     */
    async getUpdatesAndSetChatId() {
        try {
            const response = await fetch(`${this.apiUrl}/getUpdates?limit=1`);
            const result = await response.json();

            if (result.ok && result.result.length > 0) {
                const latestUpdate = result.result[result.result.length - 1];
                const chatId = latestUpdate.message?.chat?.id || latestUpdate.my_chat_member?.chat?.id;

                if (chatId) {
                    this.chatId = chatId;
                    if (this.debug) {
                        console.log('‚úÖ Chat ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', chatId);
                    }
                }
            }
        } catch (error) {
            if (this.debug) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id:', error);
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
     */
    async trackBotStart() {
        if (this.debug) {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
        }
        const message = this.formatMessage('bot_start', {});
        return await this.sendMessage(message);
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
     */
    async trackLinkOpen(url, type = 'external', title = null) {
        if (this.debug) {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏:', url);
        }
        const message = this.formatMessage('link_open', { url, type, title });
        return await this.sendMessage(message);
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async trackPageView(page, from = null) {
        if (this.debug) {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', page);
        }
        const message = this.formatMessage('page_view', { page, from });
        return await this.sendMessage(message);
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async trackAction(action, details = null) {
        if (this.debug) {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:', action);
        }
        const message = this.formatMessage('action', { action, details });
        return await this.sendMessage(message);
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
     */
    async trackPurchase(item, amount, packageId = null) {
        if (this.debug) {
            console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:', item, amount);
        }
        const message = this.formatMessage('purchase', { item, amount, package_id: packageId });
        return await this.sendMessage(message);
    }
}

// –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
window.matryoshkaAnalytics = new MatryoshkaAnalytics();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const analytics = window.matryoshkaAnalytics;

    if (analytics && analytics.enabled) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        analytics.trackBotStart();

        if (analytics.debug) {
            console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ú–∞—Ç—Ä–µ—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MatryoshkaAnalytics;
}
