/**
 * –õ–µ–Ω—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

class TravelFeed {
    constructor() {
        this.database = window.travelDatabase;
        this.container = null;
        console.log('‚úÖ TravelFeed –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ª–µ–Ω—Ç—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    render() {
        const container = document.querySelector('#feedContent');
        if (!container) {
            console.error('‚ùå #feedContent –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        this.container = container;
        const travels = this.database.getAll();

        console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏–∑ –±–∞–∑—ã:', travels.length);
        console.log('üóÑÔ∏è –î–∞–Ω–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:', travels);

        const html = `
            <div class="feed-container">
                <div class="feed-header">
                    <h2 class="feed-title">
                        <span class="feed-icon">üåç</span>
                        –õ–µ–Ω—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
                    </h2>
                    <div class="feed-stats">
                        ${travels.length} ${this.getWordForm(travels.length, ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'])}
                    </div>
                </div>

                ${travels.length === 0 ? this.renderEmptyState() : this.renderTravels(travels)}
            </div>
        `;

        container.innerHTML = html;
        this.attachEventListeners();
    }

    /**
     * –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã
     */
    renderEmptyState() {
        return `
            <div class="feed-empty">
                <div class="feed-empty-icon">üó∫Ô∏è</div>
                <h3 class="feed-empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</h3>
                <p class="feed-empty-text">–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º!</p>
                <button class="feed-empty-btn" onclick="showProfile()">
                    üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
                </button>
            </div>
        `;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    renderTravels(travels) {
        return `
            <div class="feed-grid">
                ${travels.map(travel => this.renderTravelCard(travel)).join('')}
            </div>
        `;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
     */
    renderTravelCard(travel) {
        console.log('üé® –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:', travel.title);
        console.log('üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:', travel.images);

        const author = travel.author || {};
        const authorName = author.firstName ? `${author.firstName} ${author.lastName || ''}` : author.username || '–ê–Ω–æ–Ω–∏–º';
        const timeAgo = this.getTimeAgo(travel.createdAt || Date.now());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const hasImages = travel.images && Array.isArray(travel.images) && travel.images.length > 0;
        console.log('‚úÖ –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', hasImages, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:', travel.images?.length);

        return `
            <div class="feed-card" data-global-id="${travel.globalId || travel.id}">
                <!-- –®–∞–ø–∫–∞ —Å –∞–≤—Ç–æ—Ä–æ–º -->
                <div class="feed-card-header">
                    <div class="feed-author">
                        <div class="feed-author-avatar">
                            ${author.photo ? `<img src="${author.photo}" alt="${authorName}">` : `<span>${this.getInitials(authorName)}</span>`}
                        </div>
                        <div class="feed-author-info">
                            <div class="feed-author-name">${authorName}</div>
                            <div class="feed-author-time">${timeAgo}</div>
                        </div>
                    </div>
                </div>

                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
                ${hasImages ? `
                <div class="feed-card-images" onclick="matryoshkaFeed.openGallery('${travel.globalId || travel.id}')">
                    ${this.generatePhotoGrid(travel.images)}
                </div>
                ` : ''}

                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç -->
                <div class="feed-card-content">
                    <h4 class="feed-card-title">${travel.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                    <p class="feed-card-text">${travel.text || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                </div>

                <!-- –§—É—Ç–µ—Ä —Å –ª–∞–π–∫–∞–º–∏ -->
                <div class="feed-card-footer">
                    <button class="feed-like-btn ${travel.liked ? 'liked' : ''}"
                            onclick="matryoshkaFeed.toggleLike('${travel.globalId || travel.id}')">
                        <span class="feed-like-icon">${travel.liked ? '‚ù§Ô∏è' : 'ü§ç'}</span>
                        <span class="feed-like-count">${travel.likes || 0}</span>
                    </button>
                    <div class="feed-card-location">
                        üìç ${(travel.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').split(',')[0]}
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∫–∞–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
     */
    generatePhotoGrid(images) {
        console.log('üñºÔ∏è generatePhotoGrid –≤—ã–∑–≤–∞–Ω–∞ —Å images:', images);

        if (!images || images.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return '<div class="no-images" style="padding: 20px; text-align: center; color: rgba(255,255,255,0.5);">–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
        }

        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –¥–ª—è', images.length, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');

        if (images.length === 1) {
            console.log('üìê –û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            return `<img src="${images[0]}" class="single-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">`;
        }

        if (images.length === 2) {
            console.log('üìê –î–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return `
                <div class="grid-two">
                    ${images.map(img => `<img src="${img}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">`).join('')}
                </div>
            `;
        }

        if (images.length === 3) {
            console.log('üìê –¢—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return `
                <div class="grid-three">
                    <img src="${images[0]}" class="grid-image main" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                    <div class="grid-column">
                        <img src="${images[1]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                        <img src="${images[2]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                    </div>
                </div>
            `;
        }

        if (images.length >= 4) {
            console.log('üìê –ß–µ—Ç—ã—Ä–µ –∏–ª–∏ –±–æ–ª–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return `
                <div class="grid-many">
                    <img src="${images[0]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                    <img src="${images[1]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                    <img src="${images[2]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                    <div class="grid-more">
                        <img src="${images[3]}" class="grid-image" loading="lazy" onerror="console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.src)">
                        ${images.length > 4 ? `<div class="more-overlay">+${images.length - 4}</div>` : ''}
                    </div>
                </div>
            `;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –∏–º–µ–Ω–∏
     */
    getInitials(name) {
        const parts = name.trim().split(' ');
        if (parts.length >= 2) {
            return (parts[0][0] + parts[1][0]).toUpperCase();
        }
        return name.substring(0, 2).toUpperCase();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
     */
    getTimeAgo(timestamp) {
        const now = Date.now();
        const diff = now - timestamp;
        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        if (days > 0) return `${days} ${this.getWordForm(days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])} –Ω–∞–∑–∞–¥`;
        if (hours > 0) return `${hours} ${this.getWordForm(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])} –Ω–∞–∑–∞–¥`;
        if (minutes > 0) return `${minutes} ${this.getWordForm(minutes, ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])} –Ω–∞–∑–∞–¥`;
        return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    }

    /**
     * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
     */
    getWordForm(number, words) {
        const cases = [2, 0, 1, 1, 1, 2];
        return words[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[Math.min(number % 10, 5)]];
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∞–π–∫
     */
    toggleLike(globalId) {
        const travel = this.database.toggleLike(globalId);
        if (travel) {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            const card = document.querySelector(`[data-global-id="${globalId}"]`);
            if (card) {
                const likeBtn = card.querySelector('.feed-like-btn');
                const likeIcon = likeBtn.querySelector('.feed-like-icon');
                const likeCount = likeBtn.querySelector('.feed-like-count');

                likeBtn.classList.toggle('liked', travel.liked);
                likeIcon.textContent = travel.liked ? '‚ù§Ô∏è' : 'ü§ç';
                likeCount.textContent = travel.likes || 0;

                // –ê–Ω–∏–º–∞—Ü–∏—è
                likeIcon.style.transform = 'scale(1.3)';
                setTimeout(() => {
                    likeIcon.style.transform = 'scale(1)';
                }, 200);
            }
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    openGallery(globalId) {
        const travel = this.database.travels.find(t => t.globalId === globalId);
        if (travel && travel.images) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –≥–∞–ª–µ—Ä–µ–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if (window.matryoshkaProfile && typeof window.matryoshkaProfile.showPhotoGalleryModal === 'function') {
                window.matryoshkaProfile.showPhotoGalleryModal(travel.images, 0);
            }
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    attachEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ onclick –≤ HTML
        console.log('‚úÖ Feed event listeners attached');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.matryoshkaFeed = new TravelFeed();

console.log('‚úÖ TravelFeed –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
