2





/**
 * üó∫Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 2GIS –∫–∞—Ä—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ú–∞—Ç—Ä–µ—à–∫–∞
 * –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ä—Ç —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
 */

class Matryoshka2GISMaps {
    constructor() {
        this.apiKey = '20d959b9-d5ec-4578-abe3-1d414e8edfc3';
        this.mapInstance = null;
        this.mapContainer = null;
        this.markers = [];
        this.activeRegion = null;
        this.isMapLoaded = false;
        this.searchResults = [];

        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤
        console.log('üó∫Ô∏è –ú–æ–¥—É–ª—å –∫–∞—Ä—Ç –ú–∞—Ç—Ä–µ—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        this.initPromise = this.initializeAPI();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2GIS MapGL API
     */
    async initializeAPI() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º 2GIS MapGL
            if (!window.mapgl) {
                await this.loadMapGLScript();
            }

            console.log('‚úÖ 2GIS MapGL API –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.isMapLoaded = true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 2GIS API:', error);
            this.fallbackToIframe();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ MapGL
     */
    loadMapGLScript() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://mapgl.2gis.com/api/js/v1';
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
     */
    async createMap(regionData, containerId) {
        this.mapContainer = document.getElementById(containerId);
        if (!this.mapContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
            return;
        }

        this.activeRegion = regionData;

        // –°–†–ê–ó–£ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É, –Ω–µ –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('üöÄ –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è:', regionData.name);

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º MapGL –∫–∞—Ä—Ç—É!
        console.log('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º MapGL –∫–∞—Ä—Ç—É —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏!');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º MapGL –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            if (!window.mapgl) {
                console.log('‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º MapGL API...');
                await this.loadMapGLScript();
            }

            console.log('‚úÖ MapGL –∑–∞–≥—Ä—É–∂–µ–Ω - —Å–æ–∑–¥–∞–µ–º –ù–ê–°–¢–û–Ø–©–£–Æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É');
            await this.createRealInteractiveMap(regionData);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ MapGL:', error);
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É');
            this.createForceInteractiveMap(regionData);
        }
    }

    /**
     * –ù–û–í–ê–Ø - –°–æ–∑–¥–∞–Ω–∏–µ –ù–ê–°–¢–û–Ø–©–ï–ô –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π MapGL –∫–∞—Ä—Ç—ã
     */
    async createRealInteractiveMap(regionData) {
        const center = this.getRegionCenter(regionData.id);

        console.log('üî• –°–û–ó–î–ê–ï–ú –ù–ê–°–¢–û–Ø–©–£–Æ MapGL –∫–∞—Ä—Ç—É:', regionData.name);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.mapContainer.innerHTML = `
            <div class="full-map-interface">
                <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å -->
                <div class="map-sidebar" id="mapSidebar">
                    <div class="sidebar-header">
                        <div class="region-title">${regionData.name}</div>
                        <div class="search-container">
                            <input type="text" class="map-search" id="mapSearch" placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...">
                            <button class="search-btn" onclick="matryoshka2GIS.performSearch()">üîç</button>
                        </div>
                    </div>
                    <div class="sidebar-content" id="sidebarContent">
                        <div class="map-status">‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É...</div>
                    </div>
                </div>

                <!-- MapGL –∫–∞—Ä—Ç–∞ -->
                <div class="map-canvas" id="mapCanvas" style="flex: 1; position: relative; background: #1a1a2e;">
                    <div class="map-loading-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; background: rgba(26, 26, 46, 0.9); z-index: 999;">
                        <div style="color: #ffcc00; font-size: 18px;">üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É...</div>
                    </div>
                </div>
            </div>
        `;

        // –°–æ–∑–¥–∞–µ–º MapGL –∫–∞—Ä—Ç—É
        await this.initializeMapGLInstance(center, regionData);

        console.log('‚úÖ –ù–ê–°–¢–û–Ø–©–ê–Ø MapGL –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MapGL —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
     */
    async initializeMapGLInstance(center, regionData) {
        try {
            console.log('‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MapGL —ç–∫–∑–µ–º–ø–ª—è—Ä...');

            // –£–±–∏—Ä–∞–µ–º overlay
            setTimeout(() => {
                const overlay = document.querySelector('.map-loading-overlay');
                if (overlay) overlay.remove();
            }, 1000);

            // –°–æ–∑–¥–∞–µ–º MapGL –∫–∞—Ä—Ç—É
            this.mapInstance = new mapgl.Map('mapCanvas', {
                center: center.coordinates,
                zoom: center.zoom,
                key: this.apiKey,
                style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b', // 2–ì–ò–° —Å—Ç–∏–ª—å
            });

            console.log('üó∫Ô∏è MapGL –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
            this.mapInstance.on('ready', () => {
                console.log('‚úÖ MapGL –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

                // –°–†–ê–ó–£ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                this.loadAndDisplayAttractions(regionData);

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∏–∫—É
                this.mapInstance.on('click', (event) => {
                    this.handleMapClick(event, regionData);
                });
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            this.mapInstance.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ MapGL:', error);
                this.createForceInteractiveMap(regionData);
            });

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MapGL:', error);
            this.createForceInteractiveMap(regionData);
        }
    }

    /**
     * –°–¢–ê–†–ê–Ø - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
     */
    async createInteractiveMap_OLD(regionData) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        const center = this.getRegionCenter(regionData.id);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
        this.mapContainer.innerHTML = `
            <div class="full-map-interface">
                <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ -->
                <div class="map-sidebar" id="mapSidebar">
                    <div class="sidebar-header">
                        <div class="region-title">${regionData.name}</div>
                        <div class="search-container">
                            <input type="text" class="map-search" id="mapSearch" placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...">
                            <button class="search-btn" onclick="matryoshka2GIS.performSearch()">üîç</button>
                        </div>
                    </div>

                    <div class="sidebar-content" id="sidebarContent">
                        <div class="sidebar-welcome">
                            <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${regionData.name}!</h3>
                            <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</p>
                            <div class="attraction-categories">
                                <button class="category-btn" onclick="matryoshka2GIS.searchCategory('–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')">üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</button>
                                <button class="category-btn" onclick="matryoshka2GIS.searchCategory('–º—É–∑–µ–∏')">üé® –ú—É–∑–µ–∏</button>
                                <button class="category-btn" onclick="matryoshka2GIS.searchCategory('—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã')">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã</button>
                                <button class="category-btn" onclick="matryoshka2GIS.searchCategory('–æ—Ç–µ–ª–∏')">üè® –û—Ç–µ–ª–∏</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–ø—Ä–∞–≤–∞ -->
                <div class="map-main-container" id="mapMainContainer">
                    <div class="map-loading">
                        <div class="map-loading-spinner"></div>
                        <div class="map-loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É...</div>
                    </div>
                </div>
            </div>
        `;

        const mapMainContainer = document.getElementById('mapMainContainer');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MapGL
            if (!window.mapgl) {
                throw new Error('MapGL –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É
            this.mapInstance = new mapgl.Map(mapMainContainer, {
                center: center.coordinates,
                zoom: center.zoom,
                key: this.apiKey,
                style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b',
            });

            // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            setTimeout(() => {
                const loader = mapMainContainer.querySelector('.map-loading');
                if (loader) loader.remove();
            }, 1000);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
            this.mapInstance.on('click', (event) => {
                this.handleMapClick(event, regionData);
            });

            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(async () => {
                console.log('üöÄ –°–¢–ê–†–¢: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è', regionData.name);
                try {
                    await this.loadAndDisplayAttractions(regionData);
                    console.log('üéØ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
                } catch (error) {
                    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:', error);
                }
            }, 1500);

            console.log('‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è:', regionData.name);
            console.log(`üéØ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã:', error);

            // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É iframe —Å –¥–∞–Ω–Ω—ã–º–∏
            this.createSimpleMapInterface(regionData, mapMainContainer);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
     */
    getRegionCenter(regionId) {
        const centers = {
            'moscow': {
                coordinates: [37.6176, 55.7558],
                zoom: 10
            },
            'spb': {
                coordinates: [30.3351, 59.9311],
                zoom: 10
            },
            'kazan': {
                coordinates: [49.1221, 55.7887],
                zoom: 11
            },
            'sochi': {
                coordinates: [39.7303, 43.6028],
                zoom: 11
            },
            'ekaterinburg': {
                coordinates: [60.6122, 56.8431],
                zoom: 11
            },
            'volgograd': {
                coordinates: [44.5018, 48.7194],
                zoom: 11
            },
            'irkutsk': {
                coordinates: [104.2964, 52.2978],
                zoom: 11
            },
            'kaliningrad': {
                coordinates: [20.5083, 54.7065],
                zoom: 11
            },
            'nizhnynovgorod': {
                coordinates: [44.0020, 56.2965],
                zoom: 11
            },
            'chelyabinsk': {
                coordinates: [61.4291, 55.1644],
                zoom: 11
            },
            'karachaevo': {
                coordinates: [42.0577, 43.7681],
                zoom: 10
            },
            'stavropol': {
                coordinates: [41.9734, 45.0428],
                zoom: 11
            },
            'yaroslavl': {
                coordinates: [39.8844, 57.6261],
                zoom: 11
            },
            'kostroma': {
                coordinates: [40.9266, 57.7665],
                zoom: 11
            },
            'kabardino': {
                coordinates: [43.4917, 43.4806],
                zoom: 10
            }
        };

        return centers[regionId] || { coordinates: [37.6176, 55.7558], zoom: 10 };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
     */
    async handleMapClick(event, regionData) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', event.lngLat);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        this.showSidebarLoading('–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ...');

        // –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
        this.displayLocationInfo(event.lngLat, regionData.name);

        try {
            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏—â–µ–º –±–ª–∏–∑–ª–µ–∂–∞—â–∏–µ –º–µ—Å—Ç–∞
            const nearbyPlaces = await this.searchNearbyPlaces(event.lngLat, regionData.name);

            if (nearbyPlaces && nearbyPlaces.length > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                this.displayPlaceInSidebar(nearbyPlaces[0]);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞:', error);
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—É—é —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä—è–¥–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
     */
    async searchNearbyPlaces(coordinates, cityName) {
        try {
            const cityId = this.getCityIdForRegion(cityName);
            const searchUrl = `https://catalog.api.2gis.com/3.0/items?point=${coordinates.lng},${coordinates.lat}&radius=100&key=${this.apiKey}&city_id=${cityId}&fields=items.point,items.name,items.address,items.reviews,items.photos,items.schedule,items.contact_groups,items.purpose_name,items.rubrics&page_size=10&sort=distance`;

            const response = await fetch(searchUrl, {
                method: 'GET',
                headers: { 'Accept': 'application/json' },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            return data.result?.items || [];
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º:', error);
            return [];
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    async performSearch() {
        const searchInput = document.getElementById('mapSearch');
        const query = searchInput.value.trim();

        if (!query) return;

        this.showSidebarLoading(`–ü–æ–∏—Å–∫ "${query}"...`);

        try {
            const cityName = this.activeRegion.name;
            const results = await this.searchPlaces(query, cityName);

            if (results.length > 0) {
                this.displaySearchResults(results);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
                if (results[0].point) {
                    this.mapInstance.setCenter([results[0].point.lon, results[0].point.lat]);
                    this.mapInstance.setZoom(16);
                }
            } else {
                this.showSidebarMessage('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.showSidebarError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞');
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async searchCategory(category) {
        this.showSidebarLoading(`–ü–æ–∏—Å–∫: ${category}...`);

        try {
            const cityName = this.activeRegion.name;
            const results = await this.searchPlaces(category, cityName);

            if (results.length > 0) {
                this.displaySearchResults(results);
            } else {
                this.showSidebarMessage(`${category} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
            this.showSidebarError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ 2GIS API
     */
    async searchPlaces(query, cityName) {
        const cityId = this.getCityIdForRegion(cityName);
        const searchUrl = `https://catalog.api.2gis.com/3.0/items?q=${encodeURIComponent(query)}&key=${this.apiKey}&city_id=${cityId}&fields=items.point,items.name,items.address,items.reviews,items.photos,items.schedule,items.contact_groups,items.purpose_name,items.rubrics&page_size=20&sort=rating`;

        const response = await fetch(searchUrl, {
            method: 'GET',
            headers: { 'Accept': 'application/json' },
            mode: 'cors'
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        return data.result?.items || [];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    async loadAndDisplayAttractions(regionData) {
        // –°–†–ê–ó–£ —Å–∫—Ä—ã–≤–∞–µ–º –ª—é–±–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫
        console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –∑–∞–≥—Ä—É–∑–∫—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –±–µ–∑ —Å–ø–∏–Ω–Ω–µ—Ä–∞!');

        // –í–°–ï–ì–î–ê –∑–∞–≥—Ä—É–∂–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        let attractions = this.getFallbackAttractions(regionData.name);
        console.log(`üì¶ Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${regionData.name}:`, attractions.length, '–æ–±—ä–µ–∫—Ç–æ–≤');

        try {
            // –ü—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API 2GIS
            const apiAttractions = await this.searchPlaces('–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º—É–∑–µ–∏', regionData.name);

            // –ï—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if (apiAttractions && apiAttractions.length > 0) {
                console.log('‚úÖ API 2GIS —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ');
                // –î–æ–±–∞–≤–ª—è–µ–º API –¥–∞–Ω–Ω—ã–µ –∫ fallback (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
                const combinedAttractions = [...attractions];
                apiAttractions.forEach(apiPlace => {
                    const exists = attractions.some(fallbackPlace =>
                        this.isSimilarPlace(apiPlace.name, fallbackPlace.name)
                    );
                    if (!exists) {
                        combinedAttractions.push(apiPlace);
                    }
                });
                attractions = combinedAttractions;
            } else {
                console.warn('‚ö†Ô∏è API 2GIS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ API 2GIS:', error.message);
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π');
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
        const partners = this.getRegionPartners(regionData);
        console.log(`ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã –¥–ª—è ${regionData.name}:`, partners.length, '–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å fallback –¥–∞–Ω–Ω—ã–µ)
        if (attractions.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É (–µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è)
            if (this.mapInstance) {
                console.log('üó∫Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É');
                this.addMarkersToMap(attractions);

                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
                if (partners.length > 0) {
                    console.log('ü§ù –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É');
                    this.addPartnerMarkersToMap(partners);
                }
            } else {
                console.log('üì± Iframe –∫–∞—Ä—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤ sidebar');
            }

            // –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            this.displaySearchResults(attractions);
            console.log(`üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${attractions.length} –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è ${regionData.name}`);
        } else {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö!');
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', regionData.name);

            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å fallback –µ—â–µ —Ä–∞–∑
            const fallbackAttractions = this.getFallbackAttractions(regionData.name);
            if (fallbackAttractions.length > 0) {
                console.log('üîÑ –ù–∞–π–¥–µ–Ω—ã fallback –¥–∞–Ω–Ω—ã–µ:', fallbackAttractions.length);
                this.displaySearchResults(fallbackAttractions);
            } else {
                this.showSidebarMessage('–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
     */
    isSimilarPlace(name1, name2) {
        const clean1 = name1.toLowerCase().replace(/[^\w\s]/g, '');
        const clean2 = name2.toLowerCase().replace(/[^\w\s]/g, '');
        return clean1.includes(clean2) || clean2.includes(clean1);
    }

    /**
     * Fallback –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
     */
    getFallbackAttractions(cityName) {
        const fallbackData = {
            '–ú–æ—Å–∫–≤–∞': [
                {
                    id: 'kremlin_moscow',
                    name: '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å',
                    purpose_name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    point: { lat: 55.751800, lon: 37.617300 }, // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ö—Ä–µ–º–ª—è
                    address: { name: '–ú–æ—Å–∫–≤–∞, –ö—Ä–µ–º–ª—å' },
                    reviews: { general_rating: 4.8, general_review_count: 15420 }
                },
                {
                    id: 'red_square',
                    name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
                    purpose_name: '–ü–ª–æ—â–∞–¥—å',
                    point: { lat: 55.753930, lon: 37.620795 }, // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏
                    address: { name: '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å' },
                    reviews: { general_rating: 4.9, general_review_count: 22350 }
                },
                {
                    id: 'basil_cathedral',
                    name: '–°–æ–±–æ—Ä –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ',
                    purpose_name: '–•—Ä–∞–º',
                    point: { lat: 55.752516, lon: 37.623147 }, // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–º–∞
                    address: { name: '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 7' },
                    reviews: { general_rating: 4.7, general_review_count: 8920 }
                },
                {
                    id: 'tretyakov_gallery',
                    name: '–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è',
                    purpose_name: '–ú—É–∑–µ–π',
                    point: { lat: 55.7414, lon: 37.6207 },
                    address: { name: '–õ–∞–≤—Ä—É—à–∏–Ω—Å–∫–∏–π –ø–µ—Ä., 10' },
                    reviews: { general_rating: 4.6, general_review_count: 12500 }
                }
            ],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': [
                {
                    id: 'hermitage_spb',
                    name: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂',
                    purpose_name: '–ú—É–∑–µ–π',
                    point: { lat: 59.9398, lon: 30.3141 },
                    address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 34' },
                    reviews: { general_rating: 4.8, general_review_count: 18750 }
                },
                {
                    id: 'palace_square_spb',
                    name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å',
                    purpose_name: '–ü–ª–æ—â–∞–¥—å',
                    point: { lat: 59.9386, lon: 30.3158 },
                    address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å' },
                    reviews: { general_rating: 4.9, general_review_count: 12400 }
                },
                {
                    id: 'peter_paul_fortress',
                    name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å',
                    purpose_name: '–ö—Ä–µ–ø–æ—Å—Ç—å',
                    point: { lat: 59.9496, lon: 30.3164 },
                    address: { name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å' },
                    reviews: { general_rating: 4.7, general_review_count: 9800 }
                }
            ],
            '–ö–∞–∑–∞–Ω—å': [
                {
                    id: 'kazan_kremlin',
                    name: '–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö—Ä–µ–º–ª—å',
                    purpose_name: '–ö—Ä–µ–º–ª—å',
                    point: { lat: 55.7998, lon: 49.1056 },
                    address: { name: '–ö—Ä–µ–º–ª—å, 1' },
                    reviews: { general_rating: 4.6, general_review_count: 8500 }
                },
                {
                    id: 'qol_sharif',
                    name: '–ú–µ—á–µ—Ç—å –ö—É–ª-–®–∞—Ä–∏—Ñ',
                    purpose_name: '–ú–µ—á–µ—Ç—å',
                    point: { lat: 55.7986, lon: 49.1050 },
                    address: { name: '–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö—Ä–µ–º–ª—å' },
                    reviews: { general_rating: 4.8, general_review_count: 6200 }
                }
            ]
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–∞–∑–≤–∞–Ω–∏—è
        let cityKey = Object.keys(fallbackData).find(key =>
            key.toLowerCase() === cityName.toLowerCase() ||
            cityName.toLowerCase().includes(key.toLowerCase()) ||
            key.toLowerCase().includes(cityName.toLowerCase())
        );

        let result = fallbackData[cityKey] || [];
        console.log(`üîç –ü–æ–∏—Å–∫ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "${cityName}":`, cityKey ? `–Ω–∞–π–¥–µ–Ω –∫–ª—é—á "${cityKey}"` : '–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω', `–≤–æ–∑–≤—Ä–∞—â–∞–µ–º ${result.length} –æ–±—ä–µ–∫—Ç–æ–≤`);

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
        if (result.length === 0) {
            console.log('üÜò –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', cityName);
            result = [
                {
                    id: 'emergency_center',
                    name: `–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞ ${cityName}`,
                    purpose_name: '–¶–µ–Ω—Ç—Ä',
                    point: this.getRegionCenter('moscow').coordinates,
                    address: { name: `${cityName}, —Ü–µ–Ω—Ç—Ä` },
                    reviews: { general_rating: 4.5, general_review_count: 100 }
                }
            ];
        }

        return result;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    async addAttractionMarkers(regionData) {
        if (!regionData.attractions || !this.mapInstance) return;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        this.clearMarkers();

        for (const [index, attraction] of regionData.attractions.entries()) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
                const coordinates = await this.searchAttractionCoordinates(attraction.name, regionData.name);

                if (coordinates) {
                    const marker = await this.createAttractionMarker(attraction, coordinates, index);
                    this.markers.push(marker);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –¥–ª—è ${attraction.name}:`, error);
            }
        }

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${this.markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π`);
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 2GIS API
     */
    async searchAttractionCoordinates(attractionName, regionName) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π city_id –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            const cityId = this.getCityIdForRegion(regionName);
            const query = `${attractionName} ${regionName}`;

            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            const searchUrl = `https://catalog.api.2gis.com/3.0/items?q=${encodeURIComponent(query)}&key=${this.apiKey}&city_id=${cityId}&fields=items.point,items.name,items.purpose_name&sort=rating&page_size=5`;

            console.log(`üîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è "${attractionName}" –≤ –≥–æ—Ä–æ–¥–µ ${regionName} (ID: ${cityId})`);

            const response = await fetch(searchUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.result && data.result.items && data.result.items.length > 0) {
                // –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const bestMatch = data.result.items.find(item =>
                    item.name.toLowerCase().includes(attractionName.toLowerCase()) ||
                    attractionName.toLowerCase().includes(item.name.toLowerCase())
                ) || data.result.items[0];

                if (bestMatch && bestMatch.point) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è "${attractionName}": ${bestMatch.name}`);
                    return [bestMatch.point.lon, bestMatch.point.lat];
                }
            }

            // Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            console.warn(`‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è "${attractionName}", –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            return this.getFallbackCoordinates(attractionName, regionName);
        } catch (error) {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            return this.getFallbackCoordinates(attractionName, regionName);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ city_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
     */
    getCityIdForRegion(regionName) {
        const cityIds = {
            '–ú–æ—Å–∫–≤–∞': '4504222397630173',        // –ú–æ—Å–∫–≤–∞
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '4504309321650163', // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            '–ö–∞–∑–∞–Ω—å': '4504078682312704',        // –ö–∞–∑–∞–Ω—å
            '–°–æ—á–∏': '4504226846105603',          // –°–æ—á–∏
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '4504078682181632',  // –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
            '–í–æ–ª–≥–æ–≥—Ä–∞–¥': '4504294968975360',     // –í–æ–ª–≥–æ–≥—Ä–∞–¥
            '–ò—Ä–∫—É—Ç—Å–∫': '4504078682181634',       // –ò—Ä–∫—É—Ç—Å–∫
            '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': '4504294968975362',   // –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥
            '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': '4504294968975364', // –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥
            '–ß–µ–ª—è–±–∏–Ω—Å–∫': '4504294968975366',     // –ß–µ–ª—è–±–∏–Ω—Å–∫
        };

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        const regionKey = Object.keys(cityIds).find(key =>
            regionName.toLowerCase().includes(key.toLowerCase()) ||
            key.toLowerCase().includes(regionName.toLowerCase())
        );

        return cityIds[regionKey] || '4504222397630173'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è fallback
     */
    getFallbackCoordinates(attractionName, regionName) {
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        const knownAttractions = {
            '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å': [37.6211, 55.7539],
            '–ö—Ä–µ–º–ª—å': [37.6173, 55.7520],
            '–•—Ä–∞–º –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ': [37.6230, 55.7525],
            '–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä': [37.6183, 55.7596],
            '–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è': [37.6206, 55.7414],
            '–≠—Ä–º–∏—Ç–∞–∂': [30.3141, 59.9398],
            '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å': [30.3158, 59.9386],
            '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å': [30.3169, 59.9496],
            '–ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∏–π —Å–æ–±–æ—Ä': [30.3063, 59.9342],
            '–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö—Ä–µ–º–ª—å': [49.1056, 55.7989],
            '–ú–µ—á–µ—Ç—å –ö—É–ª-–®–∞—Ä–∏—Ñ': [49.1051, 55.7985]
        };

        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (const [name, coords] of Object.entries(knownAttractions)) {
            if (attractionName.includes(name) || name.includes(attractionName)) {
                return coords;
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞–∫ fallback
        const regionCenter = this.getRegionCenter(regionName);
        return regionCenter.coordinates;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async createAttractionMarker(attraction, coordinates, index) {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π HTML —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ - –Ø–†–ö–ò–ô –ò –ó–ê–ú–ï–¢–ù–´–ô!
        const markerElement = document.createElement('div');
        markerElement.className = 'attraction-marker bright-marker';
        markerElement.innerHTML = `
            <div class="marker-icon bright-marker-icon">
                <span class="marker-number">${index + 1}</span>
                <div class="marker-pulse"></div>
            </div>
            <div class="marker-label">${attraction.name}</div>
        `;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        const marker = new mapgl.Marker(this.mapInstance, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö 2GIS
        markerElement.addEventListener('click', async () => {
            await this.showDetailedAttractionInfo(attraction, coordinates);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            markerElement.style.animation = 'markerBounceIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';
        }, index * 200);

        return marker;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ 2GIS
     */
    async showDetailedAttractionInfo(attraction, coordinates) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ø–∞–ø –µ—Å–ª–∏ –µ—Å—Ç—å
        this.closePopup();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
        const popupElement = document.createElement('div');
        popupElement.className = 'attraction-popup detailed-popup';
        popupElement.innerHTML = `
            <div class="popup-header">
                <h3 class="popup-title">${attraction.name}</h3>
                <button class="popup-close" onclick="matryoshka2GIS.closePopup()">‚úï</button>
            </div>
            <div class="popup-content">
                <div class="popup-loading">
                    <div class="popup-spinner"></div>
                    <div>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ 2–ì–ò–°...</div>
                </div>
            </div>
        `;

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø –Ω–∞ –∫–∞—Ä—Ç–µ
        this.currentPopup = new mapgl.Popup(this.mapInstance, {
            coordinates: coordinates,
            element: popupElement,
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ 2GIS
        try {
            const realData = await this.fetchReal2GISData(attraction, coordinates);
            this.updatePopupWithRealData(popupElement, attraction, realData, coordinates);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö 2GIS:', error);
            this.updatePopupWithFallbackData(popupElement, attraction, coordinates);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ 2GIS API
     */
    async fetchReal2GISData(attraction, coordinates) {
        try {
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            const searchQuery = encodeURIComponent(attraction.name);
            const searchUrl = `https://catalog.api.2gis.com/3.0/items?q=${searchQuery}&key=${this.apiKey}&fields=items.point,items.name,items.address,items.reviews,items.photos,items.schedule,items.contact_groups,items.purpose_name,items.rubrics,items.description,items.links,items.attributes,items.external_content&page_size=10&sort=rating`;

            const response = await fetch(searchUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.result && data.result.items && data.result.items.length > 0) {
                // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç
                const bestMatch = this.findBestMatch(data.result.items, attraction.name, coordinates);
                return bestMatch;
            }

            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ 2GIS API:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    findBestMatch(items, attractionName, coordinates) {
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (items.length === 1) return items[0];

        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const exactMatch = items.find(item =>
            item.name.toLowerCase() === attractionName.toLowerCase()
        );
        if (exactMatch) return exactMatch;

        // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        const partialMatch = items.find(item =>
            item.name.toLowerCase().includes(attractionName.toLowerCase()) ||
            attractionName.toLowerCase().includes(item.name.toLowerCase())
        );
        if (partialMatch) return partialMatch;

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return items[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ø–∞–ø–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ 2GIS
     */
    updatePopupWithRealData(popupElement, attraction, realData, coordinates) {
        const content = popupElement.querySelector('.popup-content');

        if (realData) {
            const reviews = realData.reviews || {};
            const rating = reviews.general_rating || 0;
            const reviewCount = reviews.general_review_count || 0;
            const address = realData.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
            const phone = realData.contact_groups?.[0]?.contacts?.find(c => c.type === 'phone')?.value || null;

            content.innerHTML = `
                <div class="real-2gis-info">
                    <div class="place-basic-info">
                        <div class="place-type">${realData.purpose_name || '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'}</div>
                        <div class="place-address">üìç ${address}</div>
                        ${phone ? `<div class="place-phone">üìû ${phone}</div>` : ''}
                    </div>

                    <div class="place-rating-detailed">
                        <div class="rating-display">
                            <div class="rating-stars">${this.generateStars(rating)}</div>
                            <span class="rating-value">${rating.toFixed(1)}</span>
                            <span class="rating-count">(${reviewCount.toLocaleString()} –æ—Ç–∑—ã–≤–æ–≤)</span>
                        </div>
                    </div>

                    <div class="place-description">
                        <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                        <p>${attraction.info}</p>
                    </div>

                    ${reviews.items && reviews.items.length > 0 ? `
                        <div class="real-reviews">
                            <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –∏–∑ 2–ì–ò–°</h4>
                            <div class="reviews-container">
                                ${reviews.items.slice(0, 3).map(review => `
                                    <div class="review-item-real">
                                        <div class="review-header">
                                            <span class="review-author">${review.author?.name || '–ê–Ω–æ–Ω–∏–º'}</span>
                                            <span class="review-rating">${this.generateStars(review.rating || 5)}</span>
                                        </div>
                                        <div class="review-text">${review.text || '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!'}</div>
                                        <div class="review-date">${this.formatDate(review.date_created)}</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    <div class="popup-actions">
                        <button class="popup-btn route-btn" onclick="matryoshka2GIS.buildRoute([${coordinates}])">
                            üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                        </button>
                        <button class="popup-btn info-btn" onclick="matryoshka2GIS.open2GISPage('${realData.name}', [${coordinates}])">
                            üîç –û—Ç–∫—Ä—ã—Ç—å –≤ 2–ì–ò–°
                        </button>
                        ${realData.id ? `
                            <button class="popup-btn details-btn" onclick="matryoshka2GIS.showMore2GISDetails('${realData.id}')">
                                üìã –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        } else {
            this.updatePopupWithFallbackData(popupElement, attraction, coordinates);
        }
    }

    /**
     * Fallback –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö 2GIS
     */
    updatePopupWithFallbackData(popupElement, attraction, coordinates) {
        const content = popupElement.querySelector('.popup-content');
        content.innerHTML = `
            <div class="popup-info">
                <div class="fallback-notice">
                    <span class="notice-icon">‚ÑπÔ∏è</span>
                    <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –ú–∞—Ç—Ä–µ—à–∫–∞</span>
                </div>
                <div class="attraction-description">
                    ${attraction.info.replace(/\n/g, '<br>')}
                </div>
            </div>
            <div class="popup-actions">
                <button class="popup-btn route-btn" onclick="matryoshka2GIS.buildRoute([${coordinates}])">
                    üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </button>
                <button class="popup-btn info-btn" onclick="matryoshka2GIS.open2GISPage('${attraction.name}', [${coordinates}])">
                    üîç –û—Ç–∫—Ä—ã—Ç—å –≤ 2–ì–ò–°
                </button>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    generateStars(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        return '‚òÖ'.repeat(fullStars) +
               (hasHalfStar ? '‚òÜ' : '') +
               '‚òÜ'.repeat(emptyStars);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';

        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        } catch {
            return '–ù–µ–¥–∞–≤–Ω–æ';
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ 2–ì–ò–°
     */
    open2GISPage(placeName, coordinates = null) {
        if (coordinates) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const mapUrl = `https://2gis.ru/geo/${coordinates[1]},${coordinates[0]}?m=${coordinates[1]},${coordinates[0]},16&q=${encodeURIComponent(placeName)}`;
            window.open(mapUrl, '_blank');
        } else {
            // Fallback –∫ –ø–æ–∏—Å–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            const searchUrl = `https://2gis.ru/search/${encodeURIComponent(placeName)}`;
            window.open(searchUrl, '_blank');
        }
    }


    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞
     */
    closePopup() {
        if (this.currentPopup) {
            this.currentPopup.destroy();
            this.currentPopup = null;
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    buildRoute(coordinates) {
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
        if (this.mapInstance) {
            this.mapInstance.setCenter(coordinates);
            this.mapInstance.setZoom(16);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            this.showRouteInfo(coordinates);
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–∫—Ç–∞ –≤ 2GIS (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    open2GISPage(placeName, coordinates = null) {
        if (coordinates) {
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
            if (this.mapInstance) {
                this.mapInstance.setCenter(coordinates);
                this.mapInstance.setZoom(16);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            this.displayLocationInfo(coordinates, placeName);
        } else {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            this.searchPlaces(placeName, this.currentRegionData?.name || '–ú–æ—Å–∫–≤–∞');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –∏–∑ 2GIS
     */
    async showMore2GISDetails(placeId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
            const detailsUrl = `https://catalog.api.2gis.com/3.0/items?id=${placeId}&key=${this.apiKey}&fields=items.schedule,items.photos,items.description,items.links,items.attributes,items.external_content,items.reviews,items.rubrics`;

            const response = await fetch(detailsUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.result && data.result.items && data.result.items.length > 0) {
                const details = data.result.items[0];
                this.showDetailedModal(details);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ 2GIS –∫–∞–∫ fallback
            this.open2GISPage(`id:${placeId}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –º–æ–¥–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     */
    showDetailedModal(details) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const modal = document.createElement('div');
        modal.className = 'detailed-modal';
        modal.innerHTML = `
            <div class="modal-overlay" onclick="this.parentElement.remove()"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h2>${details.name}</h2>
                    <button class="modal-close" onclick="this.closest('.detailed-modal').remove()">‚úï</button>
                </div>
                <div class="modal-body">
                    ${details.description ? `
                        <div class="detail-section">
                            <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                            <p>${details.description}</p>
                        </div>
                    ` : ''}

                    ${details.schedule ? `
                        <div class="detail-section">
                            <h3>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h3>
                            <div class="schedule-info">
                                ${this.formatSchedule(details.schedule)}
                            </div>
                        </div>
                    ` : ''}

                    ${details.photos && details.photos.length > 0 ? `
                        <div class="detail-section">
                            <h3>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h3>
                            <div class="photos-gallery">
                                ${details.photos.slice(0, 6).map(photo => `
                                    <img src="${photo.thumbnail_url || photo.url}" alt="–§–æ—Ç–æ ${details.name}" class="gallery-photo">
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    ${details.reviews && details.reviews.items && details.reviews.items.length > 0 ? `
                        <div class="detail-section">
                            <h3>–û—Ç–∑—ã–≤—ã (${details.reviews.general_review_count || 0})</h3>
                            <div class="detailed-reviews">
                                ${details.reviews.items.slice(0, 5).map(review => `
                                    <div class="detailed-review-item">
                                        <div class="review-header">
                                            <span class="review-author">${review.author?.name || '–ê–Ω–æ–Ω–∏–º'}</span>
                                            <span class="review-rating">${this.generateStars(review.rating || 5)}</span>
                                        </div>
                                        <div class="review-text">${review.text || '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!'}</div>
                                        <div class="review-date">${this.formatDate(review.date_created)}</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
                <div class="modal-footer">
                    <button class="popup-btn route-btn" onclick="this.closest('.detailed-modal').remove()">
                        ‚úÖ –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    formatSchedule(schedule) {
        if (!schedule) return '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω';

        if (typeof schedule === 'string') return schedule;

        if (schedule.Everyday) {
            return `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ: ${schedule.Everyday}`;
        }

        if (schedule.working_hours) {
            return schedule.working_hours.map(day =>
                `${day.day}: ${day.working_hours || '–í—ã—Ö–æ–¥–Ω–æ–π'}`
            ).join('<br>');
        }

        return '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω';
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    addMarkersToMap(places) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        this.clearMarkers();

        places.forEach((place, index) => {
            if (place.point) {
                const marker = this.createClickableMarker(place, index);
                this.markers.push(marker);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
     */
    createClickableMarker(place, index) {
        const coordinates = [place.point.lon, place.point.lat];

        const markerElement = document.createElement('div');
        markerElement.className = 'interactive-marker';
        markerElement.innerHTML = `
            <div class="marker-icon interactive-marker-icon">
                <span class="marker-number">${index + 1}</span>
            </div>
        `;

        const marker = new mapgl.Marker(this.mapInstance, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä
        markerElement.addEventListener('click', (e) => {
            e.stopPropagation();
            this.displayPlaceInSidebar(place);
            this.mapInstance.setCenter(coordinates);
        });

        return marker;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
     */
    getRegionPartners(regionData) {
        if (!regionData || !regionData.partners) {
            return [];
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        return regionData.partners
            .filter(partner => partner.coordinates && partner.coordinates.lat && partner.coordinates.lon)
            .map((partner, index) => ({
                id: `partner_${index}`,
                name: partner.name,
                type: partner.type,
                description: partner.description,
                emoji: partner.emoji,
                rating: partner.rating,
                specialOffer: partner.specialOffer,
                point: {
                    lat: partner.coordinates.lat,
                    lon: partner.coordinates.lon
                },
                isPartner: true // –§–ª–∞–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            }));
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    addPartnerMarkersToMap(partners) {
        partners.forEach((partner, index) => {
            if (partner.point) {
                const marker = this.createPartnerMarker(partner, index);
                this.markers.push(marker);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    createPartnerMarker(partner, index) {
        const coordinates = [partner.point.lon, partner.point.lat];

        const markerElement = document.createElement('div');
        markerElement.className = 'partner-marker';
        markerElement.innerHTML = `
            <div class="partner-marker-icon">
                <span class="partner-emoji">${partner.emoji || 'üè™'}</span>
            </div>
            <div class="partner-tooltip">${partner.name}</div>
        `;

        const marker = new mapgl.Marker(this.mapInstance, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        markerElement.addEventListener('click', (e) => {
            e.stopPropagation();
            this.displayPartnerInSidebar(partner);
            this.mapInstance.setCenter(coordinates);
        });

        return marker;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    displayPartnerInSidebar(partner) {
        const sidebarContent = document.getElementById('sidebarContent');

        sidebarContent.innerHTML = `
            <div class="place-detail partner-detail">
                <div class="place-header">
                    <h2 class="place-name">${partner.emoji || 'üè™'} ${partner.name}</h2>
                    <div class="place-type">${partner.type}</div>
                    <div class="place-badge partner-badge">–ü–∞—Ä—Ç–Ω–µ—Ä –ú–∞—Ç—Ä–µ—à–∫–∞</div>
                </div>

                <div class="partner-description">
                    ${partner.description}
                </div>

                ${partner.rating ? `
                    <div class="place-rating enhanced-rating">
                        <div class="rating-display">
                            <div class="rating-stars">${this.generateStars(parseFloat(partner.rating))}</div>
                            <span class="rating-value">${partner.rating}</span>
                        </div>
                        <div class="rating-bar">
                            <div class="rating-fill" style="width: ${(parseFloat(partner.rating) / 5) * 100}%"></div>
                        </div>
                    </div>
                ` : ''}

                ${partner.specialOffer ? `
                    <div class="special-offer">
                        <h4>üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h4>
                        <p>${partner.specialOffer}</p>
                    </div>
                ` : ''}

                <div class="place-actions">
                    <button class="action-btn route-btn" onclick="matryoshkaMap.openRoute(${partner.point.lat}, ${partner.point.lon})">
                        üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 2GIS
     */
    displayPlaceInSidebar(place) {
        const sidebarContent = document.getElementById('sidebarContent');
        const reviews = place.reviews || {};
        const rating = reviews.general_rating || 0;
        const reviewCount = reviews.general_review_count || 0;

        sidebarContent.innerHTML = `
            <div class="place-detail embedded-2gis-info">
                <div class="place-header">
                    <h2 class="place-name">${place.name}</h2>
                    <div class="place-type">${place.purpose_name || '–ú–µ—Å—Ç–æ'}</div>
                    <div class="place-badge">–î–∞–Ω–Ω—ã–µ 2GIS</div>
                </div>

                ${place.address ? `
                    <div class="place-address">
                        <span class="address-icon">üìç</span>
                        ${place.address.name || place.address}
                    </div>
                ` : ''}

                ${rating > 0 ? `
                    <div class="place-rating enhanced-rating">
                        <div class="rating-display">
                            <div class="rating-stars">${this.generateStars(rating)}</div>
                            <span class="rating-value">${rating.toFixed(1)}</span>
                            <span class="rating-count">(${reviewCount.toLocaleString()} –æ—Ç–∑—ã–≤–æ–≤)</span>
                        </div>
                        <div class="rating-bar">
                            <div class="rating-fill" style="width: ${(rating / 5) * 100}%"></div>
                        </div>
                    </div>
                ` : ''}

                <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç 2GIS —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–µ -->
                <div class="embedded-2gis-widget">
                    <div class="widget-header">
                        <h4>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ 2–ì–ò–°</h4>
                        <div class="widget-actions">
                            <button class="widget-btn" onclick="matryoshka2GIS.refreshPlaceInfo('${place.id || place.name}')">üîÑ</button>
                            <button class="widget-btn" onclick="matryoshka2GIS.toggleWidget()">üì±</button>
                        </div>
                    </div>
                    <div class="widget-content" id="embedded2gisContent">
                        ${this.createEmbedded2GISContent(place)}
                    </div>
                </div>

                ${place.schedule ? `
                    <div class="place-schedule enhanced-schedule">
                        <h4>üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h4>
                        <div class="schedule-info">${this.formatSchedule(place.schedule)}</div>
                    </div>
                ` : ''}

                ${place.contact_groups && place.contact_groups[0] ? `
                    <div class="place-contacts enhanced-contacts">
                        <h4>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                        ${place.contact_groups[0].contacts.map(contact => {
                            if (contact.type === 'phone') {
                                return `<div class="contact-item clickable-phone" onclick="window.open('tel:${contact.value}')">üìû ${contact.value}</div>`;
                            } else if (contact.type === 'website') {
                                return `<div class="contact-item"><a href="${contact.value}" target="_blank">üåê ${contact.value}</a></div>`;
                            }
                            return '';
                        }).join('')}
                    </div>
                ` : ''}

                ${reviews.items && reviews.items.length > 0 ? `
                    <div class="place-reviews enhanced-reviews">
                        <h4>üí¨ –û—Ç–∑—ã–≤—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${reviews.items.length})</h4>
                        <div class="reviews-list">
                            ${reviews.items.slice(0, 5).map((review, index) => `
                                <div class="review-item enhanced-review" style="animation-delay: ${index * 0.1}s">
                                    <div class="review-header">
                                        <div class="review-author">
                                            <div class="author-avatar">${(review.author?.name || '–ê').charAt(0).toUpperCase()}</div>
                                            <span class="author-name">${review.author?.name || '–ê–Ω–æ–Ω–∏–º'}</span>
                                        </div>
                                        <div class="review-rating">${this.generateStars(review.rating || 5)}</div>
                                    </div>
                                    <div class="review-text">${review.text || '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!'}</div>
                                    <div class="review-date">${this.formatDate(review.date_created)}</div>
                                </div>
                            `).join('')}
                        </div>
                        ${reviewCount > 5 ? `
                            <button class="load-more-reviews" onclick="matryoshka2GIS.loadMoreReviews('${place.id}')">
                                –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –æ—Ç–∑—ã–≤—ã (${reviewCount - 5})
                            </button>
                        ` : ''}
                    </div>
                ` : ''}

                <div class="place-actions enhanced-actions">
                    <button class="action-btn route-btn primary" onclick="matryoshka2GIS.buildRoute([${place.point.lon}, ${place.point.lat}])">
                        üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                    </button>
                    <button class="action-btn share-btn" onclick="matryoshka2GIS.sharePlace('${place.name}', [${place.point.lon}, ${place.point.lat}])">
                        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                    <button class="action-btn favorite-btn" onclick="matryoshka2GIS.toggleFavorite('${place.id}')">
                        ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                    </button>
                </div>

                <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–∏–Ω–∏-–∫–∞—Ä—Ç–∞ –º–µ—Å—Ç–∞ -->
                <div class="mini-map-container">
                    <h4>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <div class="mini-map" id="miniMap-${place.id}">
                        <iframe
                            src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${place.point.lat}%2C%22lon%22%3A${place.point.lon}%2C%22zoom%22%3A16%7D%2C%22opt%22%3A%7B%22city%22%3A%22%22%7D%2C%22org%22%3A%22${encodeURIComponent(place.name)}%22%7D"
                            width="100%"
                            height="120"
                            frameborder="0"
                            scrolling="no"
                            style="border-radius: 8px;">
                        </iframe>
                    </div>
                </div>
            </div>
        `;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setTimeout(() => {
            const placeDetail = sidebarContent.querySelector('.place-detail');
            if (placeDetail) {
                placeDetail.classList.add('animated-in');
            }
        }, 100);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 2GIS
     */
    createEmbedded2GISContent(place) {
        return `
            <div class="place-info-grid">
                <div class="info-item">
                    <div class="info-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</div>
                    <div class="info-value">${place.purpose_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                </div>

                ${place.rubrics && place.rubrics.length > 0 ? `
                    <div class="info-item">
                        <div class="info-label">–†—É–±—Ä–∏–∫–∏</div>
                        <div class="info-value rubrics-list">
                            ${place.rubrics.slice(0, 3).map(rubric =>
                                `<span class="rubric-tag">${rubric.name}</span>`
                            ).join('')}
                        </div>
                    </div>
                ` : ''}

                ${place.point ? `
                    <div class="info-item">
                        <div class="info-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</div>
                        <div class="info-value coordinates">
                            <span class="coord">${place.point.lat.toFixed(6)}</span>
                            <span class="coord">${place.point.lon.toFixed(6)}</span>
                        </div>
                    </div>
                ` : ''}
            </div>

            <div class="place-description">
                <h5>–û–ø–∏—Å–∞–Ω–∏–µ</h5>
                <p>${this.getPlaceDescription(place)}</p>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–∞
     */
    getPlaceDescription(place) {
        if (place.description) return place.description;

        const descriptions = {
            '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–æ—Å—Å–∏–∏. –í–∫–ª—é—á–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –í—Å–µ–º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –Æ–ù–ï–°–ö–û.',
            '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å': '–ì–ª–∞–≤–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ú–æ—Å–∫–≤—ã, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–∞—è –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ç–æ–ª–∏—Ü—ã –º–µ–∂–¥—É –ö—Ä–µ–º–ª—ë–º –∏ –ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥–æ–º.',
            '–•—Ä–∞–º –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ': '–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π —Ö—Ä–∞–º, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏. –ü–æ—Å—Ç—Ä–æ–µ–Ω –≤ 1555‚Äî1561 –≥–æ–¥–∞—Ö –ø–æ –ø—Ä–∏–∫–∞–∑—É –ò–≤–∞–Ω–∞ –ì—Ä–æ–∑–Ω–æ–≥–æ.',
            '–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è': '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π –≤ –ú–æ—Å–∫–≤–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –≤ 1856 –≥–æ–¥—É –∫—É–ø—Ü–æ–º –ü–∞–≤–ª–æ–º –¢—Ä–µ—Ç—å—è–∫–æ–≤—ã–º.',
            '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂': '–û–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∏ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º—É–∑–µ–µ–≤ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–∞.',
            '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å': '–ì–ª–∞–≤–Ω–∞—è –ø–ª–æ—â–∞–¥—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å, –≤–∫–ª—é—á—ë–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–æ–∫ –í—Å–µ–º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –Æ–ù–ï–°–ö–û.',
            '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å': '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞, –∑–∞–ª–æ–∂–µ–Ω–Ω–æ–µ –ü–µ—Ç—Ä–æ–º I –≤ 1703 –≥–æ–¥—É.',
            '–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö—Ä–µ–º–ª—å': '–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ö–∞–∑–∞–Ω–∏, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞.',
            '–ú–µ—á–µ—Ç—å –ö—É–ª-–®–∞—Ä–∏—Ñ': '–ì–ª–∞–≤–Ω–∞—è —Å–æ–±–æ—Ä–Ω–∞—è –º–µ—á–µ—Ç—å –†–µ—Å–ø—É–±–ª–∏–∫–∏ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω –∏ –ö–∞–∑–∞–Ω–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞–Ω—Å–∫–æ–≥–æ –∫—Ä–µ–º–ª—è.'
        };

        return descriptions[place.name] || `–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${place.purpose_name || '–º–µ—Å—Ç–∞'}". –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ—Ç–∑—ã–≤–∞—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π.`;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    displaySearchResults(results) {
        const sidebarContent = document.getElementById('sidebarContent');

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å–ø–∏–Ω–Ω–µ—Ä—ã
        console.log('üöÄ –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´, —É–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–∏–Ω–Ω–µ—Ä—ã!');

        sidebarContent.innerHTML = `
            <div class="search-results">
                <div class="results-header">
                    <h3>–ù–∞–π–¥–µ–Ω–æ: ${results.length} –º–µ—Å—Ç</h3>
                </div>
                <div class="results-list">
                    ${results.map((place, index) => `
                        <div class="result-item" onclick="matryoshka2GIS.selectPlace(${index})" data-place-index="${index}">
                            <div class="result-content">
                                <div class="result-name">${place.name}</div>
                                <div class="result-type">${place.purpose_name || '–ú–µ—Å—Ç–æ'}</div>
                                ${place.address ? `<div class="result-address">${place.address.name || place.address}</div>` : ''}
                                ${place.reviews?.general_rating ? `
                                    <div class="result-rating">
                                        <span class="rating-stars">${this.generateStars(place.reviews.general_rating)}</span>
                                        <span class="rating-value">${place.reviews.general_rating.toFixed(1)}</span>
                                    </div>
                                ` : ''}
                            </div>
                            <div class="result-number">${index + 1}</div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        this.searchResults = results;
    }

    /**
     * –í—ã–±–æ—Ä –º–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    selectPlace(index) {
        if (this.searchResults && this.searchResults[index]) {
            const place = this.searchResults[index];
            this.displayPlaceInSidebar(place);

            if (place.point) {
                this.mapInstance.setCenter([place.point.lon, place.point.lat]);
                this.mapInstance.setZoom(16);
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    showSidebarLoading(message) {
        console.log('‚ö†Ô∏è showSidebarLoading –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù:', message);
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –°–ü–ò–ù–ù–ï–†–´ - –û–ù–ò –ú–ï–®–ê–Æ–¢!
        return;

        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="sidebar-loading">
                <div class="loading-spinner"></div>
                <div class="loading-text">${message}</div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    showSidebarMessage(message) {
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="sidebar-message">
                <div class="message-icon">‚ÑπÔ∏è</div>
                <div class="message-text">${message}</div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    showSidebarError(message) {
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="sidebar-error">
                <div class="error-icon">‚ùå</div>
                <div class="error-text">${message}</div>
            </div>
        `;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
     */
    displayLocationInfo(coordinates, cityName) {
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="location-info enhanced-location">
                <div class="location-header">
                    <h3>üìç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤ ${cityName}</h3>
                    <div class="location-badge">–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ</div>
                </div>

                <div class="coordinates-display">
                    <div class="coord-group">
                        <label>–®–∏—Ä–æ—Ç–∞:</label>
                        <span class="coord-value">${coordinates.lat.toFixed(6)}</span>
                    </div>
                    <div class="coord-group">
                        <label>–î–æ–ª–≥–æ—Ç–∞:</label>
                        <span class="coord-value">${coordinates.lng.toFixed(6)}</span>
                    </div>
                </div>

                <!-- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –º–∏–Ω–∏-–∫–∞—Ä—Ç–∞ —Ç–æ—á–∫–∏ -->
                <div class="point-mini-map">
                    <h4>üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ–±–ª–∞—Å—Ç–∏</h4>
                    <iframe
                        src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${coordinates.lat}%2C%22lon%22%3A${coordinates.lng}%2C%22zoom%22%3A15%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(cityName)}%22%7D%7D"
                        width="100%"
                        height="150"
                        frameborder="0"
                        scrolling="no"
                        style="border-radius: 12px; border: 1px solid rgba(255, 204, 0, 0.2);">
                    </iframe>
                </div>

                <div class="location-actions enhanced-location-actions">
                    <button class="action-btn route-btn primary" onclick="matryoshka2GIS.buildRoute([${coordinates.lng}, ${coordinates.lat}])">
                        üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –∫ —Ç–æ—á–∫–µ
                    </button>
                    <button class="action-btn search-btn" onclick="matryoshka2GIS.searchNearLocation('${coordinates.lng},${coordinates.lat}')">
                        üîç –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º
                    </button>
                    <button class="action-btn copy-btn" onclick="matryoshka2GIS.copyCoordinates(${coordinates.lat}, ${coordinates.lng})">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>

                <div class="location-info-text">
                    <p>üí° –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.</p>
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
     */
    async searchNearLocation(coordinatesStr) {
        const [lng, lat] = coordinatesStr.split(',').map(Number);
        this.showSidebarLoading('–ü–æ–∏—Å–∫ –º–µ—Å—Ç —Ä—è–¥–æ–º...');

        try {
            const nearbyPlaces = await this.searchNearbyPlaces({ lng, lat }, this.activeRegion.name);
            if (nearbyPlaces.length > 0) {
                this.displaySearchResults(nearbyPlaces);
            } else {
                this.showSidebarMessage('–†—è–¥–æ–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        } catch (error) {
            this.showSidebarError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    async refreshPlaceInfo(placeId) {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ: ${placeId}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const content = document.getElementById('embedded2gisContent');
        if (content) {
            content.innerHTML = '<div class="loading-spinner"></div><div>–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...</div>';

            setTimeout(() => {
                content.innerHTML = '<div class="info-updated">‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</div>';
            }, 1000);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    toggleWidget() {
        const widget = document.querySelector('.embedded-2gis-widget');
        if (widget) {
            widget.classList.toggle('collapsed');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
     */
    async loadMoreReviews(placeId) {
        console.log(`üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è: ${placeId}`);

        const button = event.target;
        button.textContent = '–ó–∞–≥—Ä—É–∂–∞–µ–º...';
        button.disabled = true;

        setTimeout(() => {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            const reviewsList = button.closest('.place-reviews').querySelector('.reviews-list');
            reviewsList.innerHTML += `
                <div class="review-item enhanced-review" style="animation: fadeInUp 0.5s ease-out">
                    <div class="review-header">
                        <div class="review-author">
                            <div class="author-avatar">–ò</div>
                            <span class="author-name">–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</span>
                        </div>
                        <div class="review-rating">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
                    </div>
                    <div class="review-text">–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.</div>
                    <div class="review-date">15 —Å–µ–Ω—Ç. 2024</div>
                </div>
            `;
            button.remove();
        }, 1000);
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–º
     */
    sharePlace(placeName, coordinates) {
        if (navigator.share) {
            navigator.share({
                title: placeName,
                text: `–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –º–µ—Å—Ç–æ: ${placeName}`,
                url: `https://2gis.ru/geo/${coordinates[1]},${coordinates[0]}`
            });
        } else {
            // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
            const shareText = `${placeName} - https://2gis.ru/geo/${coordinates[1]},${coordinates[0]}`;
            navigator.clipboard.writeText(shareText).then(() => {
                alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
     */
    toggleFavorite(placeId) {
        const button = event.target;
        const isFavorite = button.classList.contains('favorited');

        if (isFavorite) {
            button.textContent = '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            button.classList.remove('favorited');
        } else {
            button.textContent = 'üíñ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
            button.classList.add('favorited');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        const favorites = JSON.parse(localStorage.getItem('matryoshka_favorites') || '[]');
        if (isFavorite) {
            const index = favorites.indexOf(placeId);
            if (index > -1) favorites.splice(index, 1);
        } else {
            if (!favorites.includes(placeId)) favorites.push(placeId);
        }
        localStorage.setItem('matryoshka_favorites', JSON.stringify(favorites));
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ 2GIS (—Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π)
     */
    search2GISInfo(attractionName) {
        // –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log(`üîç –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ: ${attractionName}`);

        const sidebarContent = document.getElementById('sidebarContent');
        if (sidebarContent) {
            sidebarContent.innerHTML = `
                <div class="embedded-search-result">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ 2–ì–ò–°: ${attractionName}</h3>
                    <iframe
                        src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22q%22%3A%22${encodeURIComponent(attractionName)}%22%7D"
                        width="100%"
                        height="400"
                        frameborder="0"
                        style="border-radius: 12px;">
                    </iframe>
                </div>
            `;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    generateStars(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        return '‚òÖ'.repeat(fullStars) +
               (hasHalfStar ? '‚òÜ' : '') +
               '‚òÜ'.repeat(emptyStars);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';

        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        } catch {
            return '–ù–µ–¥–∞–≤–Ω–æ';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    clearMarkers() {
        this.markers.forEach(marker => {
            if (marker && marker.destroy) {
                marker.destroy();
            }
        });
        this.markers = [];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     */
    createSimpleMapInterface(regionData, mapContainer) {
        const center = this.getRegionCenter(regionData.id);

        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
        const loader = mapContainer.querySelector('.map-loading');
        if (loader) loader.remove();

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç—É iframe
        mapContainer.innerHTML = `
            <iframe
                src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(regionData.name)}%22%7D%2C%22org%22%3A%22%22%7D"
                width="100%"
                height="100%"
                frameborder="0"
                scrolling="no"
                style="border: none; background: #1a1a2e;"
            ></iframe>
        `;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        setTimeout(async () => {
            await this.loadAndDisplayAttractions(regionData);
            console.log('üéØ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç–µ');
        }, 1000);

        console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è:', regionData.name);
    }

    /**
     * Fallback –∫ iframe –∫–∞—Ä—Ç–µ
     */
    createIframeMap(regionData) {
        const center = this.getRegionCenter(regionData.id);

        this.mapContainer.innerHTML = `
            <div class="map-iframe-container">
                <iframe
                    src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${regionData.name}%22%7D%2C%22org%22%3A%22%22%7D"
                    width="100%"
                    height="100%"
                    frameborder="0"
                    scrolling="no"
                    style="border-radius: 16px;"
                ></iframe>
            </div>
        `;

        console.log('‚úÖ Iframe –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è:', regionData.name);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é –∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ (–í–°–ï–ì–î–ê –†–ê–ë–û–¢–ê–ï–¢!)
     */
    createSimpleMapWithSidebar(regionData) {
        const center = this.getRegionCenter(regionData.id);

        console.log('üöÄ –°–û–ó–î–ê–ï–ú –ü–†–û–°–¢–£–Æ –ö–ê–†–¢–£ –° SIDEBAR –¥–ª—è:', regionData.name);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–∂–µ –±–µ–∑ MapGL
        this.mapContainer.innerHTML = `
            <div class="full-map-interface">
                <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ -->
                <div class="map-sidebar" id="mapSidebar">
                    <div class="sidebar-header">
                        <div class="region-title">${regionData.name}</div>
                        <div class="search-container">
                            <input type="text" class="map-search" id="mapSearch" placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...">
                            <button class="search-btn" onclick="matryoshka2GIS.performSearch()">üîç</button>
                        </div>
                    </div>

                    <div class="sidebar-content" id="sidebarContent">
                        <div class="loading-attractions">
                            <h3>‚ö° –ó–∞–≥—Ä—É–∂–∞–µ–º ${regionData.name}...</h3>
                            <div class="attractions-will-appear">–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—è–≤—è—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</div>
                        </div>
                    </div>
                </div>

                <!-- –î–í–û–ô–ù–ê–Ø –∫–∞—Ä—Ç–∞: iframe 2–ì–ò–° + –Ω–∞—à–∏ –º–∞—Ä–∫–µ—Ä—ã -->
                <div class="map-area" style="flex: 1; display: flex; flex-direction: column;">

                    <!-- –û—Å–Ω–æ–≤–Ω–∞—è iframe –∫–∞—Ä—Ç–∞ 2–ì–ò–° —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ -->
                    <div style="flex: 2; position: relative;">
                        <iframe
                            src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(regionData.name)}%22%2C%22zoom%22%3A${center.zoom}%2C%22org%22%3Atrue%7D%7D"
                            width="100%"
                            height="100%"
                            frameborder="0"
                            scrolling="no"
                            style="border: none; background: #1a1a2e;"
                        ></iframe>
                    </div>

                    <!-- –ü–∞–Ω–µ–ª—å —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π -->
                    <div id="attractionMarkers" style="flex: 1; background: rgba(26, 26, 46, 0.95); padding: 10px; border-radius: 12px; margin-top: 8px; max-height: 200px; overflow-y: auto;">
                        <div style="color: #ffcc00; font-weight: 600; margin-bottom: 8px;">üéØ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</div>
                        <div id="markersList" style="display: flex; flex-wrap: wrap; gap: 8px;">
                            <!-- –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã
        console.log('üéØ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –º–∞—Ä–∫–µ—Ä–æ–≤!');
        this.loadAndDisplayAttractions(regionData);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –ø–∞–Ω–µ–ª—å
        setTimeout(() => {
            this.addAttractionsToMarkersPanel(regionData);
        }, 500);

        console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å sidebar —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è:', regionData.name);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã (fallback)
     */
    createForceInteractiveMap(regionData) {
        const center = this.getRegionCenter(regionData.id);

        console.log('üîÑ –°–û–ó–î–ê–ï–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–£–Æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É:', regionData.name);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        this.mapContainer.innerHTML = `
            <div class="full-map-interface">
                <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å -->
                <div class="map-sidebar" id="mapSidebar">
                    <div class="sidebar-header">
                        <div class="region-title">${regionData.name}</div>
                        <div class="search-container">
                            <input type="text" class="map-search" id="mapSearch" placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...">
                            <button class="search-btn" onclick="matryoshka2GIS.performSearch()">üîç</button>
                        </div>
                    </div>
                    <div class="sidebar-content" id="sidebarContent">
                        <div class="ready-status">üéØ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!</div>
                    </div>
                </div>

                <!-- –ö–∞—Ä—Ç–∞ + –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã -->
                <div class="map-area" style="flex: 1; display: flex; flex-direction: column;">
                    <!-- 2–ì–ò–° –∫–∞—Ä—Ç–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ -->
                    <div style="flex: 1; position: relative;">
                        <iframe
                            src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(regionData.name)}%22%2C%22zoom%22%3A${center.zoom}%2C%22org%22%3Atrue%7D%7D"
                            width="100%"
                            height="100%"
                            frameborder="0"
                            scrolling="no"
                            style="border: none; background: #1a1a2e;"
                        ></iframe>

                        <!-- –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –Ω–∞–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª–∏–∫—É -->
                        <div onclick="matryoshka2GIS.showMapClickInfo(event, '${regionData.name}')"
                             style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 10; cursor: crosshair; background: transparent;">
                        </div>
                    </div>

                    <!-- –ü–∞–Ω–µ–ª—å —Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ -->
                    <div id="attractionMarkers" style="background: rgba(26, 26, 46, 0.95); padding: 10px; border-radius: 12px; margin-top: 8px; max-height: 200px; overflow-y: auto;">
                        <div style="color: #ffcc00; font-weight: 600; margin-bottom: 8px;">üéØ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π):</div>
                        <div id="markersList" style="display: flex; flex-wrap: wrap; gap: 8px;">
                            <!-- –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –±—É–¥—É—Ç –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –ù–ï–ú–ï–î–õ–ï–ù–ù–û –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.loadAndDisplayAttractions(regionData);
        this.addAttractionsToMarkersPanel(regionData);

        console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ (–¥–ª—è fallback —Ä–µ–∂–∏–º–∞)
     */
    showMapClickInfo(event, cityName) {
        event.stopPropagation();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–∫–µ
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="click-info">
                <h3>üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ</h3>
                <p>–í—ã –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–∞—Ä—Ç–µ ${cityName}</p>
                <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
                <ul>
                    <li>üéØ –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–∏–∂–µ</li>
                    <li>üîç –ü–æ–∏—Å–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏</li>
                    <li>üè¢ –ö–ª–∏–∫–∏ –ø–æ –∑–¥–∞–Ω–∏—è–º –Ω–∞ –∫–∞—Ä—Ç–µ 2–ì–ò–°</li>
                </ul>
                <button onclick="matryoshka2GIS.loadAndDisplayAttractions(matryoshka2GIS.activeRegion)"
                        style="background: #ffcc00; color: #1a1a2e; border: none; padding: 8px 16px; border-radius: 8px; margin-top: 12px; cursor: pointer;">
                    ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
                </button>
            </div>
        `;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –ø–∞–Ω–µ–ª—å –ø–æ–¥ –∫–∞—Ä—Ç–æ–π
     */
    addAttractionsToMarkersPanel(regionData) {
        const markersList = document.getElementById('markersList');
        if (!markersList) {
            console.log('‚ùå –ü–∞–Ω–µ–ª—å –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        console.log('üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ï –ú–ê–†–ö–ï–†–´ –≤ –ø–∞–Ω–µ–ª—å!');

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const attractions = this.getFallbackAttractions(regionData.name);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markersList.innerHTML = '';

        attractions.forEach((attraction, index) => {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É-–º–∞—Ä–∫–µ—Ä
            const markerButton = document.createElement('button');
            markerButton.className = 'attraction-marker-btn';
            markerButton.style.cssText = `
                background: linear-gradient(135deg, #ff1744, #ffcc00);
                color: #1a1a2e;
                border: none;
                border-radius: 20px;
                padding: 8px 12px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                animation: markerPulse 2s infinite;
                box-shadow: 0 4px 12px rgba(255, 23, 68, 0.4);
                font-size: 12px;
                display: flex;
                align-items: center;
                gap: 6px;
            `;

            markerButton.innerHTML = `
                <span style="
                    background: rgba(26, 26, 46, 0.8);
                    color: #ffcc00;
                    border-radius: 50%;
                    width: 20px;
                    height: 20px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 10px;
                    font-weight: 700;
                ">${index + 1}</span>
                <span>${attraction.name}</span>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
            markerButton.addEventListener('mouseenter', () => {
                markerButton.style.transform = 'scale(1.05)';
                markerButton.style.boxShadow = '0 6px 20px rgba(255, 23, 68, 0.6)';
            });

            markerButton.addEventListener('mouseleave', () => {
                markerButton.style.transform = 'scale(1)';
                markerButton.style.boxShadow = '0 4px 12px rgba(255, 23, 68, 0.4)';
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫
            markerButton.addEventListener('click', () => {
                console.log('üéØ –ö–õ–ò–ö –ø–æ –º–∞—Ä–∫–µ—Ä—É:', attraction.name);
                this.showAttractionDetailsInSidebar(attraction);
            });

            markersList.appendChild(markerButton);
        });

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${attractions.length} –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –ø–∞–Ω–µ–ª—å!`);
    }

    /**
     * –°–¢–ê–†–´–ô –º–µ—Ç–æ–¥ - —É–¥–∞–ª—è–µ–º
     */
    addCustomMarkersToIframe_OLD(regionData) {
        const markersContainer = document.getElementById('customMarkers');
        if (!markersContainer) {
            console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ï –ú–ê–†–ö–ï–†–´ –ø–æ–≤–µ—Ä—Ö iframe!');

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const attractions = this.getFallbackAttractions(regionData.name);
        const center = this.getRegionCenter(regionData.id);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        markersContainer.innerHTML = '';

        attractions.forEach((attraction, index) => {
            if (attraction.point) {
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—ã
                const markerPosition = this.calculateMarkerPosition(
                    attraction.point,
                    center.coordinates,
                    center.zoom
                );

                // –°–æ–∑–¥–∞–µ–º —è—Ä–∫–∏–π –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                const markerElement = document.createElement('div');
                markerElement.className = 'custom-iframe-marker bright-marker';
                markerElement.style.cssText = `
                    position: absolute;
                    left: ${markerPosition.x}%;
                    top: ${markerPosition.y}%;
                    transform: translate(-50%, -100%);
                    cursor: pointer;
                    pointer-events: all;
                    z-index: 1001;
                `;

                markerElement.innerHTML = `
                    <div class="marker-icon bright-marker-icon" style="
                        width: 40px;
                        height: 40px;
                        background: linear-gradient(135deg, #ff1744, #ffcc00, #ff8e53);
                        border-radius: 50% 50% 50% 0;
                        transform: rotate(-45deg);
                        border: 3px solid #fff;
                        box-shadow: 0 8px 32px rgba(255, 23, 68, 0.6), 0 0 40px rgba(255, 204, 0, 0.5);
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        animation: markerPulse 2s infinite;
                    ">
                        <span style="
                            color: #1a1a2e;
                            font-weight: 700;
                            font-size: 14px;
                            transform: rotate(45deg);
                        ">${index + 1}</span>
                    </div>
                    <div style="
                        position: absolute;
                        top: -35px;
                        left: 50%;
                        transform: translateX(-50%);
                        background: rgba(26, 26, 46, 0.95);
                        color: #fff;
                        padding: 4px 8px;
                        border-radius: 6px;
                        font-size: 12px;
                        white-space: nowrap;
                        opacity: 0;
                        transition: opacity 0.3s;
                        pointer-events: none;
                    " class="marker-tooltip">${attraction.name}</div>
                `;

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                markerElement.addEventListener('mouseenter', () => {
                    markerElement.querySelector('.marker-tooltip').style.opacity = '1';
                });

                markerElement.addEventListener('mouseleave', () => {
                    markerElement.querySelector('.marker-tooltip').style.opacity = '0';
                });

                markerElement.addEventListener('click', () => {
                    console.log('üéØ –ö–õ–ò–ö –ø–æ –º–∞—Ä–∫–µ—Ä—É:', attraction.name);
                    this.showAttractionDetailsInSidebar(attraction);
                });

                markersContainer.appendChild(markerElement);
            }
        });

        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${attractions.length} –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤!`);
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ iframe –∫–∞—Ä—Ç—ã
     */
    calculateMarkerPosition(point, centerCoords, zoom) {
        // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        const latDiff = point.lat - centerCoords[1];
        const lngDiff = point.lon - centerCoords[0];

        // –ë–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
        const centerX = 50; // 50% - —Ü–µ–Ω—Ç—Ä –ø–æ X
        const centerY = 50; // 50% - —Ü–µ–Ω—Ç—Ä –ø–æ Y

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑—É–º–∞
        const scale = Math.pow(2, zoom - 10); // –ë–∞–∑–æ–≤—ã–π –∑—É–º 10

        // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤)
        const x = centerX + (lngDiff * scale * 1000);
        const y = centerY - (latDiff * scale * 1000);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
        return {
            x: Math.max(5, Math.min(95, x)),
            y: Math.max(5, Math.min(95, y))
        };
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ sidebar
     */
    showAttractionDetailsInSidebar(attraction) {
        console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏:', attraction.name);

        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="attraction-details">
                <div class="details-header">
                    <h2 class="attraction-name">${attraction.name}</h2>
                    <div class="attraction-type">${attraction.purpose_name}</div>
                </div>

                <div class="attraction-info">
                    <div class="address-info">
                        <span class="info-icon">üìç</span>
                        <span>${attraction.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>

                    ${attraction.reviews ? `
                        <div class="rating-info">
                            <span class="rating-stars">${this.generateStars(attraction.reviews.general_rating)}</span>
                            <span class="rating-value">${attraction.reviews.general_rating.toFixed(1)}</span>
                            <span class="rating-count">(${attraction.reviews.general_review_count} –æ—Ç–∑—ã–≤–æ–≤)</span>
                        </div>
                    ` : ''}

                    <div class="description-info">
                        <p>${this.getAttractionDescription(attraction)}</p>
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="action-btn primary" onclick="matryoshka2GIS.open2GISPage('${attraction.name}', [${attraction.point.lon}, ${attraction.point.lat}])">
                        üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ 2–ì–ò–°
                    </button>
                    <button class="action-btn" onclick="matryoshka2GIS.buildRoute([${attraction.point.lon}, ${attraction.point.lat}])">
                        üß≠ –ú–∞—Ä—à—Ä—É—Ç
                    </button>
                    <button class="action-btn" onclick="matryoshka2GIS.sharePlace('${attraction.name}', [${attraction.point.lon}, ${attraction.point.lat}])">
                        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                </div>

                <div class="back-to-list">
                    <button onclick="matryoshka2GIS.loadAndDisplayAttractions(matryoshka2GIS.activeRegion)" class="back-btn">
                        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ API
     */
    fallbackToIframe() {
        this.isMapLoaded = false;
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ iframe –∫–∞—Ä—Ç—ã');
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        this.clearMarkers();
        this.closePopup();

        if (this.mapInstance && this.mapInstance.destroy) {
            this.mapInstance.destroy();
        }

        this.mapInstance = null;
        this.activeRegion = null;
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    copyCoordinates(lat, lng) {
        const coordString = `${lat}, ${lng}`;

        if (navigator.clipboard) {
            navigator.clipboard.writeText(coordString).then(() => {
                this.showNotification('üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: ' + coordString);
            }).catch((err) => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                this.fallbackCopyToClipboard(coordString);
            });
        } else {
            this.fallbackCopyToClipboard(coordString);
        }
    }

    /**
     * Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
     */
    fallbackCopyToClipboard(text) {
        const textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.position = "fixed";
        textArea.style.left = "-999999px";
        textArea.style.top = "-999999px";
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        try {
            document.execCommand('copy');
            this.showNotification('üìã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: ' + text);
        } catch (err) {
            console.error('Fallback: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', err);
            this.showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        }

        document.body.removeChild(textArea);
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    showNotification(message) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'copy-notification';
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            font-size: 14px;
            animation: slideInRight 0.3s ease-out;
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!document.getElementById('copy-notification-styles')) {
            const style = document.createElement('style');
            style.id = 'copy-notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
                @keyframes slideOutRight {
                    from {
                        transform: translateX(0);
                        opacity: 1;
                    }
                    to {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
     */
    showRouteInfo(coordinates) {
        const sidebarContent = document.getElementById('sidebarContent');
        if (!sidebarContent) return;

        sidebarContent.innerHTML = `
            <div class="route-info">
                <div class="route-header">
                    <h3>üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ</h3>
                </div>
                <div class="route-details">
                    <div class="coordinate-info">
                        <h4>üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</h4>
                        <div class="coordinates">
                            <div class="coord-item">
                                <span class="coord-label">–®–∏—Ä–æ—Ç–∞:</span>
                                <span class="coord-value">${coordinates[1].toFixed(6)}</span>
                            </div>
                            <div class="coord-item">
                                <span class="coord-label">–î–æ–ª–≥–æ—Ç–∞:</span>
                                <span class="coord-value">${coordinates[0].toFixed(6)}</span>
                            </div>
                        </div>
                    </div>

                    <div class="route-actions">
                        <button class="action-btn copy-btn" onclick="matryoshka2GIS.copyCoordinates(${coordinates[1]}, ${coordinates[0]})">
                            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        </button>
                        <button class="action-btn center-btn" onclick="matryoshka2GIS.mapInstance?.setCenter([${coordinates[0]}, ${coordinates[1]}]); matryoshka2GIS.mapInstance?.setZoom(18);">
                            üéØ –£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±
                        </button>
                    </div>

                    <div class="route-tip">
                        <div class="tip-icon">üí°</div>
                        <div class="tip-text">
                            –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ.
                            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç.
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.matryoshka2GIS = new Matryoshka2GISMaps();

console.log('üó∫Ô∏è –ú–æ–¥—É–ª—å –∫–∞—Ä—Ç –ú–∞—Ç—Ä–µ—à–∫–∞ 2GIS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');