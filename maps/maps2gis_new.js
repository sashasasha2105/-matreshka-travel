/**
 * üó∫Ô∏è –ù–û–í–´–ô –º–æ–¥—É–ª—å –∫–∞—Ä—Ç 2GIS - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 2GIS MapGL API
 */

class Matryoshka2GISMaps {
    constructor() {
        this.apiKey = '8a7c9b28-b45f-4f45-9784-d34db72416db';
        this.mapInstance = null;
        this.markers = [];
        this.currentPopup = null;
        this.currentRegionData = null;

        // API endpoints —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        this.placesApiUrl = 'https://catalog.api.2gis.com/3.0/items';
        this.searchApiUrl = 'https://catalog.api.2gis.com/3.0/items';

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è 2GIS Maps...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
        if (typeof mapgl !== 'undefined' && mapgl.isSupported()) {
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MapGL API');
        } else {
            console.warn('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ MapGL');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º MapGL API –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        await this.loadMapGLAPI();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ MapGL API
     */
    async loadMapGLAPI() {
        return new Promise((resolve, reject) => {
            if (typeof mapgl !== 'undefined') {
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://mapgl.2gis.com/api/js/v1';
            script.onload = () => {
                console.log('‚úÖ MapGL API –∑–∞–≥—Ä—É–∂–µ–Ω');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MapGL API');
                reject(new Error('Failed to load MapGL API'));
            };
            document.head.appendChild(script);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
     */
    async createMap(regionData, containerId) {
        console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞:', regionData.name);

        this.currentRegionData = regionData;
        const container = document.getElementById(containerId);

        if (!container) {
            throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.innerHTML = '';

        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞
        const center = this.getRegionCenter(regionData.id);

        try {
            // –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            this.createMapStructure(container, regionData);

            // –ü–æ–ª—É—á–∞–µ–º div –¥–ª—è –∫–∞—Ä—Ç—ã
            const mapDiv = document.getElementById('map2gisCanvas');
            if (!mapDiv) {
                throw new Error('Map canvas div –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ó–ê–¢–ï–ú —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º div
            this.mapInstance = new mapgl.Map(mapDiv, {
                center: [center.coordinates[0], center.coordinates[1]],
                zoom: center.zoom,
                key: this.apiKey,
                style: 'c080bb6a-8134-4993-93a1-5b4d8c36a59b', // –°—Ç–∏–ª—å –∫–∞—Ä—Ç—ã 2GIS
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
            await this.waitForMapReady();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventHandlers();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await this.loadRegionAttractions(regionData);

            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–ª–∏–∫–∞
            await this.loadPopularPlaces(regionData.name);

            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
            this.createFallbackInterface(container, regionData);
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
     */
    waitForMapReady() {
        return new Promise((resolve) => {
            if (this.mapInstance) {
                this.mapInstance.on('ready', () => {
                    console.log('üéØ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                    resolve();
                });
            } else {
                resolve();
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ä—Ç—ã (–î–û —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–π –∫–∞—Ä—Ç—ã)
     */
    createMapStructure(container, regionData) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å flex-—Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
        container.style.display = 'flex';
        container.style.height = '500px';
        container.style.position = 'relative';

        // –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        const sidebar = document.createElement('div');
        sidebar.className = 'map-sidebar';
        sidebar.id = 'mapSidebar';
        sidebar.innerHTML = `
            <div class="sidebar-header">
                <h2 class="region-title">${regionData.name}</h2>
            </div>
            <div class="sidebar-content" id="sidebarContent">
                <div class="welcome-message" style="padding: 20px; text-align: center; color: rgba(255,255,255,0.6);">
                    <p style="font-size: 0.95rem;">–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</p>
                </div>
            </div>
        `;

        // –°–æ–∑–¥–∞–µ–º div –¥–ª—è –∫–∞—Ä—Ç—ã
        const mapDiv = document.createElement('div');
        mapDiv.id = 'map2gisCanvas';
        mapDiv.style.flex = '1';
        mapDiv.style.position = 'relative';
        mapDiv.style.minHeight = '500px';
        mapDiv.style.zIndex = '1'; // –í–∞–∂–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(sidebar);
        container.appendChild(mapDiv);

        console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–∞');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventHandlers() {
        // –ü–æ–∏—Å–∫ —É–¥–∞–ª–µ–Ω
        console.log('‚úÖ Event handlers setup completed');


        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
        if (this.mapInstance) {
            this.mapInstance.on('click', (event) => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ detected:', event);
                this.handleMapClick(event);
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            this.mapInstance.on('ready', () => {
                console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é');
            });

            this.mapInstance.on('idle', () => {
                console.log('üîÑ –ö–∞—Ä—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è - –≥–æ—Ç–æ–≤–∞ –∫ –∫–ª–∏–∫–∞–º');
            });
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–µ—Å—Ç
     */
    async performSearch() {
        const searchInput = document.getElementById('placeSearch');
        const query = searchInput?.value?.trim();

        if (!query) {
            this.showMessage('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
            return;
        }

        console.log('üîç –ü–æ–∏—Å–∫:', query);
        this.showLoading('–ü–æ–∏—Å–∫ –º–µ—Å—Ç...');

        try {
            const results = await this.searchPlaces(query);
            this.displaySearchResults(results);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
     */
    async searchPlaces(query) {
        const center = this.mapInstance.getCenter();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Places API
        const params = new URLSearchParams({
            q: query,
            key: this.apiKey,
            point: `${center[0]},${center[1]}`,
            radius: 10000, // 10 –∫–º —Ä–∞–¥–∏—É—Å
            page_size: 20,
            fields: 'items.point,items.name,items.purpose_name,items.address,items.contact_groups,items.schedule,items.reviews,items.photos'
        });

        const url = `${this.searchApiUrl}?${params}`;
        console.log('üì° API –∑–∞–ø—Ä–æ—Å:', url);

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üì¶ –û—Ç–≤–µ—Ç API:', data);

        return data.result?.items || [];
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    displaySearchResults(results) {
        const sidebarContent = document.getElementById('sidebarContent');

        if (results.length === 0) {
            sidebarContent.innerHTML = `
                <div class="no-results">
                    <h3>üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
                </div>
            `;
            return;
        }

        console.log(`üìç –î–æ–±–∞–≤–ª—è–µ–º ${results.length} –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É`);

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        this.clearMarkers();

        const resultsHtml = results.map((place, index) => {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if (place.point) {
                console.log(`‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è: ${place.name}`, place.point);
                this.addPlaceMarker(place, index);
            } else {
                console.warn(`‚ö†Ô∏è –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: ${place.name}`);
            }

            const rating = place.reviews?.general_rating || 0;
            const reviewCount = place.reviews?.general_review_count || 0;

            return `
                <div class="search-result-item" onclick="window.matryoshka2GIS.showPlaceDetails('${place.id}', ${index})">
                    <div class="result-header">
                        <span class="result-number">${index + 1}</span>
                        <div class="result-info">
                            <h4 class="result-name">${place.name}</h4>
                            <p class="result-type">${place.purpose_name || '–ó–∞–≤–µ–¥–µ–Ω–∏–µ'}</p>
                        </div>
                    </div>
                    <div class="result-details">
                        <p class="result-address">üìç ${place.address_name || place.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                        ${rating > 0 ? `
                            <div class="result-rating">
                                <span class="stars">${this.generateStars(rating)}</span>
                                <span class="rating-text">${rating.toFixed(1)} (${reviewCount} –æ—Ç–∑—ã–≤–æ–≤)</span>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }).join('');

        sidebarContent.innerHTML = `
            <div class="search-results">
                <div class="results-header">
                    <h3>üéØ –ù–∞–π–¥–µ–Ω–æ: ${results.length}</h3>
                    <button onclick="window.matryoshka2GIS.clearSearch()" class="clear-btn">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
                <div class="results-list">
                    ${resultsHtml}
                </div>
            </div>
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.currentSearchResults = results;

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ${this.markers.length}`);
        console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä (–∫—Ä—É–∂–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º) –Ω–∞ –∫–∞—Ä—Ç–µ`);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É
     */
    addPlaceMarker(place, index) {
        if (!place.point || !this.mapInstance) return;

        const coordinates = [place.point.lon, place.point.lat];

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞
        const markerElement = document.createElement('div');
        markerElement.className = 'custom-marker';
        markerElement.innerHTML = `
            <div class="marker-pin">
                <span class="marker-number">${index + 1}</span>
            </div>
        `;

        // –í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –î–û —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
        markerElement.style.pointerEvents = 'auto';
        markerElement.style.cursor = 'pointer';
        markerElement.style.position = 'absolute';
        markerElement.style.zIndex = '1000';
        markerElement.style.touchAction = 'auto';

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const marker = new mapgl.Marker(this.mapInstance, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
        markerElement.dataset.placeId = place.id;
        markerElement.dataset.placeIndex = index;
        markerElement.dataset.placeName = place.name;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const clickHandler = (e) => {
            console.log('üéØ –ö–õ–ò–ö –ü–û –ú–ê–†–ö–ï–†–£!', {place: place.name, index, id: place.id});
            e.stopPropagation();
            e.preventDefault();
            this.showPlaceDetails(place.id, index);
        };

        markerElement.addEventListener('click', clickHandler, true);
        markerElement.addEventListener('touchend', clickHandler, true);

        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const markerPin = markerElement.querySelector('.marker-pin');
        if (markerPin) {
            markerPin.addEventListener('click', clickHandler, true);
            markerPin.addEventListener('touchend', clickHandler, true);
            markerPin.style.pointerEvents = 'auto';
            markerPin.style.cursor = 'pointer';
        }

        const markerNumber = markerElement.querySelector('.marker-number');
        if (markerNumber) {
            markerNumber.addEventListener('click', clickHandler, true);
            markerNumber.addEventListener('touchend', clickHandler, true);
            markerNumber.style.pointerEvents = 'auto';
            markerNumber.style.cursor = 'pointer';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        markerElement.addEventListener('mouseenter', () => {
            markerElement.style.transform = 'scale(1.15)';
            markerElement.style.zIndex = '10000';
            console.log('üîç Hover –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ:', place.name);
        });

        markerElement.addEventListener('mouseleave', () => {
            markerElement.style.transform = 'scale(1)';
            markerElement.style.zIndex = '1000';
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏
        marker.placeData = place;
        marker.placeIndex = index;

        this.markers.push(marker);
        return marker;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    async showPlaceDetails(placeId, index) {
        console.log('üéØ showPlaceDetails –≤—ã–∑–≤–∞–Ω–∞!', {placeId, index});

        const sidebarContent = document.getElementById('sidebarContent');
        if (!sidebarContent) {
            console.error('‚ùå sidebarContent –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        try {
            console.log('‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏...');

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–û–õ–ù–£–Æ –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            if (window.orgCard) {
                console.log('‚úÖ –ú–æ–¥—É–ª—å orgCard –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É...');
                await window.orgCard.showFullCard(placeId, sidebarContent);
            } else {
                console.warn('‚ö†Ô∏è –ú–æ–¥—É–ª—å orgCard –ù–ï –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                this.showLoading('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
                const placeData = await this.getPlaceDetails(placeId);
                this.displayPlaceDetails(placeData, index);
            }

            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ
            const placeData = await this.getPlaceDetails(placeId);
            if (placeData.point && this.mapInstance) {
                this.mapInstance.setCenter([placeData.point.lon, placeData.point.lat]);
                this.mapInstance.setZoom(16);
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ' + error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    async getPlaceDetails(placeId) {
        const params = new URLSearchParams({
            id: placeId,
            key: this.apiKey,
            fields: 'items.name,items.purpose_name,items.address,items.point,items.contact_groups,items.schedule,items.reviews,items.photos,items.description'
        });

        const url = `${this.placesApiUrl}?${params}`;
        console.log('üì° –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π:', url);

        const response = await fetch(url);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }

        const data = await response.json();
        return data.result?.items?.[0] || null;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    displayPlaceDetails(place, index) {
        if (!place) {
            this.showMessage('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const sidebarContent = document.getElementById('sidebarContent');
        const rating = place.reviews?.general_rating || 0;
        const reviewCount = place.reviews?.general_review_count || 0;

        sidebarContent.innerHTML = `
            <div class="place-details">
                <div class="details-header">
                    <button onclick="matryoshka2GIS.goBackToResults()" class="back-btn">‚Üê –ù–∞–∑–∞–¥</button>
                    <span class="place-number">#${index + 1}</span>
                </div>

                <div class="place-info">
                    <h2 class="place-name">${place.name}</h2>
                    <p class="place-type">${place.purpose_name || '–ó–∞–≤–µ–¥–µ–Ω–∏–µ'}</p>
                    <p class="place-address">üìç ${place.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>

                    ${rating > 0 ? `
                        <div class="place-rating">
                            <div class="rating-display">
                                <span class="stars">${this.generateStars(rating)}</span>
                                <span class="rating-value">${rating.toFixed(1)}</span>
                                <span class="rating-count">(${reviewCount} –æ—Ç–∑—ã–≤–æ–≤)</span>
                            </div>
                        </div>
                    ` : ''}
                </div>

                ${place.description ? `
                    <div class="place-description">
                        <h4>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                        <p>${place.description}</p>
                    </div>
                ` : ''}

                ${this.renderContactInfo(place.contact_groups)}
                ${this.renderSchedule(place.schedule)}
                ${this.renderPhotos(place.photos)}
                ${this.renderReviews(place.reviews)}

                <div class="place-actions">
                    <button onclick="matryoshka2GIS.copyCoordinates(${place.point?.lat}, ${place.point?.lon})" class="action-btn">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    renderContactInfo(contactGroups) {
        if (!contactGroups || contactGroups.length === 0) return '';

        const contacts = contactGroups.flatMap(group => group.contacts || []);
        if (contacts.length === 0) return '';

        const contactsHtml = contacts.map(contact => {
            switch (contact.type) {
                case 'phone':
                    return `<div class="contact-item">üìû ${contact.value}</div>`;
                case 'website':
                    return `<div class="contact-item">üåê ${contact.value}</div>`;
                case 'email':
                    return `<div class="contact-item">üìß ${contact.value}</div>`;
                default:
                    return `<div class="contact-item">${contact.value}</div>`;
            }
        }).join('');

        return `
            <div class="place-contacts">
                <h4>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                ${contactsHtml}
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    renderSchedule(schedule) {
        if (!schedule || !schedule.working_hours) return '';

        return `
            <div class="place-schedule">
                <h4>üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h4>
                <div class="schedule-info">
                    ${schedule.working_hours.map(hours => `
                        <div class="schedule-day">
                            <span class="day">${hours.day_name}</span>
                            <span class="time">${hours.working_time_periods?.map(p => `${p.time_from}-${p.time_to}`).join(', ') || '–ó–∞–∫—Ä—ã—Ç–æ'}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    renderPhotos(photos) {
        if (!photos || photos.length === 0) return '';

        return `
            <div class="place-photos">
                <h4>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h4>
                <div class="photos-grid">
                    ${photos.slice(0, 6).map(photo => `
                        <img src="${photo.thumbnail_url || photo.url}" alt="–§–æ—Ç–æ" class="place-photo">
                    `).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –æ—Ç–∑—ã–≤–æ–≤
     */
    renderReviews(reviews) {
        if (!reviews || !reviews.items || reviews.items.length === 0) return '';

        return `
            <div class="place-reviews">
                <h4>üí¨ –û—Ç–∑—ã–≤—ã</h4>
                <div class="reviews-list">
                    ${reviews.items.slice(0, 3).map(review => `
                        <div class="review-item">
                            <div class="review-header">
                                <span class="review-author">${review.author?.name || '–ê–Ω–æ–Ω–∏–º'}</span>
                                <span class="review-rating">${this.generateStars(review.rating || 5)}</span>
                            </div>
                            <p class="review-text">${review.text || '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!'}</p>
                            <span class="review-date">${this.formatDate(review.date_created)}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ä–µ–≥–∏–æ–Ω–∞
     */
    async loadRegionAttractions(regionData) {
        console.log('üèõÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è:', regionData.name);

        if (!regionData.attractions) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        regionData.attractions.forEach((attraction, index) => {
            this.addAttractionMarker(attraction, index);
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async addAttractionMarker(attraction, index) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
            const coordinates = await this.findAttractionCoordinates(attraction.name, this.currentRegionData.name);

            if (coordinates) {
                const markerElement = document.createElement('div');
                markerElement.className = 'attraction-marker';
                markerElement.innerHTML = `
                    <div class="marker-pin attraction-pin">
                        <span class="marker-icon">üèõÔ∏è</span>
                    </div>
                `;

                const marker = new mapgl.Marker(this.mapInstance, {
                    coordinates: coordinates,
                    element: markerElement,
                });

                markerElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.showAttractionInfo(attraction, coordinates);
                });

                this.markers.push(marker);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è:', attraction.name);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    async findAttractionCoordinates(name, city) {
        try {
            const results = await this.searchPlaces(`${name} ${city}`);
            if (results.length > 0 && results[0].point) {
                return [results[0].point.lon, results[0].point.lat];
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', error);
        }
        return null;
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    showAttractionInfo(attraction, coordinates) {
        const sidebarContent = document.getElementById('sidebarContent');

        sidebarContent.innerHTML = `
            <div class="attraction-info">
                <h2 class="attraction-name">üèõÔ∏è ${attraction.name}</h2>
                <p class="attraction-description">${attraction.info}</p>

                <div class="attraction-actions">
                    <button onclick="matryoshka2GIS.centerOnCoordinates(${coordinates[0]}, ${coordinates[1]})" class="action-btn">
                        üéØ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                    </button>
                    <button onclick="matryoshka2GIS.searchNearPlace('${attraction.name}')" class="action-btn">
                        üîç –ù–∞–π—Ç–∏ –≤ 2–ì–ò–°
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∫–ª–∏–∫–∞
     */
    async loadPopularPlaces(cityName) {
        console.log('üè¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è:', cityName);

        const popularQueries = {
            '–ú–æ—Å–∫–≤–∞': ['–∫—Ä–µ–º–ª—å', '–∫—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', '—Ç—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è', '–±–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä', '–ø–∞—Ä–∫ –≥–æ—Ä—å–∫–æ–≥–æ'],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': ['—ç—Ä–º–∏—Ç–∞–∂', '–¥–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å', '–∏—Å–∞–∞–∫–∏–µ–≤—Å–∫–∏–π —Å–æ–±–æ—Ä', '–Ω–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç'],
            '–ö–∞–∑–∞–Ω—å': ['–∫–∞–∑–∞–Ω—Å–∫–∏–π –∫—Ä–µ–º–ª—å', '–º–µ—á–µ—Ç—å –∫—É–ª —à–∞—Ä–∏—Ñ', '—É–ª–∏—Ü–∞ –±–∞—É–º–∞–Ω–∞', '–¥–≤–æ—Ä–µ—Ü –∑–µ–º–ª–µ–¥–µ–ª—å—Ü–µ–≤'],
            '–°–æ—á–∏': ['–æ–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø–∞—Ä–∫', '—Ä–æ–∑–∞ —Ö—É—Ç–æ—Ä', '–¥–µ–Ω–¥—Ä–∞—Ä–∏–π', '–º–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª'],
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': ['—Ö—Ä–∞–º –Ω–∞ –∫—Ä–æ–≤–∏', '–ø–ª–æ—Ç–∏–Ω–∫–∞', '–µ–ª—å—Ü–∏–Ω —Ü–µ–Ω—Ç—Ä', '–ø–ª–æ—â–∞–¥—å 1905 –≥–æ–¥–∞']
        };

        const queries = popularQueries[cityName] || ['–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–º—É–∑–µ–∏', '–ø–∞—Ä–∫–∏'];

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
            const results = await this.searchPlaces(queries[0]);

            if (results.length > 0) {
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${results.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∫–ª–∏–∫–∞`);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ sidebar
                this.displaySearchResults(results);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                setTimeout(() => {
                    this.showToast(`üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${results.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç! –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º.`);
                }, 1000);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞:', error);
        }
    }

    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
     */
    centerOnCoordinates(lon, lat) {
        if (this.mapInstance) {
            this.mapInstance.setCenter([lon, lat]);
            this.mapInstance.setZoom(16);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –≤ 2–ì–ò–°
     */
    async searchNearPlace(name) {
        const searchInput = document.getElementById('placeSearch');
        if (searchInput) {
            searchInput.value = name;
            this.performSearch();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
     */
    async handleMapClick(event) {
        const coordinates = event.lngLat;
        console.log('üó∫Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', coordinates);

        // –û–¢–ö–õ–Æ–ß–ï–ù–û - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
        // this.showLocationInfo(coordinates);
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏
     */
    showLocationInfo(coordinates) {
        const sidebarContent = document.getElementById('sidebarContent');

        sidebarContent.innerHTML = `
            <div class="location-info">
                <h3>üìç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞</h3>
                <div class="coordinates">
                    <p><strong>–®–∏—Ä–æ—Ç–∞:</strong> ${coordinates[1].toFixed(6)}</p>
                    <p><strong>–î–æ–ª–≥–æ—Ç–∞:</strong> ${coordinates[0].toFixed(6)}</p>
                </div>

                <div class="location-actions">
                    <button onclick="matryoshka2GIS.copyCoordinates(${coordinates[1]}, ${coordinates[0]})" class="action-btn">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    </button>
                    <button onclick="matryoshka2GIS.searchNearbyFromPoint(${coordinates[0]}, ${coordinates[1]})" class="action-btn">
                        üîç –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π
     */
    async searchNearbyFromPoint(lon, lat) {
        const searchInput = document.getElementById('placeSearch');
        if (searchInput) {
            searchInput.value = '–∫–∞—Ñ–µ';

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã
            this.mapInstance.setCenter([lon, lat]);

            this.performSearch();
        }
    }

    // =============== –£–¢–ò–õ–ò–¢–´ ===============

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    generateStars(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        return '‚òÖ'.repeat(fullStars) +
               (hasHalfStar ? '‚òÜ' : '') +
               '‚òÜ'.repeat(emptyStars);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        } catch {
            return '–ù–µ–¥–∞–≤–Ω–æ';
        }
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    copyCoordinates(lat, lon) {
        const text = `${lat}, ${lon}`;
        navigator.clipboard.writeText(text).then(() => {
            this.showToast('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!');
        }).catch(() => {
            prompt('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', text);
        });
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast-notification';
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;

        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }

    /**
     * –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(message) {
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>${message}</p>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showMessage(message) {
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="message-state">
                <p>${message}</p>
            </div>
        `;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
     */
    goBackToResults() {
        if (this.currentSearchResults) {
            this.displaySearchResults(this.currentSearchResults);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
     */
    clearSearch() {
        this.clearMarkers();
        const sidebarContent = document.getElementById('sidebarContent');
        sidebarContent.innerHTML = `
            <div class="welcome-message">
                <h3>üéØ –ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω</h3>
                <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞</p>
            </div>
        `;

        const searchInput = document.getElementById('placeSearch');
        if (searchInput) {
            searchInput.value = '';
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    clearMarkers() {
        this.markers.forEach(marker => {
            if (marker && marker.destroy) {
                marker.destroy();
            }
        });
        this.markers = [];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
     */
    getRegionCenter(regionId) {
        const centers = {
            'moscow': { coordinates: [37.6173, 55.7558], zoom: 11 },
            'spb': { coordinates: [30.3351, 59.9311], zoom: 11 },
            'kazan': { coordinates: [49.1221, 55.7887], zoom: 12 },
            'sochi': { coordinates: [39.7303, 43.6028], zoom: 12 },
            'ekaterinburg': { coordinates: [60.6122, 56.8431], zoom: 12 },
            'volgograd': { coordinates: [44.5133, 48.7194], zoom: 12 },
            'irkutsk': { coordinates: [104.2964, 52.2869], zoom: 12 },
            'kaliningrad': { coordinates: [20.4522, 54.7104], zoom: 12 },
            'nizhnynovgorod': { coordinates: [44.0075, 56.2965], zoom: 12 },
            'chelyabinsk': { coordinates: [61.4291, 55.1644], zoom: 12 },
            'karachaevo': { coordinates: [42.7189, 43.8489], zoom: 11 },
            'stavropol': { coordinates: [41.9734, 45.0428], zoom: 12 },
            'yaroslavl': { coordinates: [39.8739, 57.6261], zoom: 12 },
            'kostroma': { coordinates: [40.9268, 57.7675], zoom: 12 },
            'kabardino': { coordinates: [43.6178, 43.4806], zoom: 11 }
        };

        return centers[regionId] || centers['moscow'];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    createFallbackInterface(container, regionData) {
        const center = this.getRegionCenter(regionData.id);

        container.innerHTML = `
            <div style="display: flex; height: 500px;">
                <div class="map-sidebar" id="mapSidebar">
                    <div class="sidebar-header">
                        <h2>${regionData.name}</h2>
                        <p>‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º</p>
                    </div>
                    <div class="sidebar-content" id="sidebarContent">
                        <div class="fallback-message">
                            <h3>üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h3>
                            <p>–ö–∞—Ä—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</p>
                        </div>
                    </div>
                </div>
                <div style="flex: 1;">
                    <iframe
                        src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(regionData.name)}%22%7D%7D"
                        width="100%"
                        height="100%"
                        frameborder="0"
                        style="border-radius: 0 16px 16px 0;"
                    ></iframe>
                </div>
            </div>
        `;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        this.clearMarkers();

        if (this.currentPopup) {
            this.currentPopup.destroy();
            this.currentPopup = null;
        }

        if (this.mapInstance) {
            this.mapInstance.destroy();
            this.mapInstance = null;
        }

        console.log('üóëÔ∏è –ö–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.matryoshka2GIS = new Matryoshka2GISMaps();

console.log('üó∫Ô∏è –ù–û–í–´–ô –º–æ–¥—É–ª—å –∫–∞—Ä—Ç –ú–∞—Ç—Ä–µ—à–∫–∞ 2GIS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');