/**
 * üó∫Ô∏è –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø 2GIS –∫–∞—Ä—Ç
 * –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞ - –º–∞–∫—Å–∏–º—É–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
 */

class Matryoshka2GISMaps {
    constructor() {
        this.apiKey = '8a7c9b28-b45f-4f45-9784-d34db72416db';
        this.mapInstance = null;
        this.markers = [];
        this.searchApiUrl = 'https://catalog.api.2gis.com/3.0/items';
        console.log('üó∫Ô∏è –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è 2GIS –∫–∞—Ä—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
     */
    async createMap(regionData, containerId) {
        console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ü–†–û–°–¢–û–ô –∫–∞—Ä—Ç—ã –¥–ª—è:', regionData.name);

        const mainContainer = document.getElementById(containerId);
        if (!mainContainer) {
            throw new Error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let container = mainContainer.querySelector('#mapElement');
        if (!container) {
            container = mainContainer.querySelector('.map-content');
        }
        if (!container) {
            container = mainContainer;
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã
        container.innerHTML = '';
        console.log('üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', container.id || container.className);

        const center = this.getRegionCenter(regionData.id);

        try {
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ MapGL API
            await this.waitForMapGL();

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
            this.mapInstance = new mapgl.Map(container, {
                center: [center.coordinates[0], center.coordinates[1]],
                zoom: center.zoom,
                key: this.apiKey,
            });

            // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
            this.mapInstance.on('click', (event) => {
                console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', event.lngLat);
                this.showClickInfo(event.lngLat);
            });

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞
            setTimeout(() => {
                this.loadPopularPlaces(regionData.name);
            }, 2000);

            console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
            this.createFallbackMap(container, center, regionData.name);
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ MapGL API
     */
    async waitForMapGL() {
        return new Promise((resolve, reject) => {
            if (typeof mapgl !== 'undefined') {
                resolve();
                return;
            }

            let attempts = 0;
            const checkMapGL = () => {
                attempts++;
                if (typeof mapgl !== 'undefined') {
                    resolve();
                } else if (attempts > 20) {
                    reject(new Error('MapGL API –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è'));
                } else {
                    setTimeout(checkMapGL, 500);
                }
            };
            checkMapGL();
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç
     */
    async loadPopularPlaces(cityName) {
        console.log('üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è:', cityName);

        const popularQueries = {
            '–ú–æ—Å–∫–≤–∞': '–∫—Ä–µ–º–ª—å –º–æ—Å–∫–≤–∞',
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': '—ç—Ä–º–∏—Ç–∞–∂ —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥',
            '–ö–∞–∑–∞–Ω—å': '–∫—Ä–µ–º–ª—å –∫–∞–∑–∞–Ω—å',
            '–°–æ—á–∏': '–æ–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø–∞—Ä–∫ —Å–æ—á–∏',
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': '—Ö—Ä–∞–º –Ω–∞ –∫—Ä–æ–≤–∏ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
        };

        const query = popularQueries[cityName] || `–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${cityName}`;

        try {
            console.log('üîç –ü—Ä–æ–±—É–µ–º API –∑–∞–ø—Ä–æ—Å –¥–ª—è:', query);
            const results = await this.searchPlaces(query);
            console.log('üì¶ API –æ—Ç–≤–µ—Ç:', results);

            if (results.length > 0) {
                console.log(`‚úÖ API: –ù–∞–π–¥–µ–Ω–æ ${results.length} –º–µ—Å—Ç`);
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç –∫–∞–∫ –º–∞—Ä–∫–µ—Ä—ã
                results.slice(0, 5).forEach((place, index) => {
                    this.addSimpleMarker(place, index);
                });

                this.showToast(`üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Math.min(results.length, 5)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç! –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º.`);
            } else {
                console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                this.loadFallbackPlaces(cityName);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            this.loadFallbackPlaces(cityName);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ fallback –º–µ—Å—Ç
     */
    loadFallbackPlaces(cityName) {
        console.log('üìç –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –º–µ—Å—Ç–∞ –¥–ª—è:', cityName);

        const fallbackPlaces = {
            '–ú–æ—Å–∫–≤–∞': [
                { name: '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å', point: { lon: 37.6173, lat: 55.7520 }, address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1' }, purpose_name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
                { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', point: { lon: 37.6211, lat: 55.7539 }, address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å' }, purpose_name: '–ü–ª–æ—â–∞–¥—å' },
                { name: '–•—Ä–∞–º –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ', point: { lon: 37.6230, lat: 55.7525 }, address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 2' }, purpose_name: '–•—Ä–∞–º' },
                { name: '–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è', point: { lon: 37.6207, lat: 55.7416 }, address: { name: '–õ–∞–≤—Ä—É—à–∏–Ω—Å–∫–∏–π –ø–µ—Ä., 10' }, purpose_name: '–ú—É–∑–µ–π' },
                { name: '–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä', point: { lon: 37.6192, lat: 55.7596 }, address: { name: '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª., 1' }, purpose_name: '–¢–µ–∞—Ç—Ä' }
            ],
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': [
                { name: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂', point: { lon: 30.3141, lat: 59.9398 }, address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 34' }, purpose_name: '–ú—É–∑–µ–π' },
                { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å', point: { lon: 30.3158, lat: 59.9386 }, address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å' }, purpose_name: '–ü–ª–æ—â–∞–¥—å' },
                { name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å', point: { lon: 30.3167, lat: 59.9496 }, address: { name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å' }, purpose_name: '–ö—Ä–µ–ø–æ—Å—Ç—å' },
                { name: '–ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∏–π —Å–æ–±–æ—Ä', point: { lon: 30.3063, lat: 59.9340 }, address: { name: '–ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∞—è –ø–ª., 4' }, purpose_name: '–°–æ–±–æ—Ä' },
                { name: '–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç', point: { lon: 30.3351, lat: 59.9311 }, address: { name: '–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç' }, purpose_name: '–ü—Ä–æ—Å–ø–µ–∫—Ç' }
            ],
            '–ö–∞–∑–∞–Ω—å': [
                { name: '–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö—Ä–µ–º–ª—å', point: { lon: 49.1057, lat: 55.7981 }, address: { name: '–ö—Ä–µ–º–ª—å' }, purpose_name: '–ö—Ä–µ–º–ª—å' },
                { name: '–ú–µ—á–µ—Ç—å –ö—É–ª-–®–∞—Ä–∏—Ñ', point: { lon: 49.1052, lat: 55.7984 }, address: { name: '–ö—Ä–µ–º–ª—å' }, purpose_name: '–ú–µ—á–µ—Ç—å' },
                { name: '–£–ª–∏—Ü–∞ –ë–∞—É–º–∞–Ω–∞', point: { lon: 49.1221, lat: 55.7887 }, address: { name: '—É–ª. –ë–∞—É–º–∞–Ω–∞' }, purpose_name: '–£–ª–∏—Ü–∞' },
                { name: '–î–≤–æ—Ä–µ—Ü –∑–µ–º–ª–µ–¥–µ–ª—å—Ü–µ–≤', point: { lon: 49.1070, lat: 55.7953 }, address: { name: '–î–≤–æ—Ä–µ—Ü –∑–µ–º–ª–µ–¥–µ–ª—å—Ü–µ–≤' }, purpose_name: '–î–≤–æ—Ä–µ—Ü' }
            ],
            '–°–æ—á–∏': [
                { name: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø–∞—Ä–∫', point: { lon: 39.9566, lat: 43.4057 }, address: { name: '–û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø–∞—Ä–∫' }, purpose_name: '–ü–∞—Ä–∫' },
                { name: '–†–æ–∑–∞ –•—É—Ç–æ—Ä', point: { lon: 40.3142, lat: 43.7291 }, address: { name: '–†–æ–∑–∞ –•—É—Ç–æ—Ä' }, purpose_name: '–ö—É—Ä–æ—Ä—Ç' },
                { name: '–î–µ–Ω–¥—Ä–∞—Ä–∏–π', point: { lon: 39.7440, lat: 43.5853 }, address: { name: '–ö—É—Ä–æ—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç' }, purpose_name: '–ü–∞—Ä–∫' },
                { name: '–ú–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª', point: { lon: 39.7184, lat: 43.5813 }, address: { name: '–ú–æ—Ä—Å–∫–æ–π –≤–æ–∫–∑–∞–ª' }, purpose_name: '–í–æ–∫–∑–∞–ª' }
            ]
        };

        const places = fallbackPlaces[cityName] || fallbackPlaces['–ú–æ—Å–∫–≤–∞'];

        places.forEach((place, index) => {
            this.addSimpleMarker(place, index);
        });

        this.showToast(`üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${places.length} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Ç! –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º.`);
        console.log(`‚úÖ Fallback: –î–æ–±–∞–≤–ª–µ–Ω–æ ${places.length} –º–µ—Å—Ç –¥–ª—è ${cityName}`);
    }

    /**
     * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ API
     */
    async searchPlaces(query) {
        if (!this.mapInstance) {
            console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return [];
        }

        const center = this.mapInstance.getCenter();
        console.log('üéØ –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:', center);

        const params = new URLSearchParams({
            q: query,
            key: this.apiKey,
            point: `${center[0]},${center[1]}`,
            radius: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
            page_size: 15,
            fields: 'items.point,items.name,items.purpose_name,items.address'
        });

        const url = `${this.searchApiUrl}?${params}`;
        console.log('üì° –ü–æ–ª–Ω—ã–π API –∑–∞–ø—Ä–æ—Å:', url);

        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                }
            });

            console.log('üì® –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);

            if (!response.ok) {
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
                const errorText = await response.text();
                console.error('‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', data);

            if (data.result && data.result.items) {
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.result.items.length} –æ–±—ä–µ–∫—Ç–æ–≤`);
                return data.result.items;
            } else {
                console.warn('‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API');
                return [];
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
     */
    addSimpleMarker(place, index) {
        if (!place.point || !this.mapInstance) return;

        const coordinates = [place.point.lon, place.point.lat];

        // –ü—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞
        const markerElement = document.createElement('div');
        markerElement.style.cssText = `
            width: 30px;
            height: 30px;
            background: linear-gradient(135deg, #ff8e53, #ffcc00);
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 4px 12px rgba(255, 142, 83, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-weight: bold;
            color: #1a1a2e;
            font-size: 12px;
            transition: transform 0.3s ease;
        `;
        markerElement.textContent = index + 1;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        const marker = new mapgl.Marker(this.mapInstance, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        markerElement.onclick = () => {
            console.log('üéØ –ö–ª–∏–∫ –ø–æ –º–∞—Ä–∫–µ—Ä—É:', place.name);
            this.showPlaceInfo(place);

            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            this.mapInstance.setCenter(coordinates);
            this.mapInstance.setZoom(16);
        };

        // Hover —ç—Ñ—Ñ–µ–∫—Ç
        markerElement.onmouseenter = () => {
            markerElement.style.transform = 'scale(1.2)';
        };
        markerElement.onmouseleave = () => {
            markerElement.style.transform = 'scale(1)';
        };

        this.markers.push(marker);
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    showPlaceInfo(place) {
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ:', place);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é showPlaceInfo –∏–∑ HTML
        if (typeof window.showPlaceInfo === 'function') {
            window.showPlaceInfo(place);
        } else {
            // Fallback - –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            const info = `
                üè¢ ${place.name}
                üìç ${place.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                üè∑Ô∏è ${place.purpose_name || '–ó–∞–≤–µ–¥–µ–Ω–∏–µ'}
            `;
            alert(info);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    async handleObjectClick(feature, coordinates) {
        console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É:', feature);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
        const properties = feature.properties || {};
        const name = properties.name || properties.title || '–û–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ';
        const category = properties.class || properties.type || '–ú–µ—Å—Ç–æ';

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞
        const place = {
            name: name,
            purpose_name: category,
            address: {
                name: `${coordinates[1].toFixed(4)}, ${coordinates[0].toFixed(4)}`
            },
            point: {
                lat: coordinates[1],
                lon: coordinates[0]
            },
            id: properties.id || null,
            properties: properties
        };

        console.log('üè¢ –û–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞:', place);

        // –ò—â–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ 2GIS
        try {
            const detailedInfo = await this.getDetailedPlaceInfo(coordinates[1], coordinates[0], name);
            if (detailedInfo) {
                this.showPlaceInfo(detailedInfo);
                return;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', error);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.showPlaceInfo(place);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
     */
    async getDetailedPlaceInfo(lat, lon, searchName = '') {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', { lat, lon, searchName });

        try {
            const radius = 100; // –ù–µ–±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const query = searchName || '';
            const url = `${this.searchApiUrl}?q=${encodeURIComponent(query)}&point=${lon},${lat}&radius=${radius}&key=${this.apiKey}&page_size=5`;

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                }
            });

            if (!response.ok) {
                console.warn(`‚ö†Ô∏è API –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–Ω—É–ª ${response.status}`);
                return null;
            }

            const data = await response.json();
            console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', data);

            if (data.result && data.result.items && data.result.items.length > 0) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                return data.result.items[0];
            }

            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–∫–µ
     */
    async showClickInfo(coordinates) {
        const lon = coordinates[0];
        const lat = coordinates[1];

        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', { lat, lon });

        // –°–†–ê–ó–£ –ò–©–ï–ú –ó–ê–í–ï–î–ï–ù–ò–Ø –ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
        try {
            const nearbyPlaces = await this.searchNearbyPlaces(lat, lon);

            if (nearbyPlaces.length > 0) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                this.showPlaceInfo(nearbyPlaces[0]);
            } else {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                await this.tryDifferentSearches(lat, lon);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            this.showLocationInfo({ lat, lon });
        }
    }

    async tryDifferentSearches(lat, lon) {
        const searches = ['–∫–∞—Ñ–µ', '–º–∞–≥–∞–∑–∏–Ω', '–±–∞–Ω–∫', '–∞–ø—Ç–µ–∫–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'];

        for (const query of searches) {
            try {
                const url = `${this.searchApiUrl}?q=${encodeURIComponent(query)}&point=${lon},${lat}&radius=200&key=${this.apiKey}&page_size=5`;
                const response = await fetch(url);
                const data = await response.json();

                if (data.result && data.result.items && data.result.items.length > 0) {
                    this.showPlaceInfo(data.result.items[0]);
                    return;
                }
            } catch (error) {
                continue;
            }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
        this.showLocationInfo({ lat, lon });
    }

    /**
     * –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
     */
    async searchNearbyPlaces(lat, lon) {
        console.log('üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:', { lat, lon });

        const radius = 500; // –º–µ—Ç—Ä–æ–≤
        const url = `${this.searchApiUrl}?q=&point=${lon},${lat}&radius=${radius}&key=${this.apiKey}&page_size=10`;

        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
                }
            });

            if (!response.ok) {
                console.warn(`‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª ${response.status}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
                return [];
            }

            const data = await response.json();
            console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:', data);

            if (data.result && data.result.items) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.result.items.length} –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç`);
                return data.result.items;
            }

            return [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç:', error);
            return [];
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç–∞—Ö
     */
    showNearbyPlacesInfo(places, clickCoords) {
        console.log('üè¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞:', places);

        if (typeof window.showNearbyPlaces === 'function') {
            window.showNearbyPlaces(places, clickCoords);
        } else {
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
            if (places.length > 0) {
                this.showPlaceInfo(places[0]);
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Å—Ç–∞)
     */
    showLocationInfo(coords) {
        console.log('üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏:', coords);

        if (typeof window.showLocationInfo === 'function') {
            window.showLocationInfo(coords);
        } else {
            const info = `üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n–®–∏—Ä–æ—Ç–∞: ${coords.lat.toFixed(6)}\n–î–æ–ª–≥–æ—Ç–∞: ${coords.lon.toFixed(6)}`;
            alert(info);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(message) {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π toast
        const existing = document.querySelector('.simple-toast');
        if (existing) existing.remove();

        const toast = document.createElement('div');
        toast.className = 'simple-toast';
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            max-width: 300px;
            animation: slideInRight 0.3s ease;
        `;

        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 4000);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
     */
    getRegionCenter(regionId) {
        const centers = {
            'moscow': { coordinates: [37.6173, 55.7558], zoom: 11 },
            'spb': { coordinates: [30.3351, 59.9311], zoom: 11 },
            'kazan': { coordinates: [49.1221, 55.7887], zoom: 12 },
            'sochi': { coordinates: [39.7303, 43.6028], zoom: 12 },
            'ekaterinburg': { coordinates: [60.6122, 56.8431], zoom: 12 }
        };
        return centers[regionId] || centers['moscow'];
    }

    /**
     * Fallback –∫–∞—Ä—Ç–∞
     */
    createFallbackMap(container, center, cityName) {
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º fallback –∫–∞—Ä—Ç—É');

        container.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; height: 500px; background: rgba(255,255,255,0.1); border-radius: 16px; color: #fff; text-align: center;">
                <div>
                    <h3>üó∫Ô∏è ${cityName}</h3>
                    <p>–ö–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
                    <iframe
                        src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.coordinates[1]}%2C%22lon%22%3A${center.coordinates[0]}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${encodeURIComponent(cityName)}%22%7D%7D"
                        width="100%"
                        height="400"
                        frameborder="0"
                        style="border-radius: 12px; margin-top: 16px;"
                    ></iframe>
                </div>
            </div>
        `;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
     */
    clearMarkers() {
        this.markers.forEach(marker => {
            if (marker && marker.destroy) {
                marker.destroy();
            }
        });
        this.markers = [];
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
     */
    destroy() {
        this.clearMarkers();
        if (this.mapInstance) {
            this.mapInstance.destroy();
            this.mapInstance = null;
        }
        console.log('üóëÔ∏è –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
if (!document.getElementById('simple-map-styles')) {
    const style = document.createElement('style');
    style.id = 'simple-map-styles';
    style.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.matryoshka2GIS = new Matryoshka2GISMaps();

console.log('üöÄ –ü–†–û–°–¢–ê–Ø –≤–µ—Ä—Å–∏—è 2GIS –∫–∞—Ä—Ç –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');