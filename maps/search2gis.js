/**
 * üîç –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ 2GIS API
 * –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å –æ—Ç–∑—ã–≤–∞–º–∏
 */

class Matryoshka2GISSearch {
    constructor() {
        this.apiKey = '8a7c9b28-b45f-4f45-9784-d34db72416db';
        this.baseApiUrl = 'https://catalog.api.2gis.com/3.0';
        this.searchResults = [];
        this.activeCity = null;
    }

    /**
     * –ü–æ–∏—Å–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ
     */
    async searchPlaces(query, cityName, region = null) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫: "${query}" –≤ ${cityName}`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            const searchQuery = region ? `${query} ${cityName} ${region}` : `${query} ${cityName}`;
            const params = new URLSearchParams({
                q: searchQuery,
                key: this.apiKey,
                fields: 'items.point,items.name,items.purpose_name,items.adm_div,items.address,items.contact_groups,items.schedule,items.rubrics,items.reviews,items.photos',
                page_size: 50
            });

            const url = `${this.baseApiUrl}/items?${params}`;
            console.log('üåê API –∑–∞–ø—Ä–æ—Å:', url);

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', data);

            if (data.result && data.result.items) {
                this.searchResults = data.result.items;
                return this.searchResults;
            }

            return [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            return this.getFallbackPlaces(query, cityName);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –≤–∫–ª—é—á–∞—è –æ—Ç–∑—ã–≤—ã
     */
    async getPlaceDetails(placeId) {
        try {
            const params = new URLSearchParams({
                id: placeId,
                key: this.apiKey,
                fields: 'items.reviews,items.photos,items.schedule,items.contact_groups,items.description'
            });

            const url = `${this.baseApiUrl}/items?${params}`;
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                mode: 'cors'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.result && data.result.items && data.result.items.length > 0) {
                return data.result.items[0];
            }

            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π:', error);
            return null;
        }
    }

    /**
     * Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
     */
    getFallbackPlaces(query, cityName) {
        const fallbackData = {
            '–º–æ—Å–∫–≤–∞': [
                {
                    id: 'mock_kremlin',
                    name: '–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å',
                    purpose_name: '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    point: { lat: 55.7520, lon: 37.6173 },
                    address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1' },
                    reviews: {
                        general_rating: 4.8,
                        general_review_count: 15420,
                        items: [
                            {
                                rating: 5,
                                text: '–°–µ—Ä–¥—Ü–µ –†–æ—Å—Å–∏–∏! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø–æ—Å–µ—â–µ–Ω–∏—é. –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –±–æ–≥–∞—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è.',
                                author: { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ú.' },
                                date_created: '2024-09-15'
                            },
                            {
                                rating: 5,
                                text: '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ–µ –º–µ—Å—Ç–æ! –≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö—Ä–µ–º–ª—è –ø—Ä–æ–∏–∑–≤–µ–ª–∞ –Ω–µ–∏–∑–≥–ª–∞–¥–∏–º–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.',
                                author: { name: '–ï–ª–µ–Ω–∞ –ö.' },
                                date_created: '2024-09-10'
                            }
                        ]
                    }
                },
                {
                    id: 'mock_red_square',
                    name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å',
                    purpose_name: '–ü–ª–æ—â–∞–¥—å',
                    point: { lat: 55.7539, lon: 37.6211 },
                    address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å' },
                    reviews: {
                        general_rating: 4.9,
                        general_review_count: 22350,
                        items: [
                            {
                                rating: 5,
                                text: '–°–∏–º–≤–æ–ª –ú–æ—Å–∫–≤—ã –∏ –≤—Å–µ–π –†–æ—Å—Å–∏–∏! –í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ.',
                                author: { name: '–î–º–∏—Ç—Ä–∏–π –°.' },
                                date_created: '2024-09-20'
                            }
                        ]
                    }
                },
                {
                    id: 'mock_basil',
                    name: '–•—Ä–∞–º –í–∞—Å–∏–ª–∏—è –ë–ª–∞–∂–µ–Ω–Ω–æ–≥–æ',
                    purpose_name: '–•—Ä–∞–º',
                    point: { lat: 55.7525, lon: 37.6230 },
                    address: { name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 2' },
                    reviews: {
                        general_rating: 4.7,
                        general_review_count: 8920,
                        items: [
                            {
                                rating: 5,
                                text: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞! –ö–∞–∂–¥—ã–π –∫—É–ø–æ–ª —É–Ω–∏–∫–∞–ª–µ–Ω. –í–Ω—É—Ç—Ä–∏ —Ç–æ–∂–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ.',
                                author: { name: '–ú–∞—Ä–∏—è –ü.' },
                                date_created: '2024-09-18'
                            }
                        ]
                    }
                }
            ],
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': [
                {
                    id: 'mock_hermitage',
                    name: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂',
                    purpose_name: '–ú—É–∑–µ–π',
                    point: { lat: 59.9398, lon: 30.3141 },
                    address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 34' },
                    reviews: {
                        general_rating: 4.8,
                        general_review_count: 18750,
                        items: [
                            {
                                rating: 5,
                                text: '–û–¥–∏–Ω –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö –º—É–∑–µ–µ–≤ –º–∏—Ä–∞! –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è.',
                                author: { name: '–ê–Ω–Ω–∞ –í.' },
                                date_created: '2024-09-22'
                            }
                        ]
                    }
                },
                {
                    id: 'mock_palace_square',
                    name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å',
                    purpose_name: '–ü–ª–æ—â–∞–¥—å',
                    point: { lat: 59.9386, lon: 30.3158 },
                    address: { name: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å' },
                    reviews: {
                        general_rating: 4.9,
                        general_review_count: 12400,
                        items: [
                            {
                                rating: 5,
                                text: '–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å –≤ —Å–µ—Ä–¥—Ü–µ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞. –û—Å–æ–±–µ–Ω–Ω–æ –∫—Ä–∞—Å–∏–≤–∞ –≤–µ—á–µ—Ä–æ–º.',
                                author: { name: '–ò–≥–æ—Ä—å –õ.' },
                                date_created: '2024-09-19'
                            }
                        ]
                    }
                }
            ]
        };

        const cityKey = cityName.toLowerCase();
        return fallbackData[cityKey] || [];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
     */
    createPlaceMarker(place, map, index) {
        if (!place.point) return null;

        const coordinates = [place.point.lon, place.point.lat];

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞
        const markerElement = document.createElement('div');
        markerElement.className = 'place-marker';
        markerElement.innerHTML = `
            <div class="marker-icon place-marker-icon">
                <span class="marker-number">${index + 1}</span>
            </div>
        `;

        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        const marker = new mapgl.Marker(map, {
            coordinates: coordinates,
            element: markerElement,
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        markerElement.addEventListener('click', () => {
            this.showPlacePopup(place, coordinates, map);
        });

        return marker;
    }

    /**
     * –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
     */
    async showPlacePopup(place, coordinates, map) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
        const popupElement = document.createElement('div');
        popupElement.className = 'place-popup';

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã
        const rating = place.reviews?.general_rating || 0;
        const reviewCount = place.reviews?.general_review_count || 0;
        const stars = this.generateStars(rating);

        popupElement.innerHTML = `
            <div class="popup-header">
                <h3 class="popup-title">${place.name}</h3>
                <button class="popup-close" onclick="event.stopPropagation(); this.closest('.place-popup').remove();">‚úï</button>
            </div>
            <div class="popup-content">
                <div class="place-info">
                    <div class="place-type">${place.purpose_name || '–ó–∞–≤–µ–¥–µ–Ω–∏–µ'}</div>
                    <div class="place-address">${place.address?.name || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</div>

                    <div class="place-rating">
                        <div class="rating-stars">${stars}</div>
                        <span class="rating-value">${rating.toFixed(1)}</span>
                        <span class="rating-count">(${reviewCount.toLocaleString()} –æ—Ç–∑—ã–≤–æ–≤)</span>
                    </div>
                </div>

                <div class="place-reviews" id="reviews-${place.id}">
                    <div class="reviews-loading">
                        <div class="reviews-spinner"></div>
                        <span>–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã...</span>
                    </div>
                </div>

                <div class="popup-actions">
                    <button class="popup-btn route-btn" onclick="matryoshka2GISSearch.openRoute([${coordinates}])">
                        üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                    </button>
                    <button class="popup-btn info-btn" onclick="matryoshka2GISSearch.open2GISPage('${place.name}')">
                        ‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ 2–ì–ò–°
                    </button>
                </div>
            </div>
        `;

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø –Ω–∞ –∫–∞—Ä—Ç–µ
        const popup = new mapgl.Popup(map, {
            coordinates: coordinates,
            element: popupElement,
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
        this.loadReviews(place, `reviews-${place.id}`);

        return popup;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
     */
    async loadReviews(place, containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ API
            let reviews = place.reviews?.items || [];

            if (place.id && !place.id.startsWith('mock_')) {
                const details = await this.getPlaceDetails(place.id);
                if (details && details.reviews && details.reviews.items) {
                    reviews = details.reviews.items;
                }
            }

            this.displayReviews(reviews, container);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
            this.displayReviews(place.reviews?.items || [], container);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
     */
    displayReviews(reviews, container) {
        if (!reviews || reviews.length === 0) {
            container.innerHTML = `
                <div class="no-reviews">
                    <span class="no-reviews-icon">üí¨</span>
                    <span>–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</span>
                </div>
            `;
            return;
        }

        const reviewsHtml = reviews.slice(0, 3).map(review => `
            <div class="review-item">
                <div class="review-header">
                    <div class="review-author">${review.author?.name || '–ê–Ω–æ–Ω–∏–º'}</div>
                    <div class="review-rating">${this.generateStars(review.rating || 5)}</div>
                </div>
                <div class="review-text">${review.text || '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ!'}</div>
                <div class="review-date">${this.formatDate(review.date_created)}</div>
            </div>
        `).join('');

        container.innerHTML = `
            <div class="reviews-header">
                <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã</h4>
            </div>
            <div class="reviews-list">
                ${reviewsHtml}
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
     */
    generateStars(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        return '‚òÖ'.repeat(fullStars) +
               (hasHalfStar ? '‚òÜ' : '') +
               '‚òÜ'.repeat(emptyStars);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
     */
    formatDate(dateString) {
        if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ';

        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        } catch {
            return '–ù–µ–¥–∞–≤–Ω–æ';
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
     */
    openRoute(coordinates) {
        const routeUrl = `https://2gis.ru/geo/${coordinates[1]},${coordinates[0]}?m=${coordinates[1]},${coordinates[0]},16`;
        window.open(routeUrl, '_blank');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ 2–ì–ò–°
     */
    open2GISPage(placeName, coordinates = null) {
        if (coordinates) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const mapUrl = `https://2gis.ru/geo/${coordinates[1]},${coordinates[0]}?m=${coordinates[1]},${coordinates[0]},16&q=${encodeURIComponent(placeName)}`;
            window.open(mapUrl, '_blank');
        } else {
            // Fallback –∫ –ø–æ–∏—Å–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            const searchUrl = `https://2gis.ru/search/${encodeURIComponent(placeName)}`;
            window.open(searchUrl, '_blank');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    clearResults() {
        this.searchResults = [];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.matryoshka2GISSearch = new Matryoshka2GISSearch();

console.log('üîç –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ 2GIS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');