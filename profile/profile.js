/**
 * –ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ú–∞—Ç—Ä–µ—à–∫–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

class MatryoshkaProfile {
    constructor() {
        this.user = window.Telegram?.WebApp?.initDataUnsafe?.user || {};
        this.profileData = {
            travels: 0,
            cities: 0,
            reviews: 0,
            bio: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –†–æ—Å—Å–∏–∏. –û–±–æ–∂–∞—é –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏ –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!',
            name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'
        };
        this.travelStories = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ sessionStorage
        this.loadFromSession();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ sessionStorage
     */
    loadFromSession() {
        try {
            const savedProfile = sessionStorage.getItem('matryoshka_profile');
            const savedStories = sessionStorage.getItem('matryoshka_stories');
            const savedAvatar = sessionStorage.getItem('matryoshka_avatar');

            if (savedProfile) {
                const parsed = JSON.parse(savedProfile);
                this.profileData = { ...this.profileData, ...parsed };
            }

            if (savedStories) {
                const parsed = JSON.parse(savedStories);
                this.travelStories = parsed;
            }

            if (savedAvatar) {
                this.user.photo_url = savedAvatar;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ sessionStorage:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤ sessionStorage
     */
    saveToSession() {
        try {
            sessionStorage.setItem('matryoshka_profile', JSON.stringify(this.profileData));
            sessionStorage.setItem('matryoshka_stories', JSON.stringify(this.travelStories));
            if (this.user.photo_url) {
                sessionStorage.setItem('matryoshka_avatar', this.user.photo_url);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ sessionStorage:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
     */
    initProfile() {
        console.log('ü™Ü –ü—Ä–æ—Ñ–∏–ª—å –ú–∞—Ç—Ä–µ—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.loadProfileData();
        this.initAnimations();
        this.initInteractions();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    loadProfileData() {
        const profileContent = document.querySelector('.profile-content');

        if (!profileContent) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (this.travelStories.length > 0) {
            this.updateTravelCounters();
        }

        profileContent.innerHTML = `
            <div class="profile-header" data-animate="fadeInUp">
                <div class="profile-header-top">
                    <button class="profile-edit-btn" data-action="edit-profile" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">‚úèÔ∏è</button>
                </div>
                <div class="profile-main-info">
                    <div class="profile-avatar-wrapper">
                        <img src="${this.user.photo_url || 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent('<svg width="120" height="120" xmlns="http://www.w3.org/2000/svg"><circle cx="60" cy="60" r="60" fill="#FFCC00"/><text x="50%" y="50%" fill="white" text-anchor="middle" dy=".3em" font-family="Arial" font-size="40">üë§</text></svg>')}"
                             alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                             class="profile-avatar"
                             loading="lazy">
                    </div>
                    <div class="profile-info">
                        <div class="profile-name">${this.profileData.name || this.user.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'}</div>
                        <div class="profile-id">ID: ${this.user.id || 'MATRYOSHKA-' + Math.floor(Math.random() * 100000)}</div>
                        <div class="profile-bio">${this.profileData.bio}</div>
                    </div>
                </div>
            </div>

            <div class="profile-stats" data-animate="fadeInUp" data-delay="200">
                ${this.generateStatsHTML()}
            </div>

            ${this.generateCouponsSection()}

            <div class="travel-gallery-section" data-animate="fadeInUp" data-delay="500">
                <div class="travel-gallery-header">
                    <h3 class="gallery-title">
                        <span>üì∏</span> –ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
                    </h3>
                    <button class="add-travel-btn" data-action="add-travel">+ –î–æ–±–∞–≤–∏—Ç—å</button>
                </div>
                <div class="travel-cards" id="travelCards">
                    ${this.generateTravelCardsHTML()}
                </div>
            </div>

            <div class="profile-actions" data-animate="fadeInUp" data-delay="600">
                <button class="action-btn" data-action="support">
                    <span>üí¨</span> –ü–æ–¥–¥–µ—Ä–∂–∫–∞
                </button>
            </div>
        `;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.animateElements();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    generateStatsHTML() {
        const stats = [
            { key: 'travels', value: this.profileData.travels, label: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', icon: 'üåç' },
            { key: 'cities', value: this.profileData.cities, label: '–ì–æ—Ä–æ–¥–æ–≤', icon: 'üèõÔ∏è' },
            { key: 'reviews', value: this.profileData.reviews, label: '–û—Ç–∑—ã–≤–æ–≤', icon: '‚≠ê' }
        ];

        return stats.map(stat => `
            <div class="profile-stat" data-value="${stat.value}" data-key="${stat.key}">
                <div class="profile-stat-value">0</div>
                <div class="profile-stat-label">
                    <span>${stat.icon}</span> ${stat.label}
                </div>
            </div>
        `).join('');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    generateTravelCardsHTML() {
        if (this.travelStories.length === 0) {
            return `
                <div class="no-travels">
                    <span>üó∫Ô∏è</span>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</p>
                    <small>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º</small>
                </div>
            `;
        }

        return this.travelStories.map(travel => `
            <div class="travel-card" data-travel-id="${travel.id}">
                <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                <button class="delete-travel-btn" data-action="delete-travel" data-id="${travel.id}">
                    üóëÔ∏è
                </button>

                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
                <div class="travel-card-images" onclick="matryoshkaProfile.openPhotoGallery(${travel.id})">
                    ${this.generatePhotoGrid(travel.images)}
                </div>

                <!-- –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ -->
                <div class="travel-card-content">
                    <h4 class="travel-card-title">${travel.title}</h4>
                    <p class="travel-card-text">${travel.text}</p>
                </div>
            </div>
        `).join('');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫
     */
    generateCouponsSection() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ sessionStorage
        let paidRegions = [];
        try {
            const saved = sessionStorage.getItem('paidRegions');
            if (saved) {
                paidRegions = JSON.parse(saved);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ paidRegions:', e);
        }

        console.log('üé´ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫—É–ø–æ–Ω–æ–≤:', paidRegions);

        if (paidRegions.length === 0) {
            return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        let allPartners = [];
        paidRegions.forEach(regionId => {
            const regionData = window.RUSSIA_REGIONS_DATA?.[regionId];
            if (regionData && regionData.partners) {
                regionData.partners.forEach(partner => {
                    allPartners.push({
                        ...partner,
                        regionName: regionData.name,
                        regionId: regionId
                    });
                });
            }
        });

        if (allPartners.length === 0) {
            return '';
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤
        return `
            <div class="coupons-section" data-animate="fadeInUp" data-delay="400">
                <div class="coupons-header">
                    <h3 class="coupons-title">
                        <span>üé´</span> –ú–æ–∏ –∫—É–ø–æ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏
                    </h3>
                    <p class="coupons-subtitle">–ü–∞—Ä—Ç–Ω–µ—Ä—ã –∏–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤</p>
                </div>
                <div class="coupons-grid">
                    ${allPartners.map((partner, index) => `
                        <div class="coupon-card" data-partner-index="${index}">
                            <div class="coupon-emoji">${partner.emoji}</div>
                            <div class="coupon-info">
                                <div class="coupon-name">${partner.name}</div>
                                <div class="coupon-type">${partner.type}</div>
                                <div class="coupon-region">üìç ${partner.regionName}</div>
                                <div class="coupon-rating">
                                    <span>‚≠ê</span>
                                    <span>${partner.rating}</span>
                                </div>
                                ${partner.specialOffer ? `<div class="coupon-offer">üéÅ ${partner.specialOffer}</div>` : ''}
                            </div>
                            <button class="coupon-qr-btn" onclick="matryoshkaProfile.showPartnerQR('${partner.name.replace(/'/g, "\\'")}', '${partner.emoji}')">
                                <span class="qr-icon">üì±</span>
                                <span class="qr-text">–ü–æ–∫–∞–∑–∞—Ç—å QR</span>
                            </button>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    showPartnerQR(partnerName, partnerEmoji) {
        console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:', partnerName);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MatryoshkaQR
        if (window.matryoshkaQR && typeof window.matryoshkaQR.showQRCode === 'function') {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è QR —Å–∏—Å—Ç–µ–º—ã
            const partnerData = {
                name: partnerName,
                emoji: partnerEmoji,
                type: '–ü–∞—Ä—Ç–Ω–µ—Ä',
                description: '–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏',
                rating: '4.5'
            };

            window.matryoshkaQR.showQRCode(partnerData);
        } else {
            console.error('‚ùå MatryoshkaQR –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showToast('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
     */
    updateCoupons() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é –∫—É–ø–æ–Ω–æ–≤
        this.loadProfileData();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    generatePhotoGrid(images) {
        if (!images || images.length === 0) {
            return '<div class="no-images">–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
        }

        if (images.length === 1) {
            return `<img src="${images[0]}" class="single-image" loading="lazy">`;
        }

        if (images.length === 2) {
            return `
                <div class="grid-two">
                    ${images.map(img => `<img src="${img}" class="grid-image" loading="lazy">`).join('')}
                </div>
            `;
        }

        if (images.length === 3) {
            return `
                <div class="grid-three">
                    <img src="${images[0]}" class="grid-image main" loading="lazy">
                    <div class="grid-column">
                        <img src="${images[1]}" class="grid-image" loading="lazy">
                        <img src="${images[2]}" class="grid-image" loading="lazy">
                    </div>
                </div>
            `;
        }

        if (images.length >= 4) {
            return `
                <div class="grid-many">
                    <img src="${images[0]}" class="grid-image" loading="lazy">
                    <img src="${images[1]}" class="grid-image" loading="lazy">
                    <img src="${images[2]}" class="grid-image" loading="lazy">
                    <div class="grid-more">
                        <img src="${images[3]}" class="grid-image" loading="lazy">
                        ${images.length > 4 ? `<div class="more-overlay">+${images.length - 4}</div>` : ''}
                    </div>
                </div>
            `;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
     */
    initAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.animateCounters();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞
        this.pulseAvatar();
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
     */
    animateElements() {
        const elements = document.querySelectorAll('[data-animate]');

        elements.forEach((element, index) => {
            const delay = parseInt(element.dataset.delay) || index * 100;

            setTimeout(() => {
                element.style.animation = `fadeInUp 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards`;
            }, delay);
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    animateCounters() {
        setTimeout(() => {
            const counters = document.querySelectorAll('.profile-stat');

            counters.forEach((counter, index) => {
                const target = parseInt(counter.dataset.value);
                const valueElement = counter.querySelector('.profile-stat-value');

                setTimeout(() => {
                    this.countUp(valueElement, target, 1500);
                }, index * 200);
            });
        }, 800);
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —á–∏—Å–µ–ª
     */
    countUp(element, target, duration) {
        const start = 0;
        const startTime = Date.now();

        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);

            // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easeOut = 1 - Math.pow(1 - progress, 3);
            const current = Math.floor(start + (target - start) * easeOut);

            element.textContent = current;

            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                element.textContent = target;
            }
        };

        requestAnimationFrame(animate);
    }

    /**
     * –ü—É–ª—å—Å–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    pulseAvatar() {
        const avatar = document.querySelector('.profile-avatar');
        if (avatar) {
            setInterval(() => {
                avatar.style.animation = 'pulse 2s ease-in-out';
                setTimeout(() => {
                    avatar.style.animation = '';
                }, 2000);
            }, 10000);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    initInteractions() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action]')) {
                const action = e.target.closest('[data-action]').dataset.action;
                this.handleAction(action, e.target.closest('[data-action]'));
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (e.target.classList.contains('edit-stat-btn')) {
                const stat = e.target.closest('.profile-stat');
                this.editStatistic(stat);
            }
        });

        /**
         * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */
        this.editStatistic = (statElement) => {
            const key = statElement.dataset.key;
            const currentValue = statElement.dataset.value;
            const valueElement = statElement.querySelector('.profile-stat-value');

            const input = document.createElement('input');
            input.type = 'number';
            input.value = currentValue;
            input.className = 'stat-input';
            input.min = '0';
            input.max = '9999';

            valueElement.style.display = 'none';
            statElement.appendChild(input);
            input.focus();
            input.select();

            const saveValue = () => {
                const newValue = parseInt(input.value) || 0;
                this.profileData[key] = newValue;
                statElement.dataset.value = newValue;
                valueElement.textContent = newValue;
                valueElement.style.display = '';
                input.remove();
                this.saveToSession();
                this.showToast(`‚úÖ ${key === 'cities' ? '–ì–æ—Ä–æ–¥–∞' : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            };

            input.addEventListener('blur', saveValue);
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    saveValue();
                }
                if (e.key === 'Escape') {
                    valueElement.style.display = '';
                    input.remove();
                }
            });
        };

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è Telegram
        if (window.Telegram?.WebApp?.HapticFeedback) {
            const buttons = document.querySelectorAll('.action-btn, .profile-stat');
            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
                });
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
     */
    handleAction(action, button) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);

        switch (action) {
            case 'support':
                this.showSupportModal();
                break;
            case 'add-travel':
                this.showAddTravelModal();
                break;
            case 'delete-travel':
                const travelId = parseInt(button.dataset.id);
                this.deleteTravelStory(travelId);
                break;
            case 'edit-profile':
                this.showEditProfileModal();
                break;
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
     */
    showSupportModal() {
        const modal = document.createElement('div');
        modal.className = 'travel-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
                    <button class="modal-close">‚úï</button>
                </div>
                <div class="modal-body">
                    <div style="padding: 20px; text-align: center;">
                        <div style="margin-bottom: 25px;">
                            <div style="font-size: 48px; margin-bottom: 15px;">üìû</div>
                            <p style="color: rgba(255,255,255,0.8); font-size: 14px; margin-bottom: 20px;">
                                –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                            </p>
                        </div>

                        <div style="background: rgba(255,204,0,0.05); border: 1px solid rgba(255,204,0,0.2); border-radius: 12px; padding: 20px; margin-bottom: 15px;">
                            <div style="color: #ffcc00; font-weight: 600; margin-bottom: 8px; font-size: 16px;">Telegram</div>
                            <a href="https://t.me/Alexandr_TSYP" target="_blank" style="color: #6fb6ff; text-decoration: none; font-size: 15px; display: inline-block; padding: 8px 16px; background: rgba(111,182,255,0.1); border-radius: 8px; transition: all 0.3s;">
                                @Alexandr_TSYP
                            </a>
                        </div>

                        <div style="background: rgba(255,204,0,0.05); border: 1px solid rgba(255,204,0,0.2); border-radius: 12px; padding: 20px;">
                            <div style="color: #ffcc00; font-weight: 600; margin-bottom: 8px; font-size: 16px;">Email</div>
                            <a href="mailto:cypkajkinsasa@gmail.com" style="color: #6fb6ff; text-decoration: none; font-size: 15px; display: inline-block; padding: 8px 16px; background: rgba(111,182,255,0.1); border-radius: 8px; transition: all 0.3s;">
                                cypkajkinsasa@gmail.com
                            </a>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn cancel">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);

        setTimeout(() => modal.classList.add('show'), 10);
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
     */
    showAddTravelModal() {
        const modal = document.createElement('div');
        modal.className = 'travel-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</h3>
                    <button class="modal-close">‚úï</button>
                </div>
                <div class="modal-body">
                    <input type="text" id="travelTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" maxlength="50">
                    <textarea id="travelText" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏..." maxlength="300"></textarea>
                    <div class="photo-upload-section">
                        <label class="photo-upload-label" style="
                            display: block;
                            padding: 20px;
                            border: 2px dashed rgba(255,204,0,0.5);
                            border-radius: 12px;
                            text-align: center;
                            cursor: pointer;
                            margin-bottom: 15px;
                            transition: all 0.3s ease;
                        ">
                            <input type="file" id="travelImages" accept="image/*" multiple style="display: none;">
                            <div style="font-size: 48px; margin-bottom: 10px;">üì∏</div>
                            <div style="color: #ffcc00; font-weight: 600; margin-bottom: 5px;">–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</div>
                            <div style="color: #888; font-size: 12px;">–î–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ‚Ä¢ JPG, PNG</div>
                        </label>

                        <div id="imagesPreview" style="
                            display: grid;
                            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                            gap: 10px;
                            max-height: 300px;
                            overflow-y: auto;
                            padding: 10px 0;
                            margin-bottom: 15px;
                        "></div>

                        <div id="uploadActions" style="display: none; text-align: center;">
                            <div style="
                                background: rgba(255,204,0,0.1);
                                border-radius: 12px;
                                padding: 15px;
                                margin-bottom: 20px;
                                border: 1px solid rgba(255,204,0,0.3);
                            ">
                                <div id="photoCount" style="color: #ffcc00; font-weight: 600; margin-bottom: 8px;">0 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã–±—Ä–∞–Ω–æ</div>
                                <div style="color: #888; font-size: 13px;">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –∫—Ä–∞—Å–∏–≤–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–∞—à–µ–º –ø–æ—Å—Ç–µ</div>
                            </div>
                            <button type="button" id="savePhotosBtn" style="
                                background: linear-gradient(135deg, #ffcc00, #ff8e53);
                                border: none;
                                color: #1a1a2e;
                                padding: 15px 30px;
                                border-radius: 25px;
                                font-weight: 600;
                                cursor: pointer;
                                font-size: 16px;
                                transition: all 0.3s ease;
                                box-shadow: 0 4px 15px rgba(255,204,0,0.3);
                            ">‚ú® –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn cancel">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª–∫–∏
        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imageInput = modal.querySelector('#travelImages');
        imageInput.addEventListener('change', (e) => {
            this.handleMultipleImages(e, modal);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = modal.querySelector('#savePhotosBtn');
        saveBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.savePhotosAndSubmit(modal);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('show'), 10);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    handleMultipleImages(event, modal) {
        const files = Array.from(event.target.files);
        const preview = modal.querySelector('#imagesPreview');
        const actions = modal.querySelector('#uploadActions');
        const photoCount = modal.querySelector('#photoCount');

        console.log(`–í—ã–±—Ä–∞–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

        if (files.length > 10) {
            this.showToast('‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            event.target.value = '';
            return;
        }

        if (files.length === 0) {
            preview.innerHTML = '';
            actions.style.display = 'none';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        actions.style.display = 'block';
        const fileText = files.length === 1 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' : files.length < 5 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' : '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';
        photoCount.textContent = `${files.length} ${fileText} –≤—ã–±—Ä–∞–Ω–æ`;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é
        preview.innerHTML = '';

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        files.forEach((file, index) => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${index + 1}: ${file.name}`);

            const reader = new FileReader();
            reader.onload = (e) => {
                console.log(`–§–∞–π–ª ${index + 1} –∑–∞–≥—Ä—É–∂–µ–Ω`);

                const imageContainer = document.createElement('div');
                imageContainer.className = 'image-preview-item';
                imageContainer.dataset.fileIndex = index;
                imageContainer.style.cssText = `
                    position: relative;
                    aspect-ratio: 1;
                    border-radius: 10px;
                    overflow: hidden;
                    background: #333;
                    border: 2px solid rgba(255,204,0,0.3);
                `;

                imageContainer.innerHTML = `
                    <img src="${e.target.result}"
                         style="width: 100%; height: 100%; object-fit: cover;"
                         alt="–§–æ—Ç–æ ${index + 1}"
                         loading="lazy">
                    <div style="
                        position: absolute;
                        bottom: 0;
                        left: 0;
                        right: 0;
                        background: linear-gradient(transparent, rgba(0,0,0,0.8));
                        color: white;
                        font-size: 11px;
                        padding: 8px 5px 5px;
                        text-align: center;
                    ">${index + 1}</div>
                    <button class="remove-image-btn"
                            data-file-index="${index}"
                            style="
                                position: absolute;
                                top: 5px;
                                right: 5px;
                                background: rgba(255,107,107,0.9);
                                border: none;
                                color: white;
                                width: 22px;
                                height: 22px;
                                border-radius: 50%;
                                cursor: pointer;
                                font-size: 11px;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                font-weight: bold;
                            "
                            title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ">√ó</button>
                `;

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
                const removeBtn = imageContainer.querySelector('.remove-image-btn');
                removeBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    console.log(`–£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ ${index + 1}`);
                    imageContainer.remove();
                });

                preview.appendChild(imageContainer);
                console.log(`–§–æ—Ç–æ ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–µ–≤—å—é`);
            };

            reader.onerror = () => {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}`);
            };

            reader.readAsDataURL(file);
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    renderPhotoPreview(processedFiles, modal) {
        const preview = modal.querySelector('#imagesPreview');
        preview.innerHTML = '';

        processedFiles.forEach((item, displayIndex) => {
            if (!item) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

            const imageContainer = document.createElement('div');
            imageContainer.className = 'image-preview-item';
            imageContainer.dataset.originalIndex = item.index;
            imageContainer.style.cssText = `
                position: relative;
                aspect-ratio: 1;
                border-radius: 10px;
                overflow: hidden;
                background: #333;
            `;

            imageContainer.innerHTML = `
                <img src="${item.dataUrl}"
                     style="width: 100%; height: 100%; object-fit: cover;"
                     alt="Preview ${displayIndex + 1}"
                     loading="lazy">
                <button class="remove-image-btn"
                        data-original-index="${item.index}"
                        style="
                            position: absolute;
                            top: 5px;
                            right: 5px;
                            background: rgba(0,0,0,0.7);
                            border: none;
                            color: white;
                            width: 24px;
                            height: 24px;
                            border-radius: 50%;
                            cursor: pointer;
                            font-size: 12px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            transition: all 0.2s ease;
                        "
                        onmouseover="this.style.background='rgba(255,107,107,0.9)'"
                        onmouseout="this.style.background='rgba(0,0,0,0.7)'"
                        title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ">‚úï</button>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = imageContainer.querySelector('.remove-image-btn');
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const originalIndex = parseInt(removeBtn.dataset.originalIndex);
                this.removeImageFromPreview(originalIndex, modal);
            });

            preview.appendChild(imageContainer);
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–≤—å—é
     */
    removeImageFromPreview(indexToRemove, modal) {
        const input = modal.querySelector('#travelImages');
        const preview = modal.querySelector('#imagesPreview');
        const actions = modal.querySelector('#uploadActions');
        const photoCount = modal.querySelector('#photoCount');

        try {
            const dt = new DataTransfer();
            const currentFiles = Array.from(input.files);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
            currentFiles.forEach((file, i) => {
                if (i !== indexToRemove) {
                    dt.items.add(file);
                }
            });

            input.files = dt.files;

            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—Ä–µ–≤—å—é
            const itemToRemove = preview.querySelector(`[data-index="${indexToRemove}"]`);
            if (itemToRemove) {
                itemToRemove.remove();
            }

            // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
            const remainingItems = preview.querySelectorAll('.image-preview-item');
            remainingItems.forEach((item, newIndex) => {
                item.dataset.index = newIndex;
                const removeBtn = item.querySelector('.remove-image-btn');
                removeBtn.dataset.index = newIndex;

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                const newBtn = removeBtn.cloneNode(true);
                newBtn.addEventListener('click', () => {
                    this.removeImageFromPreview(newIndex, modal);
                });
                removeBtn.parentNode.replaceChild(newBtn, removeBtn);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
            const fileCount = input.files.length;
            if (fileCount === 0) {
                actions.style.display = 'none';
            } else {
                photoCount.textContent = `${fileCount} ${fileCount === 1 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' : fileCount < 5 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' : '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'} –≤—ã–±—Ä–∞–Ω–æ`;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            this.showToast('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
     */
    savePhotosAndSubmit(modal) {
        console.log('üöÄ –ó–ê–ü–£–°–ö savePhotosAndSubmit');

        const titleElement = modal.querySelector('#travelTitle');
        const textElement = modal.querySelector('#travelText');
        const imagesElement = modal.querySelector('#travelImages');

        const title = titleElement ? titleElement.value.trim() : '';
        const text = textElement ? textElement.value.trim() : '';
        const imageFiles = imagesElement ? Array.from(imagesElement.files) : [];

        if (!title) {
            this.showToast('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
            return;
        }

        if (!text) {
            this.showToast('‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
            return;
        }

        if (imageFiles.length === 0) {
            this.showToast('‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ');
            return;
        }

        if (imageFiles.length > 10) {
            this.showToast('‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            return;
        }

        // === –°–†–ê–ó–£ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É ===
        this.closeModal(modal);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
        const images = imageFiles.map(file => URL.createObjectURL(file));
        const newTravel = {
            id: Date.now(),
            title: title,
            text: text,
            images: images,
            image: images[0],
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.travelStories.push(newTravel);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateTravelCounters();

        this.updateTravelCards();
        this.saveToSession();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (typeof addToGlobalFeed === 'function') {
            addToGlobalFeed(newTravel);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showToast('‚úÖ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤
     */
    updateTravelCounters() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
        this.profileData.travels = this.travelStories.length;

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
        const uniqueCities = new Set();
        this.travelStories.forEach(travel => {
            if (travel.title) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ü–µ–ª–∏–∫–æ–º)
                const city = travel.title.split(',')[0].trim();
                uniqueCities.add(city);
            }
        });
        this.profileData.cities = uniqueCities.size;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatsDisplay();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    updateStatsDisplay() {
        const profileStats = document.querySelectorAll('.profile-stat');
        profileStats.forEach(stat => {
            const key = stat.dataset.key;
            if (key === 'travels') {
                const valueEl = stat.querySelector('.stat-value');
                if (valueEl) valueEl.textContent = this.profileData.travels;
                stat.dataset.value = this.profileData.travels;
            } else if (key === 'cities') {
                const valueEl = stat.querySelector('.stat-value');
                if (valueEl) valueEl.textContent = this.profileData.cities;
                stat.dataset.value = this.profileData.cities;
            }
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
     */
    deleteTravelStory(travelId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?')) {
            this.travelStories = this.travelStories.filter(t => t.id !== travelId);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateTravelCounters();

            this.updateTravelCards();
            this.saveToSession();
            this.showToast('üóëÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    updateTravelCards() {
        const container = document.getElementById('travelCards');
        if (container) {
            container.innerHTML = this.generateTravelCardsHTML();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    showEditProfileModal() {
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫–∏
        window.selectedAvatarData = null;

        const modal = document.createElement('div');
        modal.className = 'travel-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h3>
                    <button class="modal-close">‚úï</button>
                </div>
                <div class="modal-body">
                    <div class="edit-section">
                        <label>–ê–≤–∞—Ç–∞—Ä</label>
                        <div class="avatar-upload">
                            <img src="${this.user.photo_url || 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent('<svg width="120" height="120" xmlns="http://www.w3.org/2000/svg"><circle cx="60" cy="60" r="60" fill="#FFCC00"/><text x="50%" y="50%" fill="white" text-anchor="middle" dy=".3em" font-family="Arial" font-size="40">üë§</text></svg>')}" class="current-avatar" id="currentAvatar">
                            <input type="file" id="avatarUpload" accept="image/*">
                            <label for="avatarUpload" class="avatar-upload-btn">üì∑ –ò–∑–º–µ–Ω–∏—Ç—å</label>
                        </div>
                    </div>
                    <div class="edit-section">
                        <label>–ò–º—è</label>
                        <input type="text" id="nameText" placeholder="–í–∞—à–µ –∏–º—è" maxlength="30" value="${this.profileData.name || this.user.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'}" style="width: 100%; padding: 10px; border-radius: 8px; border: 1px solid rgba(255,204,0,0.3); background: rgba(255,255,255,0.1); color: white; margin-bottom: 15px;">
                    </div>
                    <div class="edit-section">
                        <label>–û —Å–µ–±–µ</label>
                        <textarea id="bioText" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..." maxlength="150">${this.profileData.bio}</textarea>
                    </div>
                    <div class="edit-section">
                        <label>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</label>
                        <div class="stats-edit">
                            <div class="stat-edit-item">
                                <span>üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:</span>
                                <input type="number" id="travelsCount" value="${this.profileData.travels}" min="0" max="999">
                            </div>
                            <div class="stat-edit-item">
                                <span>üèõÔ∏è –ì–æ—Ä–æ–¥–æ–≤:</span>
                                <input type="number" id="citiesCount" value="${this.profileData.cities}" min="0" max="999">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="modal-btn save" id="saveProfile">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);
        modal.querySelector('#saveProfile').onclick = () => this.saveProfileChanges(modal);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ avatar_fix.js

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('show'), 10);
    }


    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
     */
    saveProfileChanges(modal) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');

        const name = modal.querySelector('#nameText').value.trim();
        const bio = modal.querySelector('#bioText').value.trim();
        const travels = parseInt(modal.querySelector('#travelsCount').value) || 0;
        const cities = parseInt(modal.querySelector('#citiesCount').value) || 0;
        const avatarFile = modal.querySelector('#avatarUpload').files[0];

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.profileData.name = name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫';
        this.profileData.bio = bio;
        this.profileData.travels = travels;
        this.profileData.cities = cities;

        console.log('üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.profileData);

        // –†–ê–ë–û–ß–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–ê–¢–ê–†–ö–ò –ò–ó –¢–ï–°–¢–ê
        if (window.selectedAvatarData) {
            this.user.photo_url = window.selectedAvatarData;
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑ selectedAvatarData');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
        this.saveToSession();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.loadProfileData();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.closeModal(modal);
        setTimeout(() => {
            this.showToast('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        }, 100);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    openPhotoGallery(travelId) {
        const travel = this.travelStories.find(t => t.id === travelId);
        if (!travel || !travel.images) return;

        const gallery = document.createElement('div');
        gallery.id = 'photoGallery';
        gallery.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10001;
            backdrop-filter: blur(10px);
        `;

        let currentIndex = 0;
        const images = travel.images;

        gallery.innerHTML = `
            <div style="
                position: relative;
                max-width: 90vw;
                max-height: 90vh;
                display: flex;
                align-items: center;
                justify-content: center;
            ">
                <!-- –ó–∞–∫—Ä—ã—Ç—å -->
                <button id="closeGallery" style="
                    position: absolute;
                    top: -50px;
                    right: 0;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                ">‚úï</button>

                <!-- –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ -->
                <button id="prevPhoto" style="
                    position: absolute;
                    left: -60px;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 50px;
                    height: 50px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">‚Äπ</button>

                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è -->
                <img id="galleryPhoto" src="${images[0]}" style="
                    max-width: 100%;
                    max-height: 100%;
                    object-fit: contain;
                    border-radius: 10px;
                    box-shadow: 0 10px 50px rgba(0,0,0,0.5);
                ">

                <!-- –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ -->
                <button id="nextPhoto" style="
                    position: absolute;
                    right: -60px;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 50px;
                    height: 50px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">‚Ä∫</button>

                <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä -->
                <div id="photoIndicator" style="
                    position: absolute;
                    bottom: -50px;
                    left: 50%;
                    transform: translateX(-50%);
                    color: white;
                    font-size: 14px;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">${currentIndex + 1} / ${images.length}</div>
            </div>
        `;

        document.body.appendChild(gallery);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const photo = gallery.querySelector('#galleryPhoto');
        const indicator = gallery.querySelector('#photoIndicator');

        const updatePhoto = () => {
            photo.src = images[currentIndex];
            if (indicator) {
                indicator.textContent = `${currentIndex + 1} / ${images.length}`;
            }
        };

        gallery.querySelector('#closeGallery').onclick = () => {
            gallery.remove();
        };

        const prevBtn = gallery.querySelector('#prevPhoto');
        if (prevBtn) {
            prevBtn.onclick = () => {
                currentIndex = currentIndex === 0 ? images.length - 1 : currentIndex - 1;
                updatePhoto();
            };
        }

        const nextBtn = gallery.querySelector('#nextPhoto');
        if (nextBtn) {
            nextBtn.onclick = () => {
                currentIndex = currentIndex === images.length - 1 ? 0 : currentIndex + 1;
                updatePhoto();
            };
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ —Ñ–æ—Ç–æ
        gallery.addEventListener('click', (e) => {
            if (e.target === gallery) {
                gallery.remove();
            }
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const handleKeyPress = (e) => {
            if (e.key === 'Escape') {
                gallery.remove();
                document.removeEventListener('keydown', handleKeyPress);
            } else if (e.key === 'ArrowLeft' && prevBtn) {
                prevBtn.click();
            } else if (e.key === 'ArrowRight' && nextBtn) {
                nextBtn.click();
            }
        };

        document.addEventListener('keydown', handleKeyPress);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
     */
    closeModal(modal) {
        modal.classList.add('hide');
        setTimeout(() => modal.remove(), 300);
    }


    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'matryoshka-toast';
        toast.textContent = message;

        Object.assign(toast.style, {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            background: 'linear-gradient(135deg, #ffcc00, #ff8e53)',
            color: '#1a1a2e',
            padding: '12px 24px',
            borderRadius: '12px',
            fontWeight: '600',
            fontSize: '14px',
            zIndex: '10000',
            boxShadow: '0 8px 32px rgba(255, 204, 0, 0.3)',
            animation: 'fadeInUp 0.3s ease-out'
        });

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let matryoshkaProfile = null;

function initProfile() {
    matryoshkaProfile = new MatryoshkaProfile();
    matryoshkaProfile.initProfile();
}

function loadProfileData() {
    if (matryoshkaProfile) {
        matryoshkaProfile.loadProfileData();
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProfile);
} else {
    initProfile();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        MatryoshkaProfile,
        initProfile,
        loadProfileData
    };
}