/**
 * –ú–æ–¥—É–ª—å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ú–∞—Ç—Ä–µ—à–∫–∞
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

class MatryoshkaProfile {
    constructor() {
        this.user = window.Telegram?.WebApp?.initDataUnsafe?.user || {};
        this.profileData = {
            travels: 0,
            cities: 0,
            reviews: 0,
            bio: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –†–æ—Å—Å–∏–∏. –û–±–æ–∂–∞—é –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏ –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!',
            name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'
        };
        this.travelStories = [];

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        this.loadFromLocalStorage();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage
     */
    loadFromLocalStorage() {
        console.log('üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage...');
        try {
            const savedProfile = localStorage.getItem('matryoshka_profile');
            const savedStories = localStorage.getItem('matryoshka_stories');
            const savedAvatar = localStorage.getItem('matryoshka_avatar');

            console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ localStorage:', {
                profile: savedProfile ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
                stories: savedStories ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
                avatar: savedAvatar ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
            });

            if (savedProfile) {
                const parsed = JSON.parse(savedProfile);
                this.profileData = { ...this.profileData, ...parsed };
            }

            if (savedStories) {
                const parsed = JSON.parse(savedStories);
                this.travelStories = parsed;
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:', this.travelStories.length);
                if (this.travelStories.length > 0) {
                    console.log('üñºÔ∏è –ü–µ—Ä–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:', this.travelStories[0].title);
                    console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:', this.travelStories[0].images?.length);
                    if (this.travelStories[0].images && this.travelStories[0].images.length > 0) {
                        console.log('üñºÔ∏è –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):', this.travelStories[0].images[0].substring(0, 100));
                    }
                }
            }

            if (savedAvatar) {
                this.user.photo_url = savedAvatar;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤ localStorage
     */
    saveToLocalStorage() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ localStorage...');
        try {
            localStorage.setItem('matryoshka_profile', JSON.stringify(this.profileData));
            localStorage.setItem('matryoshka_stories', JSON.stringify(this.travelStories));
            if (this.user.photo_url) {
                localStorage.setItem('matryoshka_avatar', this.user.photo_url);
            }
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:', this.travelStories.length);
            if (this.travelStories.length > 0) {
                console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:', this.travelStories[0].images?.length);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage:', error);
            console.error('–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç localStorage');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
     */
    initProfile() {
        console.log('ü™Ü –ü—Ä–æ—Ñ–∏–ª—å –ú–∞—Ç—Ä–µ—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.loadProfileData();
        this.initAnimations();
        this.initInteractions();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
     */
    loadProfileData() {
        const profileContent = document.querySelector('.profile-content');

        if (!profileContent) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (this.travelStories.length > 0) {
            this.updateTravelCounters();
        }

        profileContent.innerHTML = `
            <!-- –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è (–ù–ï –¢–†–û–ì–ê–ï–ú) -->
            <div class="profile-header" data-animate="fadeInUp">
                <div class="profile-main-info">
                    <div class="profile-avatar-wrapper">
                        <img src="${this.user.photo_url || 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent('<svg width="120" height="120" xmlns="http://www.w3.org/2000/svg"><circle cx="60" cy="60" r="60" fill="#FFCC00"/><text x="50%" y="50%" fill="white" text-anchor="middle" dy=".3em" font-family="Arial" font-size="40">üë§</text></svg>')}"
                             alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                             class="profile-avatar"
                             loading="lazy">
                    </div>
                    <div class="profile-info">
                        <div class="profile-name">${this.profileData.name || this.user.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'}</div>
                        ${this.user.username ? `<div class="profile-username">@${this.user.username}</div>` : ''}
                    </div>
                </div>
            </div>

            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ù–û–í–´–ô –î–ò–ó–ê–ô–ù -->
            <div class="profile-stats-modern" data-animate="fadeInUp" data-delay="200">
                ${this.generateStatsHTML()}
            </div>

            <!-- –ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–¢–ò–õ–¨ -->
            <div class="travel-gallery-section" data-animate="fadeInUp" data-delay="300">
                <div class="travel-gallery-header">
                    <h3 class="gallery-title">
                        <span>üì∏</span> –ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
                    </h3>
                    <button class="add-travel-btn" data-action="add-travel">
                        <span class="btn-icon">‚ûï</span>
                    </button>
                </div>
                <div class="travel-cards" id="travelCards">
                    ${this.generateTravelCardsHTML()}
                </div>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–¢–ò–õ–¨ -->
            <div class="profile-actions-modern" data-animate="fadeInUp" data-delay="400">
                <button class="support-btn-modern" data-action="support">
                    <span class="support-icon">üí¨</span>
                    <span class="support-text">–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</span>
                    <span class="support-arrow">‚Üí</span>
                </button>
            </div>
        `;

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.animateElements();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –ù–û–í–´–ô –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–¢–ò–õ–¨
     */
    generateStatsHTML() {
        const stats = [
            { key: 'travels', value: this.profileData.travels, label: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', icon: 'üåç', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π' }
        ];

        return stats.map(stat => `
            <div class="stat-card-modern" data-value="${stat.value}" data-key="${stat.key}">
                <div class="stat-icon-modern">${stat.icon}</div>
                <div class="stat-info-modern">
                    <div class="stat-value-modern">0</div>
                    <div class="stat-label-modern">${stat.label}</div>
                    <div class="stat-description-modern">${stat.description}</div>
                </div>
            </div>
        `).join('');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
     */
    generatePackagesSection() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏–∑ localStorage
        let purchasedPackages = [];
        try {
            const saved = localStorage.getItem('purchasedPackages');
            if (saved) {
                purchasedPackages = JSON.parse(saved);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ purchasedPackages:', e);
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ)
        const now = new Date();
        const activePackages = purchasedPackages.filter(pkg => {
            const expiresAt = new Date(pkg.expiresAt);
            return expiresAt > now;
        });

        // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–∞–∫–µ—Ç—ã –∏–∑ localStorage
        if (activePackages.length !== purchasedPackages.length) {
            localStorage.setItem('purchasedPackages', JSON.stringify(activePackages));
        }

        if (activePackages.length === 0) {
            return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
        const getDaysLeft = (expiresAt) => {
            const expires = new Date(expiresAt);
            const diffTime = expires - now;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Å–µ–∫—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
        return `
            <div class="packages-section" data-animate="fadeInUp" data-delay="300">
                <div class="packages-header">
                    <h3 class="packages-title">
                        <span>üéí</span> –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                    </h3>
                    <p class="packages-subtitle">${activePackages.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö</p>
                </div>
                <div class="packages-grid-profile">
                    ${activePackages.map(pkg => {
                        const daysLeft = getDaysLeft(pkg.expiresAt);
                        const expiresDate = new Date(pkg.expiresAt).toLocaleDateString('ru-RU');
                        const isExpiringSoon = daysLeft <= 2;

                        return `
                            <div class="profile-package-card ${isExpiringSoon ? 'expiring-soon' : ''}">
                                <div class="profile-package-header">
                                    <div class="profile-package-name">${pkg.name}</div>
                                    <div class="profile-package-badge ${isExpiringSoon ? 'badge-warning' : 'badge-active'}">
                                        ${isExpiringSoon ? '‚ö†Ô∏è' : '‚úì'} ${daysLeft === 1 ? '–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è' : `${daysLeft} –¥–Ω.`}
                                    </div>
                                </div>
                                <div class="profile-package-cities">
                                    üìç ${pkg.cities.join(', ')}
                                </div>
                                <div class="profile-package-footer">
                                    <div class="profile-package-expiry">
                                        <span class="expiry-icon">‚è±Ô∏è</span>
                                        <span>–î–æ ${expiresDate}</span>
                                    </div>
                                    <div class="profile-package-price">${pkg.price.toLocaleString()} ‚ÇΩ</div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    generateTravelCardsHTML() {
        if (this.travelStories.length === 0) {
            return `
                <div class="no-travels">
                    <span>üó∫Ô∏è</span>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</p>
                    <small>–ù–∞–∂–º–∏—Ç–µ ‚ûï —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º</small>
                </div>
            `;
        }

        return this.travelStories.map(travel => `
            <div class="travel-card" data-travel-id="${travel.id}">
                <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
                <button class="delete-travel-btn" data-action="delete-travel" data-id="${travel.id}">
                    üóëÔ∏è
                </button>

                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ -->
                <div class="travel-card-images" onclick="matryoshkaProfile.openPhotoGallery(${travel.id})">
                    ${this.generatePhotoGrid(travel.images)}
                </div>

                <!-- –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ -->
                <div class="travel-card-content">
                    <h4 class="travel-card-title">${travel.title}</h4>
                    <p class="travel-card-text">${travel.text}</p>
                </div>

                <!-- –§—É—Ç–µ—Ä —Å –ª–∞–π–∫–∞–º–∏ -->
                <div class="travel-card-footer">
                    <button class="like-btn ${travel.liked ? 'liked' : ''}" data-action="toggle-like" data-travel-id="${travel.id}">
                        <span class="like-icon">${travel.liked ? '‚ù§Ô∏è' : 'ü§ç'}</span>
                        <span class="like-count">${travel.likes || 0}</span>
                    </button>
                </div>
            </div>
        `).join('');
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤ –∏ —Å–∫–∏–¥–æ–∫
     */
    generateCouponsSection() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ localStorage
        let paidRegions = [];
        try {
            const saved = localStorage.getItem('paidRegions');
            if (saved) {
                paidRegions = JSON.parse(saved);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ paidRegions:', e);
        }

        console.log('üé´ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫—É–ø–æ–Ω–æ–≤:', paidRegions);

        if (paidRegions.length === 0) {
            return ''; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ
        }

        const now = new Date();

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
        const getDaysLeft = (expiresAt) => {
            const expires = new Date(expiresAt);
            const diffTime = expires - now;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        };

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∏–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        let allPartners = [];
        paidRegions.forEach(region => {
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞), —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ (–æ–±—ä–µ–∫—Ç)
            const regionId = typeof region === 'string' ? region : region.id;
            const regionExpiry = typeof region === 'object' ? region.expiresAt : null;

            const regionData = window.RUSSIA_REGIONS_DATA?.[regionId];
            if (regionData && regionData.partners) {
                regionData.partners.forEach(partner => {
                    allPartners.push({
                        ...partner,
                        regionName: regionData.name,
                        regionId: regionId,
                        expiresAt: regionExpiry
                    });
                });
            }
        });

        if (allPartners.length === 0) {
            return '';
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤
        return `
            <div class="coupons-section" data-animate="fadeInUp" data-delay="400">
                <div class="coupons-header">
                    <h3 class="coupons-title">
                        <span>üé´</span> –ú–æ–∏ –∫—É–ø–æ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏
                    </h3>
                    <p class="coupons-subtitle">${allPartners.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö</p>
                </div>
                <div class="coupons-grid">
                    ${allPartners.map((partner, index) => {
                        const daysLeft = partner.expiresAt ? getDaysLeft(partner.expiresAt) : null;
                        const expiresDate = partner.expiresAt ? new Date(partner.expiresAt).toLocaleDateString('ru-RU') : null;
                        const isExpiringSoon = daysLeft && daysLeft <= 2;

                        return `
                            <div class="coupon-card ${isExpiringSoon ? 'expiring-soon' : ''}" data-partner-index="${index}">
                                <div class="coupon-emoji">${partner.emoji}</div>
                                <div class="coupon-info">
                                    <div class="coupon-name">${partner.name}</div>
                                    <div class="coupon-type">${partner.type}</div>
                                    <div class="coupon-region">üìç ${partner.regionName}</div>
                                    ${partner.expiresAt ? `
                                        <div class="coupon-expiry ${isExpiringSoon ? 'expiring' : ''}">
                                            <span class="expiry-icon">‚è±Ô∏è</span>
                                            <span>–î–æ ${expiresDate} (${daysLeft} –¥–Ω.)</span>
                                        </div>
                                    ` : ''}
                                    <div class="coupon-rating">
                                        <span>‚≠ê</span>
                                        <span>${partner.rating}</span>
                                    </div>
                                    ${partner.specialOffer ? `<div class="coupon-offer">üéÅ ${partner.specialOffer}</div>` : ''}
                                </div>
                                <button class="coupon-qr-btn" onclick="matryoshkaProfile.showPartnerQR('${partner.name.replace(/'/g, "\\'")}', '${partner.emoji}')">
                                    <span class="qr-icon">üì±</span>
                                    <span class="qr-text">–ü–æ–∫–∞–∑–∞—Ç—å QR</span>
                                </button>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    showPartnerQR(partnerName, partnerEmoji) {
        console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:', partnerName);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MatryoshkaQR
        if (window.matryoshkaQR && typeof window.matryoshkaQR.showQRCode === 'function') {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è QR —Å–∏—Å—Ç–µ–º—ã
            const partnerData = {
                name: partnerName,
                emoji: partnerEmoji,
                type: '–ü–∞—Ä—Ç–Ω–µ—Ä',
                description: '–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏',
                rating: '4.5'
            };

            window.matryoshkaQR.showQRCode(partnerData);
        } else {
            console.error('‚ùå MatryoshkaQR –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            this.showToast('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR-–∫–æ–¥–∞');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫—É–ø–æ–Ω–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
     */
    updateCoupons() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é –∫—É–ø–æ–Ω–æ–≤
        this.loadProfileData();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    generatePhotoGrid(images) {
        if (!images || images.length === 0) {
            return '<div class="no-images">–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</div>';
        }

        if (images.length === 1) {
            return `<img src="${images[0]}" class="single-image" loading="lazy">`;
        }

        if (images.length === 2) {
            return `
                <div class="grid-two">
                    ${images.map(img => `<img src="${img}" class="grid-image" loading="lazy">`).join('')}
                </div>
            `;
        }

        if (images.length === 3) {
            return `
                <div class="grid-three">
                    <img src="${images[0]}" class="grid-image main" loading="lazy">
                    <div class="grid-column">
                        <img src="${images[1]}" class="grid-image" loading="lazy">
                        <img src="${images[2]}" class="grid-image" loading="lazy">
                    </div>
                </div>
            `;
        }

        if (images.length >= 4) {
            return `
                <div class="grid-many">
                    <img src="${images[0]}" class="grid-image" loading="lazy">
                    <img src="${images[1]}" class="grid-image" loading="lazy">
                    <img src="${images[2]}" class="grid-image" loading="lazy">
                    <div class="grid-more">
                        <img src="${images[3]}" class="grid-image" loading="lazy">
                        ${images.length > 4 ? `<div class="more-overlay">+${images.length - 4}</div>` : ''}
                    </div>
                </div>
            `;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
     */
    initAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.animateCounters();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞ –∞–≤–∞—Ç–∞—Ä–∞
        this.pulseAvatar();
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏
     */
    animateElements() {
        const elements = document.querySelectorAll('[data-animate]');

        elements.forEach((element, index) => {
            const delay = parseInt(element.dataset.delay) || index * 100;

            setTimeout(() => {
                element.style.animation = `fadeInUp 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards`;
            }, delay);
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    animateCounters() {
        setTimeout(() => {
            const counters = document.querySelectorAll('.profile-stat');

            counters.forEach((counter, index) => {
                const target = parseInt(counter.dataset.value);
                const valueElement = counter.querySelector('.profile-stat-value');

                setTimeout(() => {
                    this.countUp(valueElement, target, 1500);
                }, index * 200);
            });
        }, 800);
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —á–∏—Å–µ–ª
     */
    countUp(element, target, duration) {
        const start = 0;
        const startTime = Date.now();

        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);

            // Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            const easeOut = 1 - Math.pow(1 - progress, 3);
            const current = Math.floor(start + (target - start) * easeOut);

            element.textContent = current;

            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                element.textContent = target;
            }
        };

        requestAnimationFrame(animate);
    }

    /**
     * –ü—É–ª—å—Å–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
     */
    pulseAvatar() {
        const avatar = document.querySelector('.profile-avatar');
        if (avatar) {
            setInterval(() => {
                avatar.style.animation = 'pulse 2s ease-in-out';
                setTimeout(() => {
                    avatar.style.animation = '';
                }, 2000);
            }, 10000);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    initInteractions() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action]')) {
                const action = e.target.closest('[data-action]').dataset.action;
                this.handleAction(action, e.target.closest('[data-action]'));
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (e.target.classList.contains('edit-stat-btn')) {
                const stat = e.target.closest('.profile-stat');
                this.editStatistic(stat);
            }
        });

        /**
         * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
         */
        this.editStatistic = (statElement) => {
            const key = statElement.dataset.key;
            const currentValue = statElement.dataset.value;
            const valueElement = statElement.querySelector('.profile-stat-value');

            const input = document.createElement('input');
            input.type = 'number';
            input.value = currentValue;
            input.className = 'stat-input';
            input.min = '0';
            input.max = '9999';

            valueElement.style.display = 'none';
            statElement.appendChild(input);
            input.focus();
            input.select();

            const saveValue = () => {
                const newValue = parseInt(input.value) || 0;
                this.profileData[key] = newValue;
                statElement.dataset.value = newValue;
                valueElement.textContent = newValue;
                valueElement.style.display = '';
                input.remove();
                this.saveToLocalStorage();
                this.showToast(`‚úÖ ${key === 'cities' ? '–ì–æ—Ä–æ–¥–∞' : '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            };

            input.addEventListener('blur', saveValue);
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    saveValue();
                }
                if (e.key === 'Escape') {
                    valueElement.style.display = '';
                    input.remove();
                }
            });
        };

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è Telegram
        if (window.Telegram?.WebApp?.HapticFeedback) {
            const buttons = document.querySelectorAll('.action-btn, .profile-stat');
            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
                });
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∫–Ω–æ–ø–æ–∫
     */
    handleAction(action, button) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = '';
        }, 150);

        switch (action) {
            case 'support':
                this.showSupportModal();
                break;
            case 'add-travel':
                this.showAddTravelModal();
                break;
            case 'delete-travel':
                const travelId = parseInt(button.dataset.id);
                this.deleteTravelStory(travelId);
                break;
            case 'edit-profile':
                this.showEditProfileModal();
                break;
            case 'toggle-like':
                const likedTravelId = parseInt(button.dataset.travelId);
                this.toggleLike(likedTravelId, button);
                break;
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
     */
    showSupportModal() {
        const modal = document.createElement('div');
        modal.className = 'travel-modal modern-modal';
        modal.innerHTML = `
            <div class="modal-content support-modal-content">
                <div class="modal-header modern-modal-header">
                    <h3 class="modal-title">üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
                    <button class="modal-close modern-close">‚úï</button>
                </div>
                <div class="modal-body modern-modal-body">
                    <div class="support-intro">
                        <div class="support-icon">üìû</div>
                        <p class="support-subtitle">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º</p>
                    </div>

                    <div class="support-contacts">
                        <div class="support-contact-card telegram-card">
                            <div class="contact-icon">üí¨</div>
                            <div class="contact-info">
                                <div class="contact-label">Telegram</div>
                                <a href="https://t.me/Alexandr_TSYP" target="_blank" class="contact-link">
                                    @Alexandr_TSYP
                                </a>
                            </div>
                        </div>

                        <div class="support-contact-card email-card">
                            <div class="contact-icon">üìß</div>
                            <div class="contact-info">
                                <div class="contact-label">Email</div>
                                <a href="mailto:cypkajkinsasa@gmail.com" class="contact-link">
                                    cypkajkinsasa@gmail.com
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer modern-modal-footer">
                    <button class="modal-btn modern-btn cancel">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);

        setTimeout(() => modal.classList.add('show'), 10);
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
     */
    showAddTravelModal() {
        const modal = document.createElement('div');
        modal.className = 'travel-modal';
        modal.innerHTML = `
            <div class="modal-content travel-add-modal">
                <div class="modal-header">
                    <h3>üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</h3>
                    <button class="modal-close">‚úï</button>
                </div>
                <div class="modal-body">
                    <div class="form-section">
                        <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                        <input type="text" id="travelTitle" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å" maxlength="50" class="form-input">
                    </div>

                    <div class="form-section">
                        <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea id="travelText" placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ–µ–∑–¥–∫–µ..." maxlength="300" class="form-textarea"></textarea>
                    </div>

                    <div class="form-section">
                        <label class="form-label">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</label>
                        <label class="photo-upload-area">
                            <input type="file" id="travelImages" accept="image/*" multiple style="display: none;">
                            <div class="upload-icon-large">üì∑</div>
                            <div class="upload-title">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</div>
                            <div class="upload-subtitle">–î–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ‚Ä¢ JPG, PNG</div>
                        </label>

                        <div id="imagesPreview" class="images-preview-grid"></div>

                        <div id="uploadActions" class="upload-actions-section" style="display: none;">
                            <div class="photo-count-badge">
                                <span id="photoCount">0 —Ñ–æ—Ç–æ</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer modal-footer-sticky">
                    <button class="modal-btn cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="modal-btn publish" id="savePhotosBtn" style="display: none;">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª–∫–∏
        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imageInput = modal.querySelector('#travelImages');
        imageInput.addEventListener('change', (e) => {
            this.handleMultipleImages(e, modal);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveBtn = modal.querySelector('#savePhotosBtn');
        saveBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.savePhotosAndSubmit(modal);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('show'), 10);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    handleMultipleImages(event, modal) {
        const files = Array.from(event.target.files);
        const preview = modal.querySelector('#imagesPreview');
        const actions = modal.querySelector('#uploadActions');
        const photoCount = modal.querySelector('#photoCount');
        const publishBtn = modal.querySelector('#savePhotosBtn');

        console.log(`–í—ã–±—Ä–∞–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

        if (files.length > 10) {
            this.showToast('‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            event.target.value = '';
            return;
        }

        if (files.length === 0) {
            preview.innerHTML = '';
            actions.style.display = 'none';
            publishBtn.style.display = 'none';
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è, —Å—á–µ—Ç—á–∏–∫ –∏ –∫–Ω–æ–ø–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        actions.style.display = 'flex';
        publishBtn.style.display = 'block';
        const fileText = files.length === 1 ? '—Ñ–æ—Ç–æ' : files.length < 5 ? '—Ñ–æ—Ç–æ' : '—Ñ–æ—Ç–æ';
        photoCount.textContent = `${files.length} ${fileText}`;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é
        preview.innerHTML = '';

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        files.forEach((file, index) => {
            console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${index + 1}: ${file.name}`);

            const reader = new FileReader();
            reader.onload = (e) => {
                console.log(`–§–∞–π–ª ${index + 1} –∑–∞–≥—Ä—É–∂–µ–Ω`);

                const imageContainer = document.createElement('div');
                imageContainer.className = 'preview-image-item';
                imageContainer.dataset.fileIndex = index;

                imageContainer.innerHTML = `
                    <img src="${e.target.result}" alt="–§–æ—Ç–æ ${index + 1}">
                    <div class="preview-number">${index + 1}</div>
                    <button class="remove-image-btn" data-file-index="${index}" title="–£–¥–∞–ª–∏—Ç—å">
                        <span>√ó</span>
                    </button>
                `;

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
                const removeBtn = imageContainer.querySelector('.remove-image-btn');
                removeBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    console.log(`–£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ ${index + 1}`);
                    imageContainer.remove();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ —Ñ–æ—Ç–æ
                    const remainingPhotos = preview.querySelectorAll('.preview-image-item');
                    if (remainingPhotos.length === 0) {
                        actions.style.display = 'none';
                        publishBtn.style.display = 'none';
                    } else {
                        photoCount.textContent = `${remainingPhotos.length} —Ñ–æ—Ç–æ`;
                    }
                });

                preview.appendChild(imageContainer);
                console.log(`–§–æ—Ç–æ ${index + 1} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–µ–≤—å—é`);
            };

            reader.onerror = () => {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}`);
            };

            reader.readAsDataURL(file);
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    renderPhotoPreview(processedFiles, modal) {
        const preview = modal.querySelector('#imagesPreview');
        preview.innerHTML = '';

        processedFiles.forEach((item, displayIndex) => {
            if (!item) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

            const imageContainer = document.createElement('div');
            imageContainer.className = 'image-preview-item';
            imageContainer.dataset.originalIndex = item.index;
            imageContainer.style.cssText = `
                position: relative;
                aspect-ratio: 1;
                border-radius: 10px;
                overflow: hidden;
                background: #333;
            `;

            imageContainer.innerHTML = `
                <img src="${item.dataUrl}"
                     style="width: 100%; height: 100%; object-fit: cover;"
                     alt="Preview ${displayIndex + 1}"
                     loading="lazy">
                <button class="remove-image-btn"
                        data-original-index="${item.index}"
                        style="
                            position: absolute;
                            top: 5px;
                            right: 5px;
                            background: rgba(0,0,0,0.7);
                            border: none;
                            color: white;
                            width: 24px;
                            height: 24px;
                            border-radius: 50%;
                            cursor: pointer;
                            font-size: 12px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            transition: all 0.2s ease;
                        "
                        onmouseover="this.style.background='rgba(255,107,107,0.9)'"
                        onmouseout="this.style.background='rgba(0,0,0,0.7)'"
                        title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ">‚úï</button>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
            const removeBtn = imageContainer.querySelector('.remove-image-btn');
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const originalIndex = parseInt(removeBtn.dataset.originalIndex);
                this.removeImageFromPreview(originalIndex, modal);
            });

            preview.appendChild(imageContainer);
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–≤—å—é
     */
    removeImageFromPreview(indexToRemove, modal) {
        const input = modal.querySelector('#travelImages');
        const preview = modal.querySelector('#imagesPreview');
        const actions = modal.querySelector('#uploadActions');
        const photoCount = modal.querySelector('#photoCount');

        try {
            const dt = new DataTransfer();
            const currentFiles = Array.from(input.files);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
            currentFiles.forEach((file, i) => {
                if (i !== indexToRemove) {
                    dt.items.add(file);
                }
            });

            input.files = dt.files;

            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—Ä–µ–≤—å—é
            const itemToRemove = preview.querySelector(`[data-index="${indexToRemove}"]`);
            if (itemToRemove) {
                itemToRemove.remove();
            }

            // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
            const remainingItems = preview.querySelectorAll('.image-preview-item');
            remainingItems.forEach((item, newIndex) => {
                item.dataset.index = newIndex;
                const removeBtn = item.querySelector('.remove-image-btn');
                removeBtn.dataset.index = newIndex;

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
                const newBtn = removeBtn.cloneNode(true);
                newBtn.addEventListener('click', () => {
                    this.removeImageFromPreview(newIndex, modal);
                });
                removeBtn.parentNode.replaceChild(newBtn, removeBtn);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å
            const fileCount = input.files.length;
            if (fileCount === 0) {
                actions.style.display = 'none';
            } else {
                photoCount.textContent = `${fileCount} ${fileCount === 1 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' : fileCount < 5 ? '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' : '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'} –≤—ã–±—Ä–∞–Ω–æ`;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            this.showToast('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
     */
    savePhotosAndSubmit(modal) {
        console.log('üöÄ –ó–ê–ü–£–°–ö savePhotosAndSubmit');

        const titleElement = modal.querySelector('#travelTitle');
        const textElement = modal.querySelector('#travelText');
        const imagesElement = modal.querySelector('#travelImages');

        const title = titleElement ? titleElement.value.trim() : '';
        const text = textElement ? textElement.value.trim() : '';
        const imageFiles = imagesElement ? Array.from(imagesElement.files) : [];

        if (!title) {
            this.showToast('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
            return;
        }

        if (!text) {
            this.showToast('‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
            return;
        }

        if (imageFiles.length === 0) {
            this.showToast('‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ');
            return;
        }

        if (imageFiles.length > 10) {
            this.showToast('‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            return;
        }

        // === –ü–û–õ–£–ß–ê–ï–ú BASE64 –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ó –ü–†–ï–í–¨–Æ ===
        const preview = modal.querySelector('#imagesPreview');
        const previewImages = preview.querySelectorAll('.preview-image-item img');
        const images = Array.from(previewImages).map(img => img.src);

        console.log('üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–≤—å—é:', images.length);
        console.log('üì∏ –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):', images[0]?.substring(0, 100));

        if (images.length === 0) {
            this.showToast('‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            return;
        }

        // === –°–†–ê–ó–£ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É ===
        this.closeModal(modal);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
        const newTravel = {
            id: Date.now(),
            title: title,
            text: text,
            images: images, // –ò—Å–ø–æ–ª—å–∑—É–µ–º base64 –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–≤—å—é
            image: images[0],
        };

        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å', images.length, '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.travelStories.push(newTravel);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.updateTravelCounters();

        this.updateTravelCards();
        this.saveToLocalStorage();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (window.travelDatabase) {
            const userInfo = this.user || {};
            console.log('üì§ –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É:', newTravel);
            console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userInfo);
            const addedTravel = window.travelDatabase.add(newTravel, userInfo);
            console.log('‚úÖ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ª–µ–Ω—Ç—É:', addedTravel);
            console.log('üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ:', window.travelDatabase.travels.length);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–Ω—Ç—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (typeof loadMainFeedSection === 'function') {
                loadMainFeedSection();
                console.log('üîÑ –õ–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
        } else {
            console.error('‚ùå window.travelDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showToast('‚úÖ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤
     */
    updateTravelCounters() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
        this.profileData.travels = this.travelStories.length;

        // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
        const uniqueCities = new Set();
        this.travelStories.forEach(travel => {
            if (travel.title) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ü–µ–ª–∏–∫–æ–º)
                const city = travel.title.split(',')[0].trim();
                uniqueCities.add(city);
            }
        });
        this.profileData.cities = uniqueCities.size;

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatsDisplay();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    updateStatsDisplay() {
        const profileStats = document.querySelectorAll('.profile-stat');
        profileStats.forEach(stat => {
            const key = stat.dataset.key;
            if (key === 'travels') {
                const valueEl = stat.querySelector('.stat-value');
                if (valueEl) valueEl.textContent = this.profileData.travels;
                stat.dataset.value = this.profileData.travels;
            } else if (key === 'cities') {
                const valueEl = stat.querySelector('.stat-value');
                if (valueEl) valueEl.textContent = this.profileData.cities;
                stat.dataset.value = this.profileData.cities;
            }
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
     */
    deleteTravelStory(travelId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?')) {
            this.travelStories = this.travelStories.filter(t => t.id !== travelId);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (window.travelDatabase) {
                console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã, ID:', travelId);
                window.travelDatabase.removeByLocalId(travelId);
                console.log('‚úÖ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ª–µ–Ω—Ç—ã');
                console.log('üìä –û—Å—Ç–∞–ª–æ—Å—å –≤ –±–∞–∑–µ:', window.travelDatabase.travels.length);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–Ω—Ç—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if (typeof loadMainFeedSection === 'function') {
                    loadMainFeedSection();
                    console.log('üîÑ –õ–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è');
                }
            } else {
                console.error('‚ùå window.travelDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!');
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            this.updateTravelCounters();

            this.updateTravelCards();
            this.saveToLocalStorage();
            this.showToast('üóëÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∞–π–∫–∞ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏
     */
    toggleLike(travelId, button) {
        const travel = this.travelStories.find(t => t.id === travelId);
        if (!travel) return;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –ª–∞–π–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if (travel.likes === undefined) travel.likes = 0;
        if (travel.liked === undefined) travel.liked = false;

        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∞–π–∫–∞
        travel.liked = !travel.liked;

        if (travel.liked) {
            travel.likes += 1;
            // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∞–π–∫–∞
            button.classList.add('liked');
            button.style.animation = 'likeAnimation 0.5s ease';
        } else {
            travel.likes = Math.max(0, travel.likes - 1);
            button.classList.remove('liked');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–Ω–æ–ø–∫–∏
        const likeIcon = button.querySelector('.like-icon');
        const likeCount = button.querySelector('.like-count');

        if (likeIcon) likeIcon.textContent = travel.liked ? '‚ù§Ô∏è' : 'ü§ç';
        if (likeCount) likeCount.textContent = travel.likes;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.saveToLocalStorage();

        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
            button.style.animation = '';
        }, 500);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
     */
    updateTravelCards() {
        const container = document.getElementById('travelCards');
        if (container) {
            container.innerHTML = this.generateTravelCardsHTML();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    showEditProfileModal() {
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫–∏
        window.selectedAvatarData = null;

        const modal = document.createElement('div');
        modal.className = 'travel-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h3>
                    <button class="modal-close">‚úï</button>
                </div>
                <div class="modal-body">
                    <div class="edit-section">
                        <label>–ê–≤–∞—Ç–∞—Ä</label>
                        <div class="avatar-upload">
                            <img src="${this.user.photo_url || 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent('<svg width="120" height="120" xmlns="http://www.w3.org/2000/svg"><circle cx="60" cy="60" r="60" fill="#FFCC00"/><text x="50%" y="50%" fill="white" text-anchor="middle" dy=".3em" font-family="Arial" font-size="40">üë§</text></svg>')}" class="current-avatar" id="currentAvatar">
                            <input type="file" id="avatarUpload" accept="image/*">
                            <label for="avatarUpload" class="avatar-upload-btn">üì∑ –ò–∑–º–µ–Ω–∏—Ç—å</label>
                        </div>
                    </div>
                    <div class="edit-section">
                        <label>–ò–º—è</label>
                        <input type="text" id="nameText" placeholder="–í–∞—à–µ –∏–º—è" maxlength="30" value="${this.profileData.name || this.user.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'}" style="width: 100%; padding: 10px; border-radius: 8px; border: 1px solid rgba(255,204,0,0.3); background: rgba(255,255,255,0.1); color: white; margin-bottom: 15px;">
                    </div>
                    <div class="edit-section">
                        <label>–û —Å–µ–±–µ</label>
                        <textarea id="bioText" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..." maxlength="150">${this.profileData.bio}</textarea>
                    </div>
                    <div class="edit-section">
                        <label>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</label>
                        <div class="stats-edit">
                            <div class="stat-edit-item">
                                <span>üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π:</span>
                                <input type="number" id="travelsCount" value="${this.profileData.travels}" min="0" max="999">
                            </div>
                            <div class="stat-edit-item">
                                <span>üèõÔ∏è –ì–æ—Ä–æ–¥–æ–≤:</span>
                                <input type="number" id="citiesCount" value="${this.profileData.cities}" min="0" max="999">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="modal-btn save" id="saveProfile">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.modal-close').onclick = () => this.closeModal(modal);
        modal.querySelector('.cancel').onclick = () => this.closeModal(modal);
        modal.querySelector('#saveProfile').onclick = () => this.saveProfileChanges(modal);
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ avatar_fix.js

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => modal.classList.add('show'), 10);
    }


    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è
     */
    saveProfileChanges(modal) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');

        const name = modal.querySelector('#nameText').value.trim();
        const bio = modal.querySelector('#bioText').value.trim();
        const travels = parseInt(modal.querySelector('#travelsCount').value) || 0;
        const cities = parseInt(modal.querySelector('#citiesCount').value) || 0;
        const avatarFile = modal.querySelector('#avatarUpload').files[0];

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        this.profileData.name = name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫';
        this.profileData.bio = bio;
        this.profileData.travels = travels;
        this.profileData.cities = cities;

        console.log('üìù –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.profileData);

        // –†–ê–ë–û–ß–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–ê–¢–ê–†–ö–ò –ò–ó –¢–ï–°–¢–ê
        if (window.selectedAvatarData) {
            this.user.photo_url = window.selectedAvatarData;
            console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑ selectedAvatarData');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
        this.saveToLocalStorage();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.loadProfileData();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.closeModal(modal);
        setTimeout(() => {
            this.showToast('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        }, 100);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    openPhotoGallery(travelId) {
        const travel = this.travelStories.find(t => t.id === travelId);
        if (!travel || !travel.images) return;

        const gallery = document.createElement('div');
        gallery.id = 'photoGallery';
        gallery.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10001;
            backdrop-filter: blur(10px);
        `;

        let currentIndex = 0;
        const images = travel.images;

        gallery.innerHTML = `
            <div style="
                position: relative;
                max-width: 90vw;
                max-height: 90vh;
                display: flex;
                align-items: center;
                justify-content: center;
            ">
                <!-- –ó–∞–∫—Ä—ã—Ç—å -->
                <button id="closeGallery" style="
                    position: absolute;
                    top: -50px;
                    right: 0;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                ">‚úï</button>

                <!-- –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ -->
                <button id="prevPhoto" style="
                    position: absolute;
                    left: -60px;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 50px;
                    height: 50px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">‚Äπ</button>

                <!-- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è -->
                <img id="galleryPhoto" src="${images[0]}" style="
                    max-width: 100%;
                    max-height: 100%;
                    object-fit: contain;
                    border-radius: 10px;
                    box-shadow: 0 10px 50px rgba(0,0,0,0.5);
                ">

                <!-- –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ -->
                <button id="nextPhoto" style="
                    position: absolute;
                    right: -60px;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 50px;
                    height: 50px;
                    border-radius: 50%;
                    cursor: pointer;
                    z-index: 10002;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">‚Ä∫</button>

                <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä -->
                <div id="photoIndicator" style="
                    position: absolute;
                    bottom: -50px;
                    left: 50%;
                    transform: translateX(-50%);
                    color: white;
                    font-size: 14px;
                    ${images.length <= 1 ? 'display: none;' : ''}
                ">${currentIndex + 1} / ${images.length}</div>
            </div>
        `;

        document.body.appendChild(gallery);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const photo = gallery.querySelector('#galleryPhoto');
        const indicator = gallery.querySelector('#photoIndicator');

        const updatePhoto = () => {
            photo.src = images[currentIndex];
            if (indicator) {
                indicator.textContent = `${currentIndex + 1} / ${images.length}`;
            }
        };

        gallery.querySelector('#closeGallery').onclick = () => {
            gallery.remove();
        };

        const prevBtn = gallery.querySelector('#prevPhoto');
        if (prevBtn) {
            prevBtn.onclick = () => {
                currentIndex = currentIndex === 0 ? images.length - 1 : currentIndex - 1;
                updatePhoto();
            };
        }

        const nextBtn = gallery.querySelector('#nextPhoto');
        if (nextBtn) {
            nextBtn.onclick = () => {
                currentIndex = currentIndex === images.length - 1 ? 0 : currentIndex + 1;
                updatePhoto();
            };
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ —Ñ–æ—Ç–æ
        gallery.addEventListener('click', (e) => {
            if (e.target === gallery) {
                gallery.remove();
            }
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        const handleKeyPress = (e) => {
            if (e.key === 'Escape') {
                gallery.remove();
                document.removeEventListener('keydown', handleKeyPress);
            } else if (e.key === 'ArrowLeft' && prevBtn) {
                prevBtn.click();
            } else if (e.key === 'ArrowRight' && nextBtn) {
                nextBtn.click();
            }
        };

        document.addEventListener('keydown', handleKeyPress);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
     */
    closeModal(modal) {
        modal.classList.add('hide');
        setTimeout(() => modal.remove(), 300);
    }


    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'matryoshka-toast';
        toast.textContent = message;

        Object.assign(toast.style, {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            background: 'linear-gradient(135deg, #ffcc00, #ff8e53)',
            color: '#1a1a2e',
            padding: '12px 24px',
            borderRadius: '12px',
            fontWeight: '600',
            fontSize: '14px',
            zIndex: '10000',
            boxShadow: '0 8px 32px rgba(255, 204, 0, 0.3)',
            animation: 'fadeInUp 0.3s ease-out'
        });

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'fadeOut 0.3s ease-out forwards';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let matryoshkaProfile = null;

function initProfile() {
    matryoshkaProfile = new MatryoshkaProfile();
    matryoshkaProfile.initProfile();
}

function loadProfileData() {
    if (matryoshkaProfile) {
        matryoshkaProfile.loadProfileData();
    }
}

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProfile);
} else {
    initProfile();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        MatryoshkaProfile,
        initProfile,
        loadProfileData
    };
}