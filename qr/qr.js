/**
 * üî≤ –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –ú–∞—Ç—Ä–µ—à–∫–∞
 * –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ QR-–∫–æ–¥—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
 */

class MatryoshkaQR {
    constructor() {
        this.isLoaded = false;
        this.qrTimers = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è QR-–∫–æ–¥–æ–≤
        this.qrValidityDuration = 60000; // 1 –º–∏–Ω—É—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        this.loadQRLibrary();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ QR-–∫–æ–¥–æ–≤
     */
    async loadQRLibrary() {
        if (window.QRCode) {
            this.isLoaded = true;
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ QR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js';
            script.onload = () => {
                this.isLoaded = true;
                console.log('‚úÖ QR –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            };
            script.onerror = () => {
                console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                this.isLoaded = false;
            };
            document.head.appendChild(script);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', error);
            this.isLoaded = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ QR-–∫–æ–¥–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    showQRCode(partnerData) {
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã)
        const partnerUrl = this.generatePartnerUrl(partnerData);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = this.createQRModal(partnerData, partnerUrl);
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            modal.classList.add('show');
        }, 100);

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏
        setTimeout(() => {
            modal.querySelector('.qr-modal-content').style.animation = 'qrSlideIn 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';
        }, 150);

        // –í–ê–ñ–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.generateQRCode(partnerUrl, 'qrCanvas');

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            this.startQRTimer(partnerData.name);
        }, 2100); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
     */
    generatePartnerUrl(partnerData) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π URL –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const baseUrl = 'https://matryoshka.travel/partner/';
        const partnerSlug = partnerData.name.toLowerCase()
            .replace(/[^–∞-—è—ëa-z0-9]/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '');

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partnerHash = this.generatePartnerHash(partnerData.name);

        return `${baseUrl}${partnerSlug}?id=${partnerHash}&ref=qr&utm_source=matryoshka&utm_medium=qr`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö–µ—à–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
     */
    generatePartnerHash(partnerName) {
        // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        let hash = 0;
        for (let i = 0; i < partnerName.length; i++) {
            const char = partnerName.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        }
        return Math.abs(hash).toString(16).substr(0, 6);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è QR-–∫–æ–¥–∞
     */
    createQRModal(partnerData, url) {
        const modal = document.createElement('div');
        modal.className = 'qr-modal';
        modal.innerHTML = `
            <div class="qr-modal-overlay" onclick="matryoshkaQR.closeQRModal()">
                <div class="qr-modal-content" onclick="event.stopPropagation()">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
                    <div class="qr-header">
                        <div class="qr-partner-info">
                            <div class="qr-partner-emoji">${partnerData.emoji}</div>
                            <div class="qr-partner-details">
                                <div class="qr-partner-name">${partnerData.name}</div>
                                <div class="qr-partner-type">${partnerData.type}</div>
                            </div>
                        </div>
                        <button class="qr-close-btn" onclick="matryoshkaQR.closeQRModal()">‚úï</button>
                    </div>

                    <!-- QR-–∫–æ–¥ -->
                    <div class="qr-container">
                        <div class="qr-code-wrapper">
                            <canvas id="qrCanvas" class="qr-canvas"></canvas>
                            <div class="qr-loading">
                                <div class="qr-spinner"></div>
                                <div>–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...</div>
                            </div>
                        </div>

                        <!-- –û–ø–∏—Å–∞–Ω–∏–µ -->
                        <div class="qr-description">
                            <h3>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</h3>
                            <p>${partnerData.description}</p>
                            <div class="qr-rating">
                                <span class="qr-stars">‚≠ê</span>
                                <span class="qr-rating-value">${partnerData.rating}</span>
                                <span class="qr-rating-text">–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤</span>
                            </div>
                        </div>
                    </div>

                    <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                    <div class="qr-actions">
                        <button class="qr-btn qr-btn-primary" onclick="matryoshkaQR.copyUrl('${url}')">
                            <span class="qr-btn-icon">üìã</span>
                            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                        </button>
                        <button class="qr-btn qr-btn-secondary" onclick="matryoshkaQR.shareUrl('${url}', '${partnerData.name}')">
                            <span class="qr-btn-icon">üì§</span>
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                        </button>
                    </div>

                    <!-- –¢–∞–π–º–µ—Ä –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ -->
                    <div class="qr-timer" id="qrTimer">
                        <span class="qr-timer-icon">‚è±Ô∏è</span>
                        <span class="qr-timer-text">QR-–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: <span id="qrTimerCount">1:00</span></span>
                        <button class="qr-regenerate-btn" id="qrRegenerateBtn" style="display: none;" onclick="matryoshkaQR.regenerateQR('${partnerData.name}')">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å QR
                        </button>
                    </div>

                    <!-- –ò–Ω—Ñ–æ -->
                    <div class="qr-info">
                        <span class="qr-info-icon">üí°</span>
                        <span>–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏</span>
                    </div>
                </div>
            </div>
        `;

        return modal;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
     */
    generateQRCode(text, canvasId) {
        const canvas = document.getElementById(canvasId);
        const loading = document.querySelector('.qr-loading');

        if (!canvas) {
            console.error('Canvas –¥–ª—è QR-–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        console.log('üî≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è:', text);

        try {
            // –ü—Ä–æ—Å—Ç–æ —Ä–∏—Å—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π QR-–∫–æ–¥
            const size = 200;
            canvas.width = size;
            canvas.height = size;

            const ctx = canvas.getContext('2d');

            // –ë–µ–ª—ã–π —Ñ–æ–Ω
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, size, size);

            // –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω QR-–∫–æ–¥–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π)
            ctx.fillStyle = '#1a1a2e';
            const cellSize = size / 25;

            // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ QR-–∫–æ–¥–∞
            const qrPattern = [
                [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
                [0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0],
                [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
                [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
                [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
                [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],
                [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                [0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                [1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
            ];

            // –†–∏—Å—É–µ–º QR –ø–∞—Ç—Ç–µ—Ä–Ω
            for (let row = 0; row < qrPattern.length; row++) {
                for (let col = 0; col < qrPattern[row].length; col++) {
                    if (qrPattern[row][col] === 1) {
                        ctx.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                    }
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä
            this.addLogoToQR(ctx, size);

            console.log('‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');

            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (loading) {
                loading.style.opacity = '0';
                loading.style.display = 'none';
            }
            canvas.style.opacity = '1';
            canvas.style.animation = 'qrCodeAppear 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
            this.generateFallbackQR(canvas, text);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞
     */
    addLogoToQR(ctx, size) {
        const logoSize = size * 0.15;
        const logoX = (size - logoSize) / 2;
        const logoY = (size - logoSize) / 2;

        // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);

        // –†–∏—Å—É–µ–º –º–∞—Ç—Ä–µ—à–∫—É (—ç–º–æ–¥–∑–∏) –∫–∞–∫ –ª–æ–≥–æ—Ç–∏–ø
        ctx.font = `${logoSize * 0.8}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('ü™Ü', size / 2, size / 2);
    }

    /**
     * Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
     */
    generateFallbackQR(canvas, text) {
        const size = 200;
        canvas.width = size;
        canvas.height = size;

        const ctx = canvas.getContext('2d');

        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫–∞–∫ –∑–∞–º–µ–Ω–∞ QR-–∫–æ–¥—É
        const gradient = ctx.createLinearGradient(0, 0, size, size);
        gradient.addColorStop(0, '#ffcc00');
        gradient.addColorStop(1, '#ff8e53');

        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, size, size);

        // –†–∏—Å—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
        ctx.fillStyle = '#1a1a2e';
        for (let i = 0; i < 10; i++) {
            for (let j = 0; j < 10; j++) {
                if ((i + j) % 2 === 0) {
                    ctx.fillRect(i * 20, j * 20, 10, 10);
                }
            }
        }

        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞
        ctx.font = '40px Arial';
        ctx.fillStyle = '#ffffff';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('ü™Ü', size / 2, size / 2);

        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback QR-–∫–æ–¥');
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    async copyUrl(url) {
        try {
            await navigator.clipboard.writeText(url);
            this.showToast('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');

            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            const btn = event.target.closest('.qr-btn');
            btn.style.transform = 'scale(0.95)';
            setTimeout(() => {
                btn.style.transform = '';
            }, 150);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            this.showToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å');
        }
    }

    /**
     * –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
     */
    async shareUrl(url, partnerName) {
        const shareData = {
            title: `${partnerName} - –ú–∞—Ç—Ä–µ—à–∫–∞`,
            text: `–ü–æ—Å–µ—Ç–∏—Ç–µ ${partnerName} —Å–æ —Å–∫–∏–¥–∫–æ–π –æ—Ç –ú–∞—Ç—Ä–µ—à–∫–∞!`,
            url: url
        };

        try {
            if (navigator.share) {
                await navigator.share(shareData);
            } else {
                // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Web Share API
                await this.copyUrl(url);
                this.showToast('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ QR-–∫–æ–¥–∞
     */
    startQRTimer(partnerName) {
        const timerCount = document.getElementById('qrTimerCount');
        const regenerateBtn = document.getElementById('qrRegenerateBtn');

        if (!timerCount) return;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.qrTimers.has(partnerName)) {
            clearInterval(this.qrTimers.get(partnerName));
        }

        let timeLeft = 60; // 60 —Å–µ–∫—É–Ω–¥

        const updateTimer = () => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerCount.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

            if (timeLeft <= 0) {
                // –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫
                timerCount.textContent = '–ò—Å—Ç–µ–∫';
                timerCount.parentElement.style.color = '#ff6b6b';
                if (regenerateBtn) {
                    regenerateBtn.style.display = 'inline-flex';
                    regenerateBtn.style.animation = 'qrPulse 1.5s ease-in-out infinite';
                }
                clearInterval(timer);
                this.qrTimers.delete(partnerName);
                return;
            }

            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ü—É
            if (timeLeft <= 10) {
                timerCount.parentElement.style.color = '#ff6b6b';
                timerCount.style.animation = 'qrTimerBlink 1s ease-in-out infinite';
            } else if (timeLeft <= 30) {
                timerCount.parentElement.style.color = '#ffcc00';
            }

            timeLeft--;
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const timer = setInterval(updateTimer, 1000);
        this.qrTimers.set(partnerName, timer);

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        updateTimer();
    }

    /**
     * –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
     */
    regenerateQR(partnerName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        const timerCount = document.getElementById('qrTimerCount');
        const regenerateBtn = document.getElementById('qrRegenerateBtn');

        if (timerCount) {
            timerCount.textContent = '1:00';
            timerCount.parentElement.style.color = '#d0d0d0';
            timerCount.style.animation = '';
        }

        if (regenerateBtn) {
            regenerateBtn.style.display = 'none';
            regenerateBtn.style.animation = '';
        }

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        this.startQRTimer(partnerName);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showToast('üîÑ QR-–∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω!');

        console.log('üîÑ QR-–∫–æ–¥ —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', partnerName);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ QR-–∫–æ–¥–∞
     */
    closeQRModal() {
        const modal = document.querySelector('.qr-modal');
        if (modal) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
            this.qrTimers.forEach((timer, partnerName) => {
                clearInterval(timer);
            });
            this.qrTimers.clear();

            modal.classList.add('hide');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'qr-toast';
        toast.textContent = message;

        Object.assign(toast.style, {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            background: 'linear-gradient(135deg, #ffcc00, #ff8e53)',
            color: '#1a1a2e',
            padding: '12px 24px',
            borderRadius: '12px',
            fontWeight: '600',
            fontSize: '14px',
            zIndex: '10002',
            boxShadow: '0 8px 32px rgba(255, 204, 0, 0.3)',
            animation: 'qrToastShow 0.3s ease-out'
        });

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'qrToastHide 0.3s ease-out forwards';
            setTimeout(() => toast.remove(), 300);
        }, 2000);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.matryoshkaQR = new MatryoshkaQR();

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const qrStyles = document.createElement('style');
qrStyles.textContent = `
    @keyframes qrSlideIn {
        from {
            opacity: 0;
            transform: translateY(50px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    @keyframes qrCodeAppear {
        from {
            opacity: 0;
            transform: scale(0.8) rotate(-5deg);
        }
        to {
            opacity: 1;
            transform: scale(1) rotate(0deg);
        }
    }

    @keyframes qrToastShow {
        from {
            opacity: 0;
            transform: translateX(-50%) translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
    }

    @keyframes qrToastHide {
        from {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }
        to {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px);
        }
    }

    @keyframes qrTimerBlink {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.6; }
    }

    @keyframes qrPulse {
        0%, 100% {
            transform: scale(1);
            box-shadow: 0 4px 12px rgba(255, 204, 0, 0.3);
        }
        50% {
            transform: scale(1.05);
            box-shadow: 0 8px 20px rgba(255, 204, 0, 0.5);
        }
    }
`;

document.head.appendChild(qrStyles);