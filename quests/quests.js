/**
 * –°–∏—Å—Ç–µ–º–∞ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ú–∞—Ç—Ä–µ—à–∫–∞
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã
 */

(function() {
    'use strict';

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞–Ω–∏–π
    const QUESTS_STORAGE_KEY = 'matreshka_quests';
    const COMPLETED_QUESTS_KEY = 'matreshka_completed_quests';

    // –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏
    class QuestsSystem {
        constructor() {
            this.quests = [];
            this.completedQuests = this.loadCompletedQuests();
            this.currentQuest = null;
            this.init();
        }

        init() {
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π');
            this.generateQuests();
            this.updateQuestsBadge();
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        generateQuests() {
            this.quests = [];

            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
            const paidRegions = window.paidRegions || [];

            if (paidRegions.length === 0) {
                console.log('üì≠ –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ - –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π');
                return;
            }

            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
            paidRegions.forEach(paidRegion => {
                const regionData = window.RUSSIA_REGIONS_DATA?.[paidRegion.id];

                if (!regionData || !regionData.attractions) return;

                // –ë–µ—Ä–µ–º –¥–æ 3 –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
                const attractions = regionData.attractions.slice(0, 3);

                attractions.forEach((attraction, index) => {
                    const questId = `${paidRegion.id}_${index}`;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
                    const isCompleted = this.completedQuests.includes(questId);

                    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                    const partner = regionData.partners && regionData.partners.length > 0
                        ? regionData.partners[Math.floor(Math.random() * regionData.partners.length)]
                        : null;

                    this.quests.push({
                        id: questId,
                        regionId: paidRegion.id,
                        regionName: regionData.name,
                        title: `–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π ${attraction.name}`,
                        description: `–ù–∞–π–¥–∏ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å "${attraction.name}" –≤ –≥–æ—Ä–æ–¥–µ ${regionData.name}`,
                        attraction: attraction.name,
                        partner: partner,
                        rewardText: partner ? `QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å –≤ "${partner.name}"` : 'QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å',
                        status: isCompleted ? 'completed' : 'available',
                        photo: isCompleted ? this.getQuestPhoto(questId) : null,
                        completedDate: isCompleted ? this.getCompletionDate(questId) : null,
                        qrCode: isCompleted ? this.getQuestQR(questId) : null
                    });
                });
            });

            console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${this.quests.length}`);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        loadCompletedQuests() {
            try {
                const data = localStorage.getItem(COMPLETED_QUESTS_KEY);
                return data ? JSON.parse(data) : [];
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', e);
                return [];
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        saveCompletedQuest(questId, photoData) {
            if (!this.completedQuests.includes(questId)) {
                this.completedQuests.push(questId);
                localStorage.setItem(COMPLETED_QUESTS_KEY, JSON.stringify(this.completedQuests));
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –¥–∞—Ç—É
            localStorage.setItem(`quest_photo_${questId}`, photoData);
            localStorage.setItem(`quest_date_${questId}`, new Date().toISOString());
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è
        getQuestPhoto(questId) {
            return localStorage.getItem(`quest_photo_${questId}`);
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        getCompletionDate(questId) {
            const date = localStorage.getItem(`quest_date_${questId}`);
            return date ? new Date(date) : null;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è
        getQuestQR(questId) {
            return localStorage.getItem(`quest_qr_${questId}`);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        generateQRCode(quest) {
            // –ü—Ä–æ—Å—Ç–æ–π QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–æ–Ω—É—Å–µ
            const qrData = {
                questId: quest.id,
                region: quest.regionName,
                partner: quest.partner ? quest.partner.name : '–ü–∞—Ä—Ç–Ω–µ—Ä',
                bonus: quest.partner ? quest.partner.description : '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å',
                date: new Date().toISOString()
            };

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º QRCode.js –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const canvas = document.createElement('canvas');
            const qr = new QRious({
                element: canvas,
                value: JSON.stringify(qrData),
                size: 300,
                level: 'H'
            });

            return canvas.toDataURL();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        updateQuestsBadge() {
            const badge = document.getElementById('questsBadge');
            const availableQuests = this.quests.filter(q => q.status === 'available').length;

            if (badge) {
                if (availableQuests > 0) {
                    badge.textContent = availableQuests;
                    badge.style.display = 'block';
                } else {
                    badge.style.display = 'none';
                }
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        render() {
            const container = document.querySelector('.quests-content');
            if (!container) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            this.generateQuests();

            container.innerHTML = `
                <div class="quests-header">
                    <div class="quests-title">üéØ –ò–≥—Ä–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è</div>
                    <div class="quests-subtitle">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π QR-–∫–æ–¥—ã –Ω–∞ –±–æ–Ω—É—Å—ã</div>
                </div>

                <div class="quests-info">
                    <div class="quests-info-title">üì∏ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</div>
                    <div class="quests-info-text">
                        –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤–∞–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–¥–∞–Ω–∏—è -
                        —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ
                        QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!
                    </div>
                    <div class="quests-reward">
                        <span class="reward-icon">üéÅ</span>
                        <span class="reward-text">–ó–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ: QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å</span>
                    </div>
                </div>

                <div class="quests-list" id="questsList">
                    ${this.renderQuestsList()}
                </div>
            `;

            this.updateQuestsBadge();
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–¥–∞–Ω–∏–π
        renderQuestsList() {
            if (this.quests.length === 0) {
                return `
                    <div class="quests-empty">
                        <div class="quests-empty-icon">üéØ</div>
                        <div class="quests-empty-text">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>
                        <div class="quests-empty-hint">–ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è</div>
                    </div>
                `;
            }

            return this.quests.map(quest => this.renderQuestCard(quest)).join('');
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞–Ω–∏—è
        renderQuestCard(quest) {
            const statusClass = quest.status;
            const statusText = {
                'available': '‚ú® –î–æ—Å—Ç—É–ø–Ω–æ',
                'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                'locked': 'üîí –ó–∞–∫—Ä—ã—Ç–æ'
            }[quest.status];

            const completedInfo = quest.status === 'completed' && quest.completedDate
                ? `<div class="quest-completed-date">–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${new Date(quest.completedDate).toLocaleDateString('ru-RU')}</div>`
                : '';

            const photoPreview = quest.photo
                ? `<img src="${quest.photo}" class="quest-photo-preview" alt="–§–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏">`
                : '';

            const actions = quest.status === 'available'
                ? `
                    <div class="quest-actions">
                        <button class="quest-btn quest-btn-primary" onclick="window.matryoshkaQuests.openPhotoUpload('${quest.id}')">
                            üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
                        </button>
                        <button class="quest-btn quest-btn-secondary" onclick="openRoute('${quest.attraction}')">
                            üó∫Ô∏è –ù–∞ –∫–∞—Ä—Ç–µ
                        </button>
                    </div>
                `
                : quest.status === 'completed'
                ? `
                    <div class="quest-actions">
                        <button class="quest-btn quest-btn-success" disabled>
                            ‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                        </button>
                    </div>
                `
                : '';

            return `
                <div class="quest-card ${statusClass}">
                    <div class="quest-header">
                        <div class="quest-title-row">
                            <div class="quest-title">${quest.title}</div>
                            <div class="quest-location">üìç ${quest.regionName}</div>
                        </div>
                        <div class="quest-status ${statusClass}">${statusText}</div>
                    </div>
                    <div class="quest-description">${quest.description}</div>
                    <div class="quest-reward-badge">
                        <span class="reward-icon">üéÅ</span>
                        <span class="reward-text">${quest.rewardText}</span>
                    </div>
                    ${completedInfo}
                    ${photoPreview}
                    ${quest.qrCode ? `
                        <div class="quest-qr-container">
                            <div class="quest-qr-title">‚úÖ –í–∞—à QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å:</div>
                            <img src="${quest.qrCode}" class="quest-qr-code" alt="QR –∫–æ–¥">
                            <div class="quest-qr-info">
                                ${quest.partner ? `üìç ${quest.partner.name}<br>${quest.partner.emoji} ${quest.partner.type}` : ''}
                            </div>
                            <button class="quest-btn quest-btn-primary" onclick="window.matryoshkaQuests.showQRFullscreen('${quest.id}')">
                                üîç –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥
                            </button>
                        </div>
                    ` : ''}
                    ${actions}
                </div>
            `;
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        openPhotoUpload(questId) {
            this.currentQuest = this.quests.find(q => q.id === questId);
            if (!this.currentQuest) return;

            const modal = this.createPhotoUploadModal();
            document.body.appendChild(modal);

            setTimeout(() => modal.classList.add('active'), 10);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        createPhotoUploadModal() {
            const modal = document.createElement('div');
            modal.className = 'photo-upload-modal';
            modal.id = 'photoUploadModal';

            modal.innerHTML = `
                <div class="photo-upload-content">
                    <button class="photo-upload-close" onclick="window.matryoshkaQuests.closePhotoUpload()">‚úï</button>

                    <div class="photo-upload-header">
                        <div class="photo-upload-title">üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</div>
                        <div class="photo-upload-subtitle">${this.currentQuest.attraction}</div>
                    </div>

                    <div class="photo-upload-zone" id="photoUploadZone">
                        <div class="upload-icon">üì∑</div>
                        <div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ</div>
                        <div class="upload-hint">JPG, PNG –¥–æ 5MB</div>
                        <input type="file" id="photoFileInput" accept="image/*" style="display: none;">
                    </div>

                    <div class="photo-preview-container" id="photoPreviewContainer" style="display: none;">
                        <img id="photoPreview" class="photo-preview-img" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">
                    </div>

                    <div class="photo-upload-actions">
                        <button class="quest-btn quest-btn-secondary" onclick="window.matryoshkaQuests.closePhotoUpload()">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button class="quest-btn quest-btn-primary" id="submitPhotoBtn" disabled onclick="window.matryoshkaQuests.submitPhoto()">
                            ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const zone = modal.querySelector('#photoUploadZone');
            const fileInput = modal.querySelector('#photoFileInput');

            zone.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) this.handlePhotoSelect(file);
            });

            // Drag & drop
            zone.addEventListener('dragover', (e) => {
                e.preventDefault();
                zone.classList.add('dragover');
            });

            zone.addEventListener('dragleave', () => {
                zone.classList.remove('dragover');
            });

            zone.addEventListener('drop', (e) => {
                e.preventDefault();
                zone.classList.remove('dragover');
                const file = e.dataTransfer.files[0];
                if (file) this.handlePhotoSelect(file);
            });

            return modal;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ
        handlePhotoSelect(file) {
            if (!file.type.startsWith('image/')) {
                showToast('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                showToast('‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
                return;
            }

            const reader = new FileReader();

            reader.onload = (e) => {
                const preview = document.getElementById('photoPreview');
                const previewContainer = document.getElementById('photoPreviewContainer');
                const submitBtn = document.getElementById('submitPhotoBtn');

                preview.src = e.target.result;
                previewContainer.style.display = 'block';
                submitBtn.disabled = false;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
                this.currentPhotoData = e.target.result;
            };

            reader.readAsDataURL(file);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        submitPhoto() {
            if (!this.currentPhotoData || !this.currentQuest) return;

            showLoader('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ...');

            setTimeout(() => {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                const qrCode = this.generateQRCode(this.currentQuest);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                this.saveCompletedQuest(this.currentQuest.id, this.currentPhotoData);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥
                localStorage.setItem(`quest_qr_${this.currentQuest.id}`, qrCode);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                this.closePhotoUpload();

                hideLoader();

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ QR-–∫–æ–¥–µ
                const partnerName = this.currentQuest.partner ? this.currentQuest.partner.name : '–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤';
                showToast(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å –≤ "${partnerName}"`, 4000);

                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
                this.render();
            }, 1500);
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        closePhotoUpload() {
            const modal = document.getElementById('photoUploadModal');
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => modal.remove(), 300);
            }
            this.currentPhotoData = null;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        showQRFullscreen(questId) {
            const quest = this.quests.find(q => q.id === questId);
            if (!quest || !quest.qrCode) return;

            const modal = document.createElement('div');
            modal.className = 'qr-fullscreen-modal active';
            modal.innerHTML = `
                <div class="qr-fullscreen-content">
                    <button class="qr-close-btn" onclick="this.closest('.qr-fullscreen-modal').remove()">‚úï</button>
                    <div class="qr-fullscreen-header">
                        <div class="qr-fullscreen-title">üéÅ QR-–∫–æ–¥ –Ω–∞ –±–æ–Ω—É—Å</div>
                        <div class="qr-fullscreen-subtitle">${quest.partner ? quest.partner.name : ''}</div>
                    </div>
                    <div class="qr-fullscreen-code">
                        <img src="${quest.qrCode}" alt="QR –∫–æ–¥">
                    </div>
                    <div class="qr-fullscreen-info">
                        ${quest.partner ? `
                            <div class="qr-partner-info">
                                <div class="qr-partner-name">${quest.partner.emoji} ${quest.partner.name}</div>
                                <div class="qr-partner-type">${quest.partner.type}</div>
                                <div class="qr-partner-desc">${quest.partner.description}</div>
                            </div>
                        ` : ''}
                        <div class="qr-instructions">
                            üì± –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            // –í–∏–±—Ä–∞—Ü–∏—è Telegram
            if (window.Telegram?.WebApp?.HapticFeedback) {
                window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
            }
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.matryoshkaQuests = new QuestsSystem();

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π –ú–∞—Ç—Ä–µ—à–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
})();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π
function showQuests() {
    console.log('üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.getElementById('mainSection').style.display = 'none';
    document.getElementById('regionDetails').style.display = 'none';
    document.getElementById('profileSection').style.display = 'none';
    document.getElementById('cartSection').style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    const questsSection = document.getElementById('questsSection');
    questsSection.style.display = 'block';

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    updateBottomNav('quests');

    // –†–µ–Ω–¥–µ—Ä–∏–º –∑–∞–¥–∞–Ω–∏—è
    if (window.matryoshkaQuests) {
        window.matryoshkaQuests.render();
    }

    // –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞–≤–µ—Ä—Ö
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏–π
function hideQuests() {
    console.log('üéØ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è');

    document.getElementById('questsSection').style.display = 'none';
    document.getElementById('mainSection').style.display = 'block';

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    updateBottomNav(null);

    // –°–∫—Ä–æ–ª–ª–∏–º –Ω–∞–≤–µ—Ä—Ö
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∑–∞–¥–∞–Ω–∏—è—Ö
document.addEventListener('DOMContentLoaded', function() {
    const questsBackBtn = document.getElementById('questsBackBtn');
    if (questsBackBtn) {
        questsBackBtn.addEventListener('click', hideQuests);
    }
});
