// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram?.WebApp;
let isTelegramWebApp = false;

if (tg) {
    isTelegramWebApp = true;

    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    tg.expand();

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    tg.enableClosingConfirmation();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    if (tg.setHeaderColor) {
        tg.setHeaderColor('secondary_bg_color');
    }
    if (tg.setBackgroundColor) {
        tg.setBackgroundColor('#0f0520');
    }

    // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    tg.ready();

    console.log('‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
        version: tg.version,
        platform: tg.platform,
        colorScheme: tg.colorScheme,
        viewportHeight: tg.viewportHeight,
        isExpanded: tg.isExpanded
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º BackButton –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (tg.BackButton) {
        tg.BackButton.onClick(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∑–∞–Ω–æ
            const regionDetails = document.getElementById('regionDetails');
            const profileSection = document.getElementById('profileSection');

            if (regionDetails && regionDetails.style.display !== 'none') {
                goBack();
                tg.BackButton.hide();
            } else if (profileSection && profileSection.style.display !== 'none') {
                hideProfile();
                tg.BackButton.hide();
            }
        });
    }
} else {
    console.log('‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
let globalTravelFeed = [
    {
        id: 1,
        author: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        avatar: 'üë§',
        time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
        title: '–ö—Ä–∞—Å–æ—Ç—ã –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞',
        image: './assets/travel1.jpg',
        text: '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π —Å—Ç–æ–ª–∏—Ü–µ –†–æ—Å—Å–∏–∏. –≠—Ä–º–∏—Ç–∞–∂ –ø–æ—Ä–∞–∑–∏–ª —Å–≤–æ–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏!'
    },
    {
        id: 2,
        author: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        avatar: 'üë§',
        time: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
        title: '–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ –†–æ—Å—Å–∏–∏',
        image: './assets/travel2.jpg',
        text: '–ü—Ä–æ–µ—Ö–∞–ª –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –ó–æ–ª–æ—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞. –û—Å–æ–±–µ–Ω–Ω–æ –≤–ø–µ—á–∞—Ç–ª–∏–ª –°—É–∑–¥–∞–ª—å —Å –µ–≥–æ –¥—Ä–µ–≤–Ω–∏–º–∏ —Ö—Ä–∞–º–∞–º–∏.'
    }
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
let russiaRegions = [];

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadRegionsData() {
    if (window.RUSSIA_REGIONS_DATA) {
        russiaRegions = Object.values(window.RUSSIA_REGIONS_DATA);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', russiaRegions.length);
        console.log('üìã –ü–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω:', russiaRegions[0]?.name);
    } else {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('üîç window.RUSSIA_REGIONS_DATA:', window.RUSSIA_REGIONS_DATA);
    }
}

// –°–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
let searchQuery = '';
let currentPage = 0;
const REGIONS_PER_PAGE = 6;
let filteredRegions = [];

// –ü–∞–∫–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
const travelPackages = [
    {
        id: 'ural',
        name: '–£—Ä–∞–ª',
        description: '–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥–æ—Ä—ã –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞',
        emoji: '‚õ∞Ô∏è',
        price: '–æ—Ç 35 000 ‚ÇΩ',
        duration: '7 –¥–Ω–µ–π',
        image: './city_photos/–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å.jpg',
        regions: ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ß–µ–ª—è–±–∏–Ω—Å–∫', '–ü–µ—Ä–º—å'],
        highlights: ['–ì—Ä–∞–Ω–∏—Ü–∞ –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏', '–£—Ä–∞–ª—å—Å–∫–∏–µ –≥–æ—Ä—ã', '–ú—É–∑–µ–π –ï–ª—å—Ü–∏–Ω–∞']
    },
    {
        id: 'caucasus',
        name: '–ö–∞–≤–∫–∞–∑',
        description: '–ì–æ—Ä–Ω—ã–µ –≤–µ—Ä—à–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
        emoji: 'üèîÔ∏è',
        price: '–æ—Ç 45 000 ‚ÇΩ',
        duration: '8 –¥–Ω–µ–π',
        image: './city_photos/–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è.jpg',
        regions: ['–°–æ—á–∏', '–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫', '–î–æ–º–±–∞–π'],
        highlights: ['–≠–ª—å–±—Ä—É—Å', '–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞', '–ù–∞—Ä–∑–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏']
    },
    {
        id: 'golden-ring',
        name: '–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ',
        description: '–î—Ä–µ–≤–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ —Å–≤—è—Ç—ã–Ω–∏',
        emoji: '‚õ™',
        price: '–æ—Ç 25 000 ‚ÇΩ',
        duration: '5 –¥–Ω–µ–π',
        image: './city_photos/GOLDRING.jpg',
        regions: ['–°—É–∑–¥–∞–ª—å', '–í–ª–∞–¥–∏–º–∏—Ä', '–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥'],
        highlights: ['–î—Ä–µ–≤–Ω–∏–µ —Ö—Ä–∞–º—ã', '–ú—É–∑–µ–∏-–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∏', '–ù–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–æ–º—ã—Å–ª—ã']
    }
];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function displayUserInfo() {
    const userNameEl = document.getElementById('userName');
    if (!userNameEl) return;

    if (tg && tg.initDataUnsafe?.user) {
        const user = tg.initDataUnsafe.user;
        userNameEl.innerHTML = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!`;
    } else {
        userNameEl.innerHTML = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
function searchRegions(query) {
    searchQuery = query.toLowerCase().trim();
    currentPage = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    loadRegions();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const regionsGrid = document.getElementById('regionsGrid');
    if (regionsGrid) {
        const totalRegions = getFilteredRegions().length;
        console.log(`üîç –ü–æ–∏—Å–∫: "${query}" - –Ω–∞–π–¥–µ–Ω–æ ${totalRegions} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤
function getFilteredRegions() {
    if (!searchQuery) {
        return russiaRegions;
    }

    return russiaRegions.filter(region => {
        return region.name.toLowerCase().includes(searchQuery) ||
               region.description.toLowerCase().includes(searchQuery) ||
               region.about.toLowerCase().includes(searchQuery);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
function loadRegions() {
    console.log('üîÑ –í—ã–∑–≤–∞–Ω–∞ loadRegions()');
    const regionsGrid = document.getElementById('regionsGrid');
    if (!regionsGrid) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç regionsGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (russiaRegions.length === 0) {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤...');
        loadRegionsData();
    }

    console.log('üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', russiaRegions.length);
    filteredRegions = getFilteredRegions();
    console.log('üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', filteredRegions.length);

    if (currentPage === 0) {
        // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –æ—á–∏—â–∞–µ–º –≤—Å–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 6
        regionsGrid.innerHTML = '';
        const regionsToShow = filteredRegions.slice(0, REGIONS_PER_PAGE);

        regionsToShow.forEach((region, index) => {
            const regionCard = createRegionCard(region, index);
            regionsGrid.appendChild(regionCard);
        });
    } else {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 6
        const startIndex = currentPage * REGIONS_PER_PAGE;
        const endIndex = startIndex + REGIONS_PER_PAGE;
        const regionsToShow = filteredRegions.slice(startIndex, endIndex);

        regionsToShow.forEach((region, index) => {
            const regionCard = createRegionCard(region, startIndex + index);
            regionsGrid.appendChild(regionCard);
        });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
    updateLoadMoreButton();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–Ω—Ç—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (currentPage === 0) {
        loadTravelFeed();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞
function createRegionCard(region, animationIndex) {
    const regionCard = document.createElement('div');
    regionCard.className = 'region-card';
    regionCard.onclick = () => showRegionDetails(region.id);

    regionCard.innerHTML = `
        <img src="${region.image}" alt="${region.name}" class="region-image" loading="lazy">
        <div class="region-content">
            <div class="region-name">${region.name}</div>
            <div class="region-description">${region.description}</div>
            <div class="region-stats">
                <span>üë• ${region.population}</span>
                <span>üìê ${region.area}</span>
            </div>
        </div>
    `;

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    regionCard.style.animation = `fadeInUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) ${(animationIndex % REGIONS_PER_PAGE) * 100}ms forwards`;
    regionCard.style.opacity = '0';

    return regionCard;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
function updateLoadMoreButton() {
    let loadMoreBtn = document.getElementById('loadMoreBtn');

    if (!loadMoreBtn) {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        loadMoreBtn = document.createElement('div');
        loadMoreBtn.id = 'loadMoreBtn';
        loadMoreBtn.className = 'load-more-container';

        const regionsGrid = document.getElementById('regionsGrid');
        regionsGrid.parentNode.insertBefore(loadMoreBtn, regionsGrid.nextSibling);
    }

    const displayedRegions = (currentPage + 1) * REGIONS_PER_PAGE;
    const hasMoreRegions = displayedRegions < filteredRegions.length;

    if (hasMoreRegions) {
        const remainingRegions = filteredRegions.length - displayedRegions;
        const nextBatchSize = Math.min(remainingRegions, REGIONS_PER_PAGE);

        loadMoreBtn.innerHTML = `
            <button class="load-more-btn" onclick="loadMoreRegions()">
                <span class="load-more-icon">‚¨áÔ∏è</span>
                <span class="load-more-text">–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ${nextBatchSize} ${nextBatchSize === 1 ? '—Ä–µ–≥–∏–æ–Ω' : nextBatchSize < 5 ? '—Ä–µ–≥–∏–æ–Ω–∞' : '—Ä–µ–≥–∏–æ–Ω–æ–≤'}</span>
                <span class="load-more-count">(–æ—Å—Ç–∞–ª–æ—Å—å ${remainingRegions})</span>
            </button>
        `;
        loadMoreBtn.style.display = 'block';
    } else {
        loadMoreBtn.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
function loadMoreRegions() {
    currentPage++;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const originalContent = loadMoreBtn.innerHTML;

    loadMoreBtn.innerHTML = `
        <div class="load-more-loading">
            <div class="load-more-spinner"></div>
            <span>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã...</span>
        </div>
    `;

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    setTimeout(() => {
        loadRegions();
    }, 800);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–Ω—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
function loadTravelFeed() {
    const travelFeed = document.getElementById('travelFeed');
    if (!travelFeed) return;

    if (globalTravelFeed.length === 0) {
        travelFeed.innerHTML = `
            <div class="feed-empty">
                <span class="empty-icon">üìù</span>
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π</p>
                <small>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º!</small>
            </div>
        `;
        return;
    }

    travelFeed.innerHTML = '';

    globalTravelFeed.forEach((post, index) => {
        const postElement = document.createElement('div');
        postElement.className = 'feed-post';

        postElement.innerHTML = `
            <div class="post-header">
                <div class="post-avatar">${post.avatar}</div>
                <div class="post-author">
                    <div class="post-name">${post.author}</div>
                    <div class="post-time">${post.time}</div>
                </div>
            </div>
            <div class="post-image">
                <img src="${post.image}" alt="${post.title}" loading="lazy">
            </div>
            <div class="post-content">
                <div class="post-title">${post.title}</div>
                <div class="post-text">${post.text}</div>
            </div>
        `;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ CSS
        postElement.style.animation = `fadeInUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) ${index * 100 + 500}ms forwards`;
        postElement.style.opacity = '0';

        travelFeed.appendChild(postElement);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
function loadTravelPackages() {
    const packagesContainer = document.createElement('div');
    packagesContainer.className = 'packages-section';
    packagesContainer.innerHTML = `
        <div class="packages-header">
            <h2 class="packages-title">
                <span class="packages-icon">üéí</span>
                –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
                <span class="packages-subtitle">–õ—É—á—à–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –†–æ—Å—Å–∏–∏</span>
            </h2>
        </div>
        <div class="packages-grid" id="packagesGrid">
            ${generatePackagesHTML()}
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–æ –ø–µ—Ä–µ–¥ –ª–µ–Ω—Ç–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    const travelFeedSection = document.querySelector('.travel-feed-section');
    if (travelFeedSection) {
        travelFeedSection.parentNode.insertBefore(packagesContainer, travelFeedSection);
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤
function generatePackagesHTML() {
    return travelPackages.map((pkg, index) => `
        <div class="package-card" onclick="showPackageDetails('${pkg.id}')" style="animation: fadeInUp 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) ${index * 200}ms forwards; opacity: 0;">
            <div class="package-image-container">
                <img src="${pkg.image}" alt="${pkg.name}" class="package-image" loading="lazy">
                <div class="package-overlay">
                    <div class="package-price">${pkg.price}</div>
                    <div class="package-duration">‚è±Ô∏è ${pkg.duration}</div>
                </div>
            </div>
            <div class="package-content">
                <div class="package-header">
                    <div class="package-emoji">${pkg.emoji}</div>
                    <div class="package-name">${pkg.name}</div>
                    <div class="package-description">${pkg.description}</div>
                </div>
                <div class="package-highlights">
                    ${pkg.highlights.map(highlight => `<span class="package-highlight">‚ú® ${highlight}</span>`).join('')}
                </div>
                <div class="package-regions">
                    <strong>–ì–æ—Ä–æ–¥–∞:</strong> ${pkg.regions.join(' ‚Ä¢ ')}
                </div>
            </div>
        </div>
    `).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function showPackageDetails(packageId) {
    const pkg = travelPackages.find(p => p.id === packageId);
    if (!pkg) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    showToast(`üéí –ü–∞–∫–µ—Ç "${pkg.name}" —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!`);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showToast(message, duration = 3000) {
    const toast = document.createElement('div');
    toast.className = 'matryoshka-toast';
    toast.textContent = message;

    Object.assign(toast.style, {
        position: 'fixed',
        bottom: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        background: 'linear-gradient(135deg, #ffcc00, #ff8e53)',
        color: '#1a1a2e',
        padding: '12px 24px',
        borderRadius: '12px',
        fontWeight: '600',
        fontSize: '14px',
        zIndex: '10000',
        boxShadow: '0 8px 32px rgba(255, 204, 0, 0.3)',
        animation: 'fadeInUp 0.3s ease-out'
    });

    document.body.appendChild(toast);

    setTimeout(() => {
        toast.style.animation = 'fadeOut 0.3s ease-out forwards';
        setTimeout(() => toast.remove(), 300);
    }, duration);
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç—É
function addToGlobalFeed(travel) {
    const user = window.Telegram?.WebApp?.initDataUnsafe?.user || {};
    const userName = user.first_name || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫';

    const newPost = {
        id: Date.now(),
        author: userName,
        avatar: 'üë§',
        time: '—Ç–æ–ª—å–∫–æ —á—Ç–æ',
        title: travel.title,
        image: travel.image,
        text: travel.text
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ª–µ–Ω—Ç—ã
    globalTravelFeed.unshift(newPost);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–Ω—Ç—É
    loadTravelFeed();

    console.log('üåü –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–µ–Ω—Ç—É:', newPost);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≥–∏–æ–Ω–∞
function showRegionDetails(regionId) {
    const region = russiaRegions.find(r => r.id === regionId);
    if (!region) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    window.currentRegionId = regionId;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    showLoader('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–≥–∏–æ–Ω–µ...');

    setTimeout(() => {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const mainSection = document.getElementById('mainSection');
            if (mainSection) mainSection.style.display = 'none';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞
            const detailsSection = document.getElementById('regionDetails');
            if (detailsSection) detailsSection.style.display = 'block';

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const regionTitle = document.getElementById('regionTitle');
            const regionDescription = document.getElementById('regionDescription');
            const regionImage = document.getElementById('regionImage');
            const regionAbout = document.getElementById('regionAbout');

            if (regionTitle) regionTitle.innerHTML = `${region.emoji} ${region.name}`;
            if (regionDescription) regionDescription.textContent = region.description;
            if (regionImage) regionImage.src = region.image;
            if (regionAbout) regionAbout.textContent = region.about;

            // –û–±–Ω–æ–≤–ª—è–µ–º breadcrumbs
            updateBreadcrumbs(region.name);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            loadAttractions(region.attractions);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
            loadPartners(region.partners);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É 2GIS
            load2GISMap(region).catch(mapError => {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', mapError);
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
                loadMapFallback(region);
            });

            hideLoader();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º BackButton –≤ Telegram
            if (tg && tg.BackButton) {
                tg.BackButton.show();
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram
            if (tg && tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞:', error);
            hideLoader();
        }
    }, 800);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (—Å–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å–∫—Ä—ã—Ç—å)
function loadAttractions(attractions) {
    const attractionsList = document.getElementById('attractionsList');
    if (!attractionsList) return;

    attractionsList.innerHTML = '';
    attractions.forEach((attraction, index) => {
        const li = document.createElement('li');
        const uniqueId = `attraction-${index}`;
        li.innerHTML = `
            <div class="attraction-header">
                <span class="attraction-name">${attraction.name}</span>
                <button class="action-btn route-btn" onclick="openRoute('${attraction.name}')">
                    <span class="route-icon">üó∫Ô∏è</span>
                    <span class="route-text">–ú–∞—Ä—à—Ä—É—Ç</span>
                </button>
            </div>
            <div class="attraction-info-auto" id="${uniqueId}" style="display: none;">${attraction.info}</div>
            <button class="toggle-description-btn" onclick="toggleAttractionDescription('${uniqueId}', this)">
                <span class="toggle-icon">‚ñº</span>
                <span class="toggle-text">–†–∞—Å–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</span>
            </button>
        `;
        li.style.opacity = '0';
        li.style.transform = 'translateX(-30px)';
        attractionsList.appendChild(li);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ CSS
        li.style.animation = `fadeInLeft 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) ${index * 100}ms forwards`;
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function toggleAttractionDescription(elementId, button) {
    const infoElement = document.getElementById(elementId);
    const icon = button.querySelector('.toggle-icon');
    const text = button.querySelector('.toggle-text');

    if (infoElement.style.display === 'none') {
        infoElement.style.display = 'block';
        infoElement.style.animation = 'fadeInUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';
        icon.textContent = '‚ñ≤';
        text.textContent = '–°–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ';
    } else {
        infoElement.style.display = 'none';
        icon.textContent = '‚ñº';
        text.textContent = '–†–∞—Å–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Å QR-–∫–æ–¥–∞–º–∏
function loadPartners(partners) {
    const partnersGrid = document.getElementById('partnersGrid');
    if (!partnersGrid) return;

    partnersGrid.innerHTML = '';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—â–µ–π –∫–Ω–æ–ø–∫–∏
    window.currentPartners = partners;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    const currentRegionId = getCurrentRegionId();
    const isPaid = isRegionPaid(currentRegionId);

    partners.forEach((partner, index) => {
        const card = document.createElement('div');
        card.className = 'partner-card';

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É QR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const qrButtonHTML = isPaid
            ? `<button class="partner-qr-btn" onclick='showPartnerQRByName("${partner.name.replace(/'/g, "\\'")}","${partner.emoji}")'>
                   <span class="qr-btn-icon">üì±</span>
                   <span class="qr-btn-text">–ü–æ–∫–∞–∑–∞—Ç—å QR</span>
               </button>`
            : `<button class="partner-qr-btn disabled" disabled title="–û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR-–∫–æ–¥–∞">
                   <span class="qr-btn-icon">üîí</span>
                   <span class="qr-btn-text">–ü–æ–∫–∞–∑–∞—Ç—å QR</span>
               </button>`;

        card.innerHTML = `
            <div class="partner-image">${partner.emoji}</div>
            <div class="partner-info">
                <div class="partner-name">${partner.name}</div>
                <div class="partner-type">${partner.type}</div>
                <div class="partner-description">${partner.description}</div>
                <div class="partner-rating">
                    <span>‚≠ê</span>
                    <span>${partner.rating}</span>
                </div>
                <button class="partner-route-btn" data-partner-index="${index}">
                    <span class="route-icon">üó∫Ô∏è</span>
                    <span class="route-text">–ú–∞—Ä—à—Ä—É—Ç, –æ—Ç–∑—ã–≤—ã, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</span>
                </button>
                ${qrButtonHTML}
            </div>
        `;
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        partnersGrid.appendChild(card);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        const routeBtn = card.querySelector('.partner-route-btn');
        routeBtn.addEventListener('click', () => {
            openPartnerRoute(partner);
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            card.style.transition = 'all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –≤–Ω–∏–∑—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
    if (!isPaid) {
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'partners-buttons-container';
        buttonsContainer.innerHTML = `
            <button class="partners-pay-btn" onclick="showPaymentModal()">
                <span class="pay-btn-icon">üí≥</span>
                <span class="pay-btn-text">–û–ø–ª–∞—Ç–∏—Ç—å –ø–∞–∫–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞</span>
                <span class="pay-btn-price">300 ‚ÇΩ</span>
            </button>
            <button class="partners-demo-btn" onclick="demoPurchase()">
                <span class="demo-btn-icon">‚ú®</span>
                <span class="demo-btn-text">–î–µ–º–æ-–ø–æ–∫—É–ø–∫–∞</span>
            </button>
        `;
        partnersGrid.appendChild(buttonsContainer);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ QR –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
function showPartnerQRByName(partnerName, partnerEmoji) {
    console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', partnerName);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É QR
    if (typeof showQRModal === 'function') {
        showQRModal(partnerName, partnerEmoji);
    } else if (window.matryoshkaQR) {
        // Fallback –Ω–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É QR
        const partner = window.currentPartners?.find(p => p.name === partnerName);
        if (partner) {
            window.matryoshkaQR.showQRCode(partner);
        }
    } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        showStaticQR(partnerName);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ QR –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function showAllPartnersQR() {
    const partners = window.currentPartners || [];

    if (partners.length === 0) {
        showToast('‚ùå –ü–∞—Ä—Ç–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π QR-–∫–æ–¥ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É QR –æ—Ç matryoshkaQR
    if (window.matryoshkaQR) {
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å QR –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π QR
        window.matryoshkaQR.showQRCode(partners[0]);
    } else {
        // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π QR
        showStaticQR('–ü–∞—Ä—Ç–Ω–µ—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ QR –∫–æ–¥–∞
function showStaticQR(partnerName) {
    console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥ –¥–ª—è:', partnerName);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è QR –∫–æ–¥–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let qrContainer = document.getElementById('staticQRContainer');
    if (!qrContainer) {
        qrContainer = document.createElement('div');
        qrContainer.id = 'staticQRContainer';
        qrContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.85);
            backdrop-filter: blur(10px);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
        document.body.appendChild(qrContainer);
    }

    qrContainer.innerHTML = `
        <div style="
            background: rgba(15, 5, 32, 0.98);
            border: 2px solid rgba(255, 204, 0, 0.4);
            border-radius: 24px;
            padding: 30px;
            text-align: center;
            box-shadow: 0 16px 64px rgba(0,0,0,0.6);
            max-width: 90%;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        ">
            <div style="color: #ffcc00; font-weight: 700; margin-bottom: 15px; font-size: 1.2rem;">
                ${partnerName}
            </div>
            <img
                src="./city_photos/1614355077_html_c2a765adeec0a9fd.png"
                alt="QR Code"
                style="width: 200px; height: 200px; border-radius: 12px; background: white; padding: 10px;"
            />
            <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-top: 12px;">
                –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            </div>
            <button
                onclick="closeStaticQR()"
                style="
                    margin-top: 20px;
                    background: linear-gradient(135deg, rgba(255, 204, 0, 0.2), rgba(255, 107, 107, 0.2));
                    border: 1px solid rgba(255, 204, 0, 0.4);
                    color: white;
                    padding: 12px 24px;
                    border-radius: 12px;
                    cursor: pointer;
                    font-size: 0.95rem;
                    font-weight: 600;
                    transition: all 0.3s ease;
                "
                onmouseover="this.style.background='linear-gradient(135deg, rgba(255, 204, 0, 0.3), rgba(255, 107, 107, 0.3))'"
                onmouseout="this.style.background='linear-gradient(135deg, rgba(255, 204, 0, 0.2), rgba(255, 107, 107, 0.2))'"
            >
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        </div>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        qrContainer.style.opacity = '1';
        const innerDiv = qrContainer.querySelector('div > div');
        if (innerDiv) innerDiv.style.transform = 'scale(1)';
    }, 50);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    qrContainer.onclick = (e) => {
        if (e.target === qrContainer) {
            closeStaticQR();
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ QR –∫–æ–¥–∞
function closeStaticQR() {
    const qrContainer = document.getElementById('staticQRContainer');
    if (qrContainer) {
        qrContainer.style.opacity = '0';
        setTimeout(() => {
            qrContainer.remove();
        }, 300);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ QR-–∫–æ–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
function showPartnerQR(partnerData) {
    if (window.matryoshkaQR) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        const btn = event.target;
        btn.style.transform = 'scale(0.95)';
        setTimeout(() => {
            btn.style.transform = '';
        }, 150);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥
        window.matryoshkaQR.showQRCode(partnerData);

        console.log('üî≤ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –¥–ª—è:', partnerData.name);
    } else {
        console.error('‚ùå QR —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        showToast('‚ùå QR-–∫–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function openRoute(attractionName) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    const currentRegionId = getCurrentRegionId();
    const regionData = window.RUSSIA_REGIONS_DATA?.[currentRegionId];

    if (!regionData) {
        console.error('–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ò—â–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const attraction = regionData.attractions.find(a => a.name === attractionName);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    showNavigationChoice({
        name: attractionName,
        coordinates: attraction?.coordinates,
        type: 'attraction'
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
function openPartnerRoute(partner) {
    console.log('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', partner.name);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    showNavigationChoice({
        name: partner.name,
        coordinates: partner.coordinates,
        type: 'partner'
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function showNavigationChoice(place) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'navigationModal';
    modal.className = 'navigation-modal';
    modal.innerHTML = `
        <div class="navigation-modal-overlay"></div>
        <div class="navigation-modal-content">
            <button class="navigation-modal-close">‚úï</button>

            <div class="navigation-modal-header">
                <h3 class="navigation-modal-title">üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é</h3>
                <p class="navigation-modal-subtitle">${place.name}</p>
            </div>

            <div class="navigation-options">
                <button class="navigation-option" data-nav="2gis">
                    <div class="navigation-option-icon" style="background: linear-gradient(135deg, #00a650, #008f45);">
                        <svg width="40" height="40" viewBox="0 0 40 40" fill="white">
                            <path d="M20 10C16.13 10 13 13.13 13 17c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                        </svg>
                    </div>
                    <div class="navigation-option-info">
                        <div class="navigation-option-name">2GIS</div>
                        <div class="navigation-option-desc">–ö–∞—Ä—Ç—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è</div>
                    </div>
                </button>

                <button class="navigation-option" data-nav="yandex">
                    <div class="navigation-option-icon" style="background: linear-gradient(135deg, #fc3f1d, #ff0000);">
                        <svg width="40" height="40" viewBox="0 0 40 40" fill="white">
                            <text x="50%" y="55%" text-anchor="middle" font-size="24" font-weight="bold" font-family="Arial">–Ø</text>
                        </svg>
                    </div>
                    <div class="navigation-option-info">
                        <div class="navigation-option-name">–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</div>
                        <div class="navigation-option-desc">–ú–∞—Ä—à—Ä—É—Ç—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è</div>
                    </div>
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const overlay = modal.querySelector('.navigation-modal-overlay');
    const closeBtn = modal.querySelector('.navigation-modal-close');
    const btn2gis = modal.querySelector('[data-nav="2gis"]');
    const btnYandex = modal.querySelector('[data-nav="yandex"]');

    overlay.addEventListener('click', closeNavigationModal);
    closeBtn.addEventListener('click', closeNavigationModal);

    btn2gis.addEventListener('click', () => {
        openIn2GIS(place.name, place.coordinates);
    });

    btnYandex.addEventListener('click', () => {
        openInYandex(place.name, place.coordinates);
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('active');
    }, 10);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function closeNavigationModal() {
    const modal = document.getElementById('navigationModal');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ 2GIS
function openIn2GIS(placeName, coordinates) {
    closeNavigationModal();

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –≥–æ—Ä–æ–¥ (–∫–∞–∫ —É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π)
    const regionData = window.RUSSIA_REGIONS_DATA?.[getCurrentRegionId()];
    const cityName = regionData?.name || '';
    const searchQuery = encodeURIComponent(`${placeName} ${cityName}`);
    const url = `https://2gis.ru/search/${searchQuery}`;

    window.open(url, '_blank');
    console.log('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º 2GIS:', url);
    showToast('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º 2GIS');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
function openInYandex(placeName, coordinates) {
    closeNavigationModal();

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –≥–æ—Ä–æ–¥ (–∫–∞–∫ —É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π)
    const regionData = window.RUSSIA_REGIONS_DATA?.[getCurrentRegionId()];
    const cityName = regionData?.name || '';
    const searchQuery = encodeURIComponent(`${placeName} ${cityName}`);
    const url = `https://yandex.ru/maps/?text=${searchQuery}`;

    window.open(url, '_blank');
    console.log('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã:', url);
    showToast('üó∫Ô∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
function getCurrentRegionId() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if (window.currentRegionId) {
        return window.currentRegionId;
    }
    return null;
}

// ========================================
// –°–ò–°–¢–ï–ú–ê –û–ü–õ–ê–¢–´ –†–ï–ì–ò–û–ù–û–í
// ========================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ sessionStorage
function initPaidRegions() {
    const saved = sessionStorage.getItem('paidRegions');
    if (saved) {
        try {
            const data = JSON.parse(saved);
            // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–º–∞—Å—Å–∏–≤ ID)
            if (Array.isArray(data) && data.length > 0 && typeof data[0] === 'string') {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
                window.paidRegions = data.map(id => ({
                    id,
                    purchaseDate: new Date().toISOString(),
                    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
                }));
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                sessionStorage.setItem('paidRegions', JSON.stringify(window.paidRegions));
            } else {
                window.paidRegions = data;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
            const now = new Date();
            window.paidRegions = window.paidRegions.filter(region => {
                return new Date(region.expiresAt) > now;
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            sessionStorage.setItem('paidRegions', JSON.stringify(window.paidRegions));
        } catch (e) {
            window.paidRegions = [];
        }
    } else {
        window.paidRegions = [];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initPaidRegions();

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Ä–µ–≥–∏–æ–Ω
function isRegionPaid(regionId) {
    initPaidRegions(); // –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
    return window.paidRegions.some(region => region.id === regionId);
}

// –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
function markRegionAsPaid(regionId) {
    initPaidRegions(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω
    const existingRegion = window.paidRegions.find(r => r.id === regionId);
    if (existingRegion) {
        const expiresDate = new Date(existingRegion.expiresAt).toLocaleDateString('ru-RU');
        showToast(`–†–µ–≥–∏–æ–Ω —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –¥–æ ${expiresDate}`, 3000);
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω —Å–æ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è 7 –¥–Ω–µ–π
    const purchaseDate = new Date();
    const expiresAt = new Date(purchaseDate);
    expiresAt.setDate(expiresAt.getDate() + 7);

    const paidRegion = {
        id: regionId,
        purchaseDate: purchaseDate.toISOString(),
        expiresAt: expiresAt.toISOString()
    };

    window.paidRegions.push(paidRegion);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage
    sessionStorage.setItem('paidRegions', JSON.stringify(window.paidRegions));
    console.log('‚úÖ –†–µ–≥–∏–æ–Ω –æ–ø–ª–∞—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', regionId, paidRegion);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã
function showPaymentModal() {
    const currentRegionId = getCurrentRegionId();
    const regionData = window.RUSSIA_REGIONS_DATA?.[currentRegionId];
    const regionName = regionData?.name || '—Ä–µ–≥–∏–æ–Ω–∞';

    const modal = document.createElement('div');
    modal.id = 'paymentModal';
    modal.className = 'payment-modal';
    modal.innerHTML = `
        <div class="payment-modal-overlay"></div>
        <div class="payment-modal-content">
            <button class="payment-modal-close" onclick="closePaymentModal()">‚úï</button>

            <div class="payment-modal-header">
                <h3 class="payment-modal-title">üí≥ –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–∞</h3>
                <p class="payment-modal-subtitle">–ü–∞–∫–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${regionName}</p>
                <div class="payment-modal-price">300 ‚ÇΩ</div>
            </div>

            <form class="payment-form" onsubmit="processPayment(event)">
                <div class="payment-form-group">
                    <label class="payment-label">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
                    <input
                        type="text"
                        class="payment-input"
                        placeholder="0000 0000 0000 0000"
                        maxlength="19"
                        required
                    >
                </div>

                <div class="payment-form-row">
                    <div class="payment-form-group">
                        <label class="payment-label">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</label>
                        <input
                            type="text"
                            class="payment-input"
                            placeholder="MM/YY"
                            maxlength="5"
                            required
                        >
                    </div>
                    <div class="payment-form-group">
                        <label class="payment-label">CVV</label>
                        <input
                            type="text"
                            class="payment-input"
                            placeholder="***"
                            maxlength="3"
                            required
                        >
                    </div>
                </div>

                <button type="submit" class="payment-submit-btn">
                    <span class="payment-submit-icon">üí≥</span>
                    <span class="payment-submit-text">–û–ø–ª–∞—Ç–∏—Ç—å 300 ‚ÇΩ</span>
                </button>
            </form>
        </div>
    `;

    document.body.appendChild(modal);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('active');
    }, 10);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    const overlay = modal.querySelector('.payment-modal-overlay');
    overlay.addEventListener('click', closePaymentModal);
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã
function closePaymentModal() {
    const modal = document.getElementById('paymentModal');
    if (modal) {
        modal.classList.remove('active');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
function processPayment(event) {
    event.preventDefault();

    const currentRegionId = getCurrentRegionId();
    const regionData = window.RUSSIA_REGIONS_DATA?.[currentRegionId];

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    showLoader('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');

    setTimeout(() => {
        // –û—Ç–º–µ—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        markRegionAsPaid(currentRegionId);

        hideLoader();
        closePaymentModal();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        showToast('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 3000);

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (regionData && regionData.partners) {
            loadPartners(regionData.partners);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
        if (window.matryoshkaProfile && window.matryoshkaProfile.updateCoupons) {
            window.matryoshkaProfile.updateCoupons();
        }
    }, 2000);
}

// –î–µ–º–æ-–ø–æ–∫—É–ø–∫–∞ (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è)
function demoPurchase() {
    const currentRegionId = getCurrentRegionId();
    const regionData = window.RUSSIA_REGIONS_DATA?.[currentRegionId];

    // –û—Ç–º–µ—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    markRegionAsPaid(currentRegionId);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showToast('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! (–î–µ–º–æ)', 3000);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    if (regionData && regionData.partners) {
        loadPartners(regionData.partners);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    if (window.matryoshkaProfile && window.matryoshkaProfile.updateCoupons) {
        window.matryoshkaProfile.updateCoupons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã 2GIS
async function load2GISMap(regionData) {
    console.log('üó∫Ô∏è load2GISMap –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', regionData);
    console.log('üìã –ü–∞—Ä—Ç–Ω—ë—Ä—ã –≤ regionData:', regionData?.partners);
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:', regionData?.partners?.length);

    const mapContainer = document.getElementById('mapContainer');
    if (!mapContainer) {
        console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    mapContainer.innerHTML = `
        <div class="map-loading">
            <div class="map-loading-spinner"></div>
            <div class="map-loading-text">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É —Ä–µ–≥–∏–æ–Ω–∞...</div>
        </div>
    `;

    try {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ –Ω–∞—à –º–æ–¥—É–ª—å
        if (window.matryoshka2GIS) {
            console.log('‚úÖ –ú–æ–¥—É–ª—å matryoshka2GIS –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º createMap...');
            await window.matryoshka2GIS.createMap(regionData, 'mapContainer');
        } else {
            throw new Error('–ú–æ–¥—É–ª—å –∫–∞—Ä—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã:', error);
        // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π iframe –∫–∞—Ä—Ç–µ
        loadMapFallback(regionData);
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã (fallback)
function loadMapFallback(regionData) {
    const mapContainer = document.getElementById('mapContainer');
    if (!mapContainer) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞
    const center = getRegionCenterCoords(regionData.id);

    mapContainer.innerHTML = `
        <iframe
            src="https://widgets.2gis.com/widget?id=DgWidget_map&opt=%7B%22pos%22%3A%7B%22lat%22%3A${center.lat}%2C%22lon%22%3A${center.lon}%2C%22zoom%22%3A${center.zoom}%7D%2C%22opt%22%3A%7B%22city%22%3A%22${regionData.name}%22%7D%7D"
            width="100%"
            height="100%"
            frameborder="0"
            allowfullscreen=""
            style="border-radius: 16px;"
        ></iframe>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
function getRegionCenterCoords(regionId) {
    const centers = {
        'moscow': { lat: 55.7558, lon: 37.6176, zoom: 10 },
        'spb': { lat: 59.9311, lon: 30.3351, zoom: 10 },
        'kazan': { lat: 55.7887, lon: 49.1221, zoom: 11 },
        'sochi': { lat: 43.6028, lon: 39.7303, zoom: 11 },
        'ekaterinburg': { lat: 56.8431, lon: 60.6122, zoom: 11 },
        'volgograd': { lat: 48.7194, lon: 44.5018, zoom: 11 },
        'irkutsk': { lat: 52.2978, lon: 104.2964, zoom: 11 },
        'kaliningrad': { lat: 54.7065, lon: 20.5083, zoom: 11 },
        'nizhnynovgorod': { lat: 56.2965, lon: 44.0020, zoom: 11 },
        'chelyabinsk': { lat: 55.1644, lon: 61.4291, zoom: 11 },
        'karachaevo': { lat: 43.7681, lon: 42.0577, zoom: 10 },
        'stavropol': { lat: 45.0428, lon: 41.9734, zoom: 11 },
        'yaroslavl': { lat: 57.6261, lon: 39.8844, zoom: 11 },
        'kostroma': { lat: 57.7665, lon: 40.9266, zoom: 11 },
        'kabardino': { lat: 43.4806, lon: 43.4917, zoom: 10 }
    };

    return centers[regionId] || { lat: 55.7558, lon: 37.6176, zoom: 10 };
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
function goBack() {
    const detailsSection = document.getElementById('regionDetails');
    const mainSection = document.getElementById('mainSection');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º QR –∫–æ–¥ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
    closeStaticQR();

    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    if (window.matryoshka2GIS) {
        window.matryoshka2GIS.destroy();
    }

    if (detailsSection) detailsSection.style.display = 'none';
    if (mainSection) mainSection.style.display = 'block';

    // –°–∫—Ä—ã–≤–∞–µ–º BackButton –≤ Telegram
    if (tg && tg.BackButton) {
        tg.BackButton.hide();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–∞–¥–µ—Ä–∞
function showLoader(text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const loader = document.getElementById('loader');
    const loaderText = document.getElementById('loaderText');

    if (loader) loader.classList.add('active');
    if (loaderText) loaderText.textContent = text;
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è –ª–æ–∞–¥–µ—Ä–∞
function hideLoader() {
    const loader = document.getElementById('loader');
    if (loader) loader.classList.remove('active');
}


// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
function showProfile() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–µ—Ç–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞
    document.getElementById('mainSection').style.display = 'none';
    document.getElementById('regionDetails').style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileSection = document.getElementById('profileSection');
    profileSection.style.display = 'block';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º BackButton –≤ Telegram
    if (tg && tg.BackButton) {
        tg.BackButton.show();
    }

    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (tg && tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ú–∞—Ç—Ä–µ—à–∫–∞
    if (window.matryoshkaProfile) {
        window.matryoshkaProfile.loadProfileData();
    } else {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        setTimeout(() => {
            if (window.initProfile) {
                window.initProfile();
            }
        }, 100);
    }
}

// –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
function hideProfile() {
    document.getElementById('profileSection').style.display = 'none';
    document.getElementById('mainSection').style.display = 'block';

    // –°–∫—Ä—ã–≤–∞–µ–º BackButton –≤ Telegram
    if (tg && tg.BackButton) {
        tg.BackButton.hide();
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ (—É–¥–∞–ª–µ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('ü™Ü –ú–∞—Ç—Ä–µ—à–∫–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤
    loadRegionsData();

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    displayUserInfo();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
    loadRegions();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
    setTimeout(() => {
        loadTravelPackages();
    }, 1000);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    const backBtn = document.getElementById('backBtn');
    if (backBtn) {
        backBtn.addEventListener('click', goBack);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    const profileBackBtn = document.getElementById('profileBackBtn');
    if (profileBackBtn) {
        profileBackBtn.addEventListener('click', hideProfile);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    if (tg) {
        console.log('‚úÖ Telegram Web App –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if (tg.MainButton) {
            tg.MainButton.text = '–ì–ª–∞–≤–Ω–∞—è';
            tg.MainButton.onClick(() => goBack());
        }
    }

    console.log('üöÄ –ú–∞—Ç—Ä–µ—à–∫–∞ - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
});
// ========================================
// BREADCRUMBS –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ========================================

function updateBreadcrumbs(regionName) {
    const breadcrumbRegion = document.getElementById('breadcrumbRegion');
    if (breadcrumbRegion && regionName) {
        breadcrumbRegion.textContent = regionName;
    }
}

// ========================================
// –ö–ù–û–ü–ö–ê "–ù–ê–í–ï–†–•"
// ========================================

(function initScrollToTop() {
    const scrollToTopBtn = document.getElementById('scrollToTop');
    
    if (!scrollToTopBtn) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    let scrollTimeout;
    window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        
        const scrolled = window.pageYOffset || document.documentElement.scrollTop;
        
        if (scrolled > 400) {
            scrollToTopBtn.classList.add('visible');
        } else {
            scrollToTopBtn.classList.remove('visible');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        scrollTimeout = setTimeout(() => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
        }, 100);
    }, { passive: true });

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö –ø—Ä–∏ –∫–ª–∏–∫–µ
    scrollToTopBtn.addEventListener('click', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
})();
